"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[556],{9539:(V,w,d)=>{d.r(w),d.d(w,{TechniquesModule:()=>N});var k=d(9808),h=d(215),x=d(4466),r=d(4834),e=d(4893),p=d(4336),i=d(4521);let M=(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-caching"]],features:[e.qOj],decls:456,vars:8,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/caching.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","caching"],["appAnchor","","id","installation"],["rel","nofollow","target","_blank","href","https://github.com/BryanDonovan/node-cache-manager"],[1,"language-bash"],["appAnchor","","id","in-memory-cache"],[1,"language-typescript"],["appAnchor","","id","interacting-with-the-cache-store"],[1,"info"],["appAnchor","","id","auto-caching-responses"],[1,"warning"],["routerLink","/graphql/quick-start"],["href","https://docs.nestjs.com/interceptors#response-mapping"],["appAnchor","","id","customize-caching"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Time_to_live"],["appAnchor","","id","use-module-globally"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/modules#global-modules"],["appAnchor","","id","global-cache-overrides"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/techniques/caching#different-stores"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/techniques/caching#customize-caching"],["appAnchor","","id","websockets-and-microservices"],[1,"filename"],["app8a3f1312c95ad5c284db2e2a95caaaa5fccd5ba1",""],["appb3be662105b58d77f695e2561495d985f4ffbebd",""],["appAnchor","","id","adjust-tracking"],["appAnchor","","id","different-stores"],["rel","nofollow","target","_blank","href","https://github.com/dabroek/node-cache-manager-redis-store"],["rel","nofollow","target","_blank","href","https://github.com/BryanDonovan/node-cache-manager#store-engines"],["rel","nofollow","target","_blank","href","https://github.com/dabroek/node-cache-manager-redis-store/issues/40"],["appAnchor","","id","async-configuration"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/20-cache"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Caching"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Caching is a great and simple "),e.TgZ(9,"strong"),e._uU(10,"technique"),e.qZA(),e._uU(11," that helps improve your app's performance. It acts as a temporary data store providing high performance data access."),e.qZA(),e.TgZ(12,"h4",6)(13,"span"),e._uU(14,"Installation"),e.qZA()(),e.TgZ(15,"p"),e._uU(16,"First install "),e.TgZ(17,"a",7),e._uU(18,"required packages"),e.qZA(),e._uU(19," (and its types for TypeScript users):"),e.qZA(),e.TgZ(20,"pre")(21,"code",8),e._uU(22,"\n$ npm install cache-manager\n$ npm install -D @types/cache-manager\n"),e.qZA()(),e.TgZ(23,"h4",9)(24,"span"),e._uU(25,"In-memory cache"),e.qZA()(),e.TgZ(26,"p"),e._uU(27,"Nest provides a unified API for various cache storage providers. The built-in one is an in-memory data store. However, you can easily switch to a more comprehensive solution, like Redis."),e.qZA(),e.TgZ(28,"p"),e._uU(29,"In order to enable caching, import the "),e.TgZ(30,"code"),e._uU(31,"CacheModule"),e.qZA(),e._uU(32," and call its "),e.TgZ(33,"code"),e._uU(34,"register()"),e.qZA(),e._uU(35," method."),e.qZA(),e.TgZ(36,"pre")(37,"code",10),e._uU(38,"\nimport { CacheModule, Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\n\n@Module({\n  imports: [CacheModule.register()],\n  controllers: [AppController],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(39,"h4",11)(40,"span"),e._uU(41,"Interacting with the Cache store"),e.qZA()(),e.TgZ(42,"p"),e._uU(43,"To interact with the cache manager instance, inject it to your class using the "),e.TgZ(44,"code"),e._uU(45,"CACHE_MANAGER"),e.qZA(),e._uU(46," token, as follows:"),e.qZA(),e.TgZ(47,"pre")(48,"code",10),e._uU(49,"\nconstructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n"),e.qZA()(),e.TgZ(50,"blockquote",12)(51,"strong"),e._uU(52,"Hint"),e.qZA(),e._uU(53," The "),e.TgZ(54,"code"),e._uU(55,"Cache"),e.qZA(),e._uU(56," class is imported from the "),e.TgZ(57,"code"),e._uU(58,"cache-manager"),e.qZA(),e._uU(59,", while "),e.TgZ(60,"code"),e._uU(61,"CACHE_MANAGER"),e.qZA(),e._uU(62," token from the "),e.TgZ(63,"code"),e._uU(64,"@nestjs/common"),e.qZA(),e._uU(65," package.\n"),e.qZA(),e.TgZ(66,"p"),e._uU(67,"The "),e.TgZ(68,"code"),e._uU(69,"get"),e.qZA(),e._uU(70," method on the "),e.TgZ(71,"code"),e._uU(72,"Cache"),e.qZA(),e._uU(73," instance (from the "),e.TgZ(74,"code"),e._uU(75,"cache-manager"),e.qZA(),e._uU(76," package) is used to retrieve items from the cache. If the item does not exist in the cache, "),e.TgZ(77,"code"),e._uU(78,"null"),e.qZA(),e._uU(79," will be returned."),e.qZA(),e.TgZ(80,"pre")(81,"code",10),e._uU(82,"\nconst value = await this.cacheManager.get('key');\n"),e.qZA()(),e.TgZ(83,"p"),e._uU(84,"To add an item to the cache, use the "),e.TgZ(85,"code"),e._uU(86,"set"),e.qZA(),e._uU(87," method:"),e.qZA(),e.TgZ(88,"pre")(89,"code",10),e._uU(90,"\nawait this.cacheManager.set('key', 'value');\n"),e.qZA()(),e.TgZ(91,"p"),e._uU(92,"The default expiration time of the cache is 5 seconds."),e.qZA(),e.TgZ(93,"p"),e._uU(94,"You can manually specify a TTL (expiration time in seconds) for this specific key, as follows:"),e.qZA(),e.TgZ(95,"pre")(96,"code",10),e._uU(97,"\nawait this.cacheManager.set('key', 'value', { ttl: 1000 });\n"),e.qZA()(),e.TgZ(98,"p"),e._uU(99,"To disable expiration of the cache, set the "),e.TgZ(100,"code"),e._uU(101,"ttl"),e.qZA(),e._uU(102," configuration property to "),e.TgZ(103,"code"),e._uU(104,"0"),e.qZA(),e._uU(105,":"),e.qZA(),e.TgZ(106,"pre")(107,"code",10),e._uU(108,"\nawait this.cacheManager.set('key', 'value', { ttl: 0 });\n"),e.qZA()(),e.TgZ(109,"p"),e._uU(110,"To remove an item from the cache, use the "),e.TgZ(111,"code"),e._uU(112,"del"),e.qZA(),e._uU(113," method:"),e.qZA(),e.TgZ(114,"pre")(115,"code",10),e._uU(116,"\nawait this.cacheManager.del('key');\n"),e.qZA()(),e.TgZ(117,"p"),e._uU(118,"To clear the entire cache, use the "),e.TgZ(119,"code"),e._uU(120,"reset"),e.qZA(),e._uU(121," method:"),e.qZA(),e.TgZ(122,"pre")(123,"code",10),e._uU(124,"\nawait this.cacheManager.reset();\n"),e.qZA()(),e.TgZ(125,"h4",13)(126,"span"),e._uU(127,"Auto-caching responses"),e.qZA()(),e.TgZ(128,"blockquote",14)(129,"strong"),e._uU(130,"Warning"),e.qZA(),e._uU(131," In "),e.TgZ(132,"a",15),e._uU(133,"GraphQL"),e.qZA(),e._uU(134," applications, interceptors are executed separately for each field resolver. Thus, "),e.TgZ(135,"code"),e._uU(136,"CacheModule"),e.qZA(),e._uU(137," (which uses interceptors to cache responses) will not work properly.\n"),e.qZA(),e.TgZ(138,"p"),e._uU(139,"To enable auto-caching responses, just tie the "),e.TgZ(140,"code"),e._uU(141,"CacheInterceptor"),e.qZA(),e._uU(142," where you want to cache data."),e.qZA(),e.TgZ(143,"pre")(144,"code",10),e._uU(145,"\n@Controller()\n@UseInterceptors(CacheInterceptor)\nexport class AppController {\n  @Get()\n  findAll(): string[] {\n    return [];\n  }\n}\n"),e.qZA()(),e.TgZ(146,"blockquote",14)(147,"strong"),e._uU(148,"Warning"),e.qZA(),e._uU(149," Only "),e.TgZ(150,"code"),e._uU(151,"GET"),e.qZA(),e._uU(152," endpoints are cached. Also, HTTP server routes that inject the native response object ("),e.TgZ(153,"code"),e._uU(154,"@Res()"),e.qZA(),e._uU(155,") cannot use the Cache Interceptor. See\n"),e.TgZ(156,"a",16),e._uU(157,"response mapping"),e.qZA(),e._uU(158," for more details.\n"),e.qZA(),e.TgZ(159,"p"),e._uU(160,"To reduce the amount of required boilerplate, you can bind "),e.TgZ(161,"code"),e._uU(162,"CacheInterceptor"),e.qZA(),e._uU(163," to all endpoints globally:"),e.qZA(),e.TgZ(164,"pre")(165,"code",10),e._uU(166,"\nimport { CacheModule, Module, CacheInterceptor } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\n\n@Module({\n  imports: [CacheModule.register()],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(167,"h4",17)(168,"span"),e._uU(169,"Customize caching"),e.qZA()(),e.TgZ(170,"p"),e._uU(171,"All cached data has its own expiration time ("),e.TgZ(172,"a",18),e._uU(173,"TTL"),e.qZA(),e._uU(174,"). To customize default values, pass the options object to the "),e.TgZ(175,"code"),e._uU(176,"register()"),e.qZA(),e._uU(177," method."),e.qZA(),e.TgZ(178,"pre")(179,"code",10),e._uU(180,"\nCacheModule.register({\n  ttl: 5, // seconds\n  max: 10, // maximum number of items in cache\n});\n"),e.qZA()(),e.TgZ(181,"h4",19)(182,"span"),e._uU(183,"Use module globally"),e.qZA()(),e.TgZ(184,"p"),e._uU(185,"When you want to use "),e.TgZ(186,"code"),e._uU(187,"CacheModule"),e.qZA(),e._uU(188," in other modules, you'll need to import it (as is standard with any Nest module). Alternatively, declare it as a "),e.TgZ(189,"a",20),e._uU(190,"global module"),e.qZA(),e._uU(191," by setting the options object's "),e.TgZ(192,"code"),e._uU(193,"isGlobal"),e.qZA(),e._uU(194," property to "),e.TgZ(195,"code"),e._uU(196,"true"),e.qZA(),e._uU(197,", as shown below. In that case, you will not need to import "),e.TgZ(198,"code"),e._uU(199,"CacheModule"),e.qZA(),e._uU(200," in other modules once it's been loaded in the root module (e.g., "),e.TgZ(201,"code"),e._uU(202,"AppModule"),e.qZA(),e._uU(203,")."),e.qZA(),e.TgZ(204,"pre")(205,"code",10),e._uU(206,"\nCacheModule.register({\n  isGlobal: true,\n});\n"),e.qZA()(),e.TgZ(207,"h4",21)(208,"span"),e._uU(209,"Global cache overrides"),e.qZA()(),e.TgZ(210,"p"),e._uU(211,"While global cache is enabled, cache entries are stored under a "),e.TgZ(212,"code"),e._uU(213,"CacheKey"),e.qZA(),e._uU(214," that is auto-generated based on the route path. You may override certain cache settings ("),e.TgZ(215,"code"),e._uU(216,"@CacheKey()"),e.qZA(),e._uU(217," and "),e.TgZ(218,"code"),e._uU(219,"@CacheTTL()"),e.qZA(),e._uU(220,") on a per-method basis, allowing customized caching strategies for individual controller methods. This may be most relevant while using "),e.TgZ(221,"a",22),e._uU(222,"different cache stores."),e.qZA()(),e.TgZ(223,"pre")(224,"code",10),e._uU(225,"\n@Controller()\nexport class AppController {\n  @CacheKey('custom_key')\n  @CacheTTL(20)\n  findAll(): string[] {\n    return [];\n  }\n}\n"),e.qZA()(),e.TgZ(226,"blockquote",12)(227,"strong"),e._uU(228,"Hint"),e.qZA(),e._uU(229," The "),e.TgZ(230,"code"),e._uU(231,"@CacheKey()"),e.qZA(),e._uU(232," and "),e.TgZ(233,"code"),e._uU(234,"@CacheTTL()"),e.qZA(),e._uU(235," decorators are imported from the "),e.TgZ(236,"code"),e._uU(237,"@nestjs/common"),e.qZA(),e._uU(238," package.\n"),e.qZA(),e.TgZ(239,"p"),e._uU(240,"The "),e.TgZ(241,"code"),e._uU(242,"@CacheKey()"),e.qZA(),e._uU(243," decorator may be used with or without a corresponding "),e.TgZ(244,"code"),e._uU(245,"@CacheTTL()"),e.qZA(),e._uU(246," decorator and vice versa. One may choose to override only the "),e.TgZ(247,"code"),e._uU(248,"@CacheKey()"),e.qZA(),e._uU(249," or only the "),e.TgZ(250,"code"),e._uU(251,"@CacheTTL()"),e.qZA(),e._uU(252,". Settings that are not overridden with a decorator will use the default values as registered globally (see "),e.TgZ(253,"a",23),e._uU(254,"Customize caching"),e.qZA(),e._uU(255,")."),e.qZA(),e.TgZ(256,"h4",24)(257,"span"),e._uU(258,"WebSockets and Microservices"),e.qZA()(),e.TgZ(259,"p"),e._uU(260,"You can also apply the "),e.TgZ(261,"code"),e._uU(262,"CacheInterceptor"),e.qZA(),e._uU(263," to WebSocket subscribers as well as Microservice's patterns (regardless of the transport method that is being used)."),e.qZA(),e.TgZ(264,"span",25),e._UZ(265,"app-tabs",null,26),e.qZA(),e.TgZ(267,"pre")(268,"code",10),e._uU(269,"\n@CacheKey('events')\n@UseInterceptors(CacheInterceptor)\n@SubscribeMessage('events')\nhandleEvent(client: Client, data: string[]): Observable<string[]> {\n  return [];\n}\n"),e.qZA()(),e.TgZ(270,"pre")(271,"code",10),e._uU(272,"\n@CacheKey('events')\n@UseInterceptors(CacheInterceptor)\n@SubscribeMessage('events')\nhandleEvent(client, data) {\n  return [];\n}\n"),e.qZA()(),e.TgZ(273,"p"),e._uU(274,"However, the additional "),e.TgZ(275,"code"),e._uU(276,"@CacheKey()"),e.qZA(),e._uU(277," decorator is required in order to specify a key used to subsequently store and retrieve cached data. Also, please note that you "),e.TgZ(278,"strong"),e._uU(279,"shouldn't cache everything"),e.qZA(),e._uU(280,". Actions which perform some business operations rather than simply querying the data should never be cached."),e.qZA(),e.TgZ(281,"p"),e._uU(282,"Additionally, you may specify a cache expiration time (TTL) by using the "),e.TgZ(283,"code"),e._uU(284,"@CacheTTL()"),e.qZA(),e._uU(285," decorator, which will override the global default TTL value."),e.qZA(),e.TgZ(286,"span",25),e._UZ(287,"app-tabs",null,27),e.qZA(),e.TgZ(289,"pre")(290,"code",10),e._uU(291,"\n@CacheTTL(10)\n@UseInterceptors(CacheInterceptor)\n@SubscribeMessage('events')\nhandleEvent(client: Client, data: string[]): Observable<string[]> {\n  return [];\n}\n"),e.qZA()(),e.TgZ(292,"pre")(293,"code",10),e._uU(294,"\n@CacheTTL(10)\n@UseInterceptors(CacheInterceptor)\n@SubscribeMessage('events')\nhandleEvent(client, data) {\n  return [];\n}\n"),e.qZA()(),e.TgZ(295,"blockquote",12)(296,"strong"),e._uU(297,"Hint"),e.qZA(),e._uU(298," The "),e.TgZ(299,"code"),e._uU(300,"@CacheTTL()"),e.qZA(),e._uU(301," decorator may be used with or without a corresponding "),e.TgZ(302,"code"),e._uU(303,"@CacheKey()"),e.qZA(),e._uU(304," decorator.\n"),e.qZA(),e.TgZ(305,"h4",28)(306,"span"),e._uU(307,"Adjust tracking"),e.qZA()(),e.TgZ(308,"p"),e._uU(309,"By default, Nest uses the request URL (in an HTTP app) or cache key (in websockets and microservices apps, set through the "),e.TgZ(310,"code"),e._uU(311,"@CacheKey()"),e.qZA(),e._uU(312," decorator) to associate cache records with your endpoints. Nevertheless, sometimes you might want to set up tracking based on different factors, for example, using HTTP headers (e.g. "),e.TgZ(313,"code"),e._uU(314,"Authorization"),e.qZA(),e._uU(315," to properly identify "),e.TgZ(316,"code"),e._uU(317,"profile"),e.qZA(),e._uU(318," endpoints)."),e.qZA(),e.TgZ(319,"p"),e._uU(320,"In order to accomplish that, create a subclass of "),e.TgZ(321,"code"),e._uU(322,"CacheInterceptor"),e.qZA(),e._uU(323," and override the "),e.TgZ(324,"code"),e._uU(325,"trackBy()"),e.qZA(),e._uU(326," method."),e.qZA(),e.TgZ(327,"pre")(328,"code",10),e._uU(329,"\n@Injectable()\nclass HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    return 'key';\n  }\n}\n"),e.qZA()(),e.TgZ(330,"h4",29)(331,"span"),e._uU(332,"Different stores"),e.qZA()(),e.TgZ(333,"p"),e._uU(334,"This service takes advantage of "),e.TgZ(335,"a",7),e._uU(336,"cache-manager"),e.qZA(),e._uU(337," under the hood. The "),e.TgZ(338,"code"),e._uU(339,"cache-manager"),e.qZA(),e._uU(340," package supports a wide-range of useful stores, for example, "),e.TgZ(341,"a",30),e._uU(342,"Redis store"),e.qZA(),e._uU(343,". A full list of supported stores is available "),e.TgZ(344,"a",31),e._uU(345,"here"),e.qZA(),e._uU(346,". To set up the Redis store, simply pass the package together with corresponding options to the "),e.TgZ(347,"code"),e._uU(348,"register()"),e.qZA(),e._uU(349," method."),e.qZA(),e.TgZ(350,"pre")(351,"code",10),e._uU(352,"\nimport type { ClientOpts } from 'redis';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\n\n@Module({\n  imports: [\n    CacheModule.register<ClientOpts>({\n      store: redisStore,\n\n      // Store-specific configuration:\n      host: 'localhost',\n      port: 6379,\n    }),\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(353,"blockquote",14)(354,"strong"),e._uU(355,"Warning"),e.qZA(),e.TgZ(356,"code"),e._uU(357,"cache-manager-redis-store"),e.qZA(),e._uU(358," does not support redis v4. In order for the "),e.TgZ(359,"code"),e._uU(360,"ClientOpts"),e.qZA(),e._uU(361," interface to exist and work correctly you need to install the\nlatest "),e.TgZ(362,"code"),e._uU(363,"redis"),e.qZA(),e._uU(364," 3.x.x major release. See this "),e.TgZ(365,"a",32),e._uU(366,"issue"),e.qZA(),e._uU(367," to track the progress of this upgrade.\n"),e.qZA(),e.TgZ(368,"h4",33)(369,"span"),e._uU(370,"Async configuration"),e.qZA()(),e.TgZ(371,"p"),e._uU(372,"You may want to asynchronously pass in module options instead of passing them statically at compile time. In this case, use the "),e.TgZ(373,"code"),e._uU(374,"registerAsync()"),e.qZA(),e._uU(375," method, which provides several ways to deal with async configuration."),e.qZA(),e.TgZ(376,"p"),e._uU(377,"One approach is to use a factory function:"),e.qZA(),e.TgZ(378,"pre")(379,"code",10),e._uU(380,"\nCacheModule.registerAsync({\n  useFactory: () => ({\n    ttl: 5,\n  }),\n});\n"),e.qZA()(),e.TgZ(381,"p"),e._uU(382,"Our factory behaves like all other asynchronous module factories (it can be "),e.TgZ(383,"code"),e._uU(384,"async"),e.qZA(),e._uU(385," and is able to inject dependencies through "),e.TgZ(386,"code"),e._uU(387,"inject"),e.qZA(),e._uU(388,")."),e.qZA(),e.TgZ(389,"pre")(390,"code",10),e._uU(391,"\nCacheModule.registerAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    ttl: configService.get('CACHE_TTL'),\n  }),\n  inject: [ConfigService],\n});\n"),e.qZA()(),e.TgZ(392,"p"),e._uU(393,"Alternatively, you can use the "),e.TgZ(394,"code"),e._uU(395,"useClass"),e.qZA(),e._uU(396," method:"),e.qZA(),e.TgZ(397,"pre")(398,"code",10),e._uU(399,"\nCacheModule.registerAsync({\n  useClass: CacheConfigService,\n});\n"),e.qZA()(),e.TgZ(400,"p"),e._uU(401,"The above construction will instantiate "),e.TgZ(402,"code"),e._uU(403,"CacheConfigService"),e.qZA(),e._uU(404," inside "),e.TgZ(405,"code"),e._uU(406,"CacheModule"),e.qZA(),e._uU(407," and will use it to get the options object. The "),e.TgZ(408,"code"),e._uU(409,"CacheConfigService"),e.qZA(),e._uU(410," has to implement the "),e.TgZ(411,"code"),e._uU(412,"CacheOptionsFactory"),e.qZA(),e._uU(413," interface in order to provide the configuration options:"),e.qZA(),e.TgZ(414,"pre")(415,"code",10),e._uU(416,"\n@Injectable()\nclass CacheConfigService implements CacheOptionsFactory {\n  createCacheOptions(): CacheModuleOptions {\n    return {\n      ttl: 5,\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(417,"p"),e._uU(418,"If you wish to use an existing configuration provider imported from a different module, use the "),e.TgZ(419,"code"),e._uU(420,"useExisting"),e.qZA(),e._uU(421," syntax:"),e.qZA(),e.TgZ(422,"pre")(423,"code",10),e._uU(424,"\nCacheModule.registerAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n"),e.qZA()(),e.TgZ(425,"p"),e._uU(426,"This works the same as "),e.TgZ(427,"code"),e._uU(428,"useClass"),e.qZA(),e._uU(429," with one critical difference - "),e.TgZ(430,"code"),e._uU(431,"CacheModule"),e.qZA(),e._uU(432," will lookup imported modules to reuse any already-created "),e.TgZ(433,"code"),e._uU(434,"ConfigService"),e.qZA(),e._uU(435,", instead of instantiating its own."),e.qZA(),e.TgZ(436,"blockquote",12)(437,"strong"),e._uU(438,"Hint"),e.qZA(),e.TgZ(439,"code"),e._uU(440,"CacheModule#register"),e.qZA(),e._uU(441," and "),e.TgZ(442,"code"),e._uU(443,"CacheModule#registerAsync"),e.qZA(),e._uU(444," and "),e.TgZ(445,"code"),e._uU(446,"CacheOptionsFactory"),e.qZA(),e._uU(447," has an optional generic (type argument) to narrow down store-specific configuration options, making it type safe.\n"),e.qZA(),e.TgZ(448,"h4",34)(449,"span"),e._uU(450,"Example"),e.qZA()(),e.TgZ(451,"p"),e._uU(452,"A working example is available "),e.TgZ(453,"a",35),e._uU(454,"here"),e.qZA(),e._uU(455,"."),e.qZA()()),2&n){const a=e.MAs(266),u=e.MAs(288);e.xp6(267),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive),e.xp6(19),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive)}},dependencies:[p.n,i.U,h.yS],encapsulation:2,changeDetection:0}),t})(),C=(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-compression"]],features:[e.qOj],decls:66,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/compression.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","compression"],["appAnchor","","id","use-with-express-default"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/compression"],[1,"language-bash"],[1,"language-typescript"],["appAnchor","","id","use-with-fastify"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify-compress"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Compression"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Compression can greatly decrease the size of the response body, thereby increasing the speed of a web app."),e.qZA(),e.TgZ(9,"p"),e._uU(10,"For "),e.TgZ(11,"strong"),e._uU(12,"high-traffic"),e.qZA(),e._uU(13," websites in production, it is strongly recommended to offload compression from the application server - typically in a reverse proxy (e.g., Nginx). In that case, you should not use compression middleware."),e.qZA(),e.TgZ(14,"h4",6)(15,"span"),e._uU(16,"Use with Express (default)"),e.qZA()(),e.TgZ(17,"p"),e._uU(18,"Use the "),e.TgZ(19,"a",7),e._uU(20,"compression"),e.qZA(),e._uU(21," middleware package to enable gzip compression."),e.qZA(),e.TgZ(22,"p"),e._uU(23,"First install the required package:"),e.qZA(),e.TgZ(24,"pre")(25,"code",8),e._uU(26,"\n$ npm i --save compression\n"),e.qZA()(),e.TgZ(27,"p"),e._uU(28,"Once the installation is complete, apply the compression middleware as global middleware."),e.qZA(),e.TgZ(29,"pre")(30,"code",9),e._uU(31,"\nimport * as compression from 'compression';\n// somewhere in your initialization file\napp.use(compression());\n"),e.qZA()(),e.TgZ(32,"h4",10)(33,"span"),e._uU(34,"Use with Fastify"),e.qZA()(),e.TgZ(35,"p"),e._uU(36,"If using the "),e.TgZ(37,"code"),e._uU(38,"FastifyAdapter"),e.qZA(),e._uU(39,", you'll want to use "),e.TgZ(40,"a",11),e._uU(41,"fastify-compress"),e.qZA(),e._uU(42,":"),e.qZA(),e.TgZ(43,"pre")(44,"code",8),e._uU(45,"\n$ npm i --save fastify-compress\n"),e.qZA()(),e.TgZ(46,"p"),e._uU(47,"Once the installation is complete, apply the fastify-compress middleware as global middleware."),e.qZA(),e.TgZ(48,"pre")(49,"code",9),e._uU(50,"\nimport compression from 'fastify-compress';\n// somewhere in your initialization file\nawait app.register(compression);\n"),e.qZA()(),e.TgZ(51,"p"),e._uU(52,"By default, fastify-compress will use Brotli compression (on Node >= 11.7.0) when browsers indicate support for the encoding. While Brotli is quite efficient in terms of compression ratio, it's also quite slow. Due to this, you may want to tell fastify-compress to only use deflate and gzip to compress responses; you'll end up with larger responses but they'll be delivered much more quickly."),e.qZA(),e.TgZ(53,"p"),e._uU(54,"To specify encodings, provide a second argument to "),e.TgZ(55,"code"),e._uU(56,"app.register"),e.qZA(),e._uU(57,":"),e.qZA(),e.TgZ(58,"pre")(59,"code",9),e._uU(60,"\nawait app.register(compression, { encodings: ['gzip', 'deflate'] });\n"),e.qZA()(),e.TgZ(61,"p"),e._uU(62,"The above tells "),e.TgZ(63,"code"),e._uU(64,"fastify-compress"),e.qZA(),e._uU(65," to only use gzip and deflate encodings, preferring gzip if the client supports both."),e.qZA()())},dependencies:[i.U],encapsulation:2,changeDetection:0}),t})();var b=d(8568),j=d(7710),U=d(7297);let S=(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-configuration"]],features:[e.qOj],decls:912,vars:56,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/configuration.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","configuration"],["rel","nofollow","target","_blank","href","https://12factor.net/config"],["appAnchor","","id","installation"],[1,"language-bash"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/motdotla/dotenv"],[1,"warning"],["appAnchor","","id","getting-started"],[1,"filename"],["app63df0644ad9fae49fea3fdea2baa8787be67c51e",""],[1,"language-typescript"],[1,"language-json"],["appAnchor","","id","custom-env-file-path"],["appAnchor","","id","disable-env-variables-loading"],["appAnchor","","id","use-module-globally"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/modules#global-modules"],["appAnchor","","id","custom-configuration-files"],["href","techniques/configuration#getting-started"],["appf1e76fae04a597ba19f3fcb5bdcd61445a27048b",""],[1,"language-yaml"],["app70c4467018b5af2e457f887f2fa801e0d5bb6a67",""],["href","/cli/monorepo#assets"],["appAnchor","","id","using-the-configservice"],["app7a87ea58e488d6a2ae4704ef3afee25e5a82c7e7",""],["href","techniques/configuration#custom-configuration-files"],["appAnchor","","id","configuration-namespaces"],["app56118c7b48cd191e03165180df8670358ac0f3bc",""],["appAnchor","","id","cache-environment-variables"],["appAnchor","","id","partial-registration"],["appAnchor","","id","schema-validation"],["rel","nofollow","target","_blank","href","https://github.com/sideway/joi"],["rel","nofollow","target","_blank","href","https://github.com/sideway/joi/issues/2262"],["appa6f1acca2287885610a20e99ce7e117069d36599",""],["rel","nofollow","target","_blank","href","https://joi.dev/api/?v=17.3.0#example"],["rel","nofollow","target","_blank","href","https://joi.dev/api/?v=17.3.0#anyvalidatevalue-options"],["app09da060050e9a533bdb85ac592e8bc08be27ba82",""],["appAnchor","","id","custom-validate-function"],["app2ab9e0cc53c19fe7b117dff483746cd6019b7fc5",""],["app8fa2ebf1a665caaf0b640fd215c68dcd9148709d",""],["appAnchor","","id","custom-getter-functions"],["appd352f2e36bbb8f3e102aa2ca4f318e69357a4b5b",""],["appbd338436b986039d46d50abab86fc0587eba86fd",""],["appAnchor","","id","expandable-variables"],["rel","nofollow","target","_blank","href","https://github.com/motdotla/dotenv-expand"],["app86118da344967a2f4058bd1aeb64fd59a94d6790",""],["appAnchor","","id","using-in-the-maints"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Configuration"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Applications often run in different "),e.TgZ(9,"strong"),e._uU(10,"environments"),e.qZA(),e._uU(11,". Depending on the environment, different configuration settings should be used. For example, usually the local environment relies on specific database credentials, valid only for the local DB instance. The production environment would use a separate set of DB credentials. Since configuration variables change, best practice is to "),e.TgZ(12,"a",6),e._uU(13,"store configuration variables"),e.qZA(),e._uU(14," in the environment."),e.qZA(),e.TgZ(15,"p"),e._uU(16,"Externally defined environment variables are visible inside Node.js through the "),e.TgZ(17,"code"),e._uU(18,"process.env"),e.qZA(),e._uU(19," global. We could try to solve the problem of multiple environments by setting the environment variables separately in each environment. This can quickly get unwieldy, especially in the development and testing environments where these values need to be easily mocked and/or changed."),e.qZA(),e.TgZ(20,"p"),e._uU(21,"In Node.js applications, it's common to use "),e.TgZ(22,"code"),e._uU(23,".env"),e.qZA(),e._uU(24," files, holding key-value pairs where each key represents a particular value, to represent each environment. Running an app in different environments is then just a matter of swapping in the correct "),e.TgZ(25,"code"),e._uU(26,".env"),e.qZA(),e._uU(27," file."),e.qZA(),e.TgZ(28,"p"),e._uU(29,"A good approach for using this technique in Nest is to create a "),e.TgZ(30,"code"),e._uU(31,"ConfigModule"),e.qZA(),e._uU(32," that exposes a "),e.TgZ(33,"code"),e._uU(34,"ConfigService"),e.qZA(),e._uU(35," which loads the appropriate "),e.TgZ(36,"code"),e._uU(37,".env"),e.qZA(),e._uU(38," file. While you may choose to write such a module yourself, for convenience Nest provides the "),e.TgZ(39,"code"),e._uU(40,"@nestjs/config"),e.qZA(),e._uU(41," package out-of-the box. We'll cover this package in the current chapter."),e.qZA(),e.TgZ(42,"h4",7)(43,"span"),e._uU(44,"Installation"),e.qZA()(),e.TgZ(45,"p"),e._uU(46,"To begin using it, we first install the required dependency."),e.qZA(),e.TgZ(47,"pre")(48,"code",8),e._uU(49,"\n$ npm i --save @nestjs/config\n"),e.qZA()(),e.TgZ(50,"blockquote",9)(51,"strong"),e._uU(52,"Hint"),e.qZA(),e._uU(53," The "),e.TgZ(54,"code"),e._uU(55,"@nestjs/config"),e.qZA(),e._uU(56," package internally uses "),e.TgZ(57,"a",10),e._uU(58,"dotenv"),e.qZA(),e._uU(59,".\n"),e.qZA(),e.TgZ(60,"blockquote",11)(61,"strong"),e._uU(62,"Note"),e.qZA(),e.TgZ(63,"code"),e._uU(64,"@nestjs/config"),e.qZA(),e._uU(65," requires TypeScript 4.1 or later.\n"),e.qZA(),e.TgZ(66,"h4",12)(67,"span"),e._uU(68,"Getting started"),e.qZA()(),e.TgZ(69,"p"),e._uU(70,"Once the installation process is complete, we can import the "),e.TgZ(71,"code"),e._uU(72,"ConfigModule"),e.qZA(),e._uU(73,". Typically, we'll import it into the root "),e.TgZ(74,"code"),e._uU(75,"AppModule"),e.qZA(),e._uU(76," and control its behavior using the "),e.TgZ(77,"code"),e._uU(78,".forRoot()"),e.qZA(),e._uU(79," static method. During this step, environment variable key/value pairs are parsed and resolved. Later, we'll see several options for accessing the "),e.TgZ(80,"code"),e._uU(81,"ConfigService"),e.qZA(),e._uU(82," class of the "),e.TgZ(83,"code"),e._uU(84,"ConfigModule"),e.qZA(),e._uU(85," in our other feature modules."),e.qZA(),e.TgZ(86,"span",13),e._uU(87),e.ALo(88,"extension"),e._UZ(89,"app-tabs",null,14),e.qZA(),e.TgZ(91,"pre")(92,"code",15),e._uU(93,"\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(94,"p"),e._uU(95,"The above code will load and parse a "),e.TgZ(96,"code"),e._uU(97,".env"),e.qZA(),e._uU(98," file from the default location (the project root directory), merge key/value pairs from the "),e.TgZ(99,"code"),e._uU(100,".env"),e.qZA(),e._uU(101," file with environment variables assigned to "),e.TgZ(102,"code"),e._uU(103,"process.env"),e.qZA(),e._uU(104,", and store the result in a private structure that you can access through the "),e.TgZ(105,"code"),e._uU(106,"ConfigService"),e.qZA(),e._uU(107,". The "),e.TgZ(108,"code"),e._uU(109,"forRoot()"),e.qZA(),e._uU(110," method registers the "),e.TgZ(111,"code"),e._uU(112,"ConfigService"),e.qZA(),e._uU(113," provider, which provides a "),e.TgZ(114,"code"),e._uU(115,"get()"),e.qZA(),e._uU(116," method for reading these parsed/merged configuration variables. Since "),e.TgZ(117,"code"),e._uU(118,"@nestjs/config"),e.qZA(),e._uU(119," relies on "),e.TgZ(120,"a",10),e._uU(121,"dotenv"),e.qZA(),e._uU(122,", it uses that package's rules for resolving conflicts in environment variable names. When a key exists both in the runtime environment as an environment variable (e.g., via OS shell exports like "),e.TgZ(123,"code"),e._uU(124,"export DATABASE_USER=test"),e.qZA(),e._uU(125,") and in a "),e.TgZ(126,"code"),e._uU(127,".env"),e.qZA(),e._uU(128," file, the runtime environment variable takes precedence."),e.qZA(),e.TgZ(129,"p"),e._uU(130,"A sample "),e.TgZ(131,"code"),e._uU(132,".env"),e.qZA(),e._uU(133," file looks something like this:"),e.qZA(),e.TgZ(134,"pre")(135,"code",16),e._uU(136,"\nDATABASE_USER=test\nDATABASE_PASSWORD=test\n"),e.qZA()(),e.TgZ(137,"h4",17)(138,"span"),e._uU(139,"Custom env file path"),e.qZA()(),e.TgZ(140,"p"),e._uU(141,"By default, the package looks for a "),e.TgZ(142,"code"),e._uU(143,".env"),e.qZA(),e._uU(144," file in the root directory of the application. To specify another path for the "),e.TgZ(145,"code"),e._uU(146,".env"),e.qZA(),e._uU(147," file, set the "),e.TgZ(148,"code"),e._uU(149,"envFilePath"),e.qZA(),e._uU(150," property of an (optional) options object you pass to "),e.TgZ(151,"code"),e._uU(152,"forRoot()"),e.qZA(),e._uU(153,", as follows:"),e.qZA(),e.TgZ(154,"pre")(155,"code",15),e._uU(156,"\nConfigModule.forRoot({\n  envFilePath: '.development.env',\n});\n"),e.qZA()(),e.TgZ(157,"p"),e._uU(158,"You can also specify multiple paths for "),e.TgZ(159,"code"),e._uU(160,".env"),e.qZA(),e._uU(161," files like this:"),e.qZA(),e.TgZ(162,"pre")(163,"code",15),e._uU(164,"\nConfigModule.forRoot({\n  envFilePath: ['.env.development.local', '.env.development'],\n});\n"),e.qZA()(),e.TgZ(165,"p"),e._uU(166,"If a variable is found in multiple files, the first one takes precedence."),e.qZA(),e.TgZ(167,"h4",18)(168,"span"),e._uU(169,"Disable env variables loading"),e.qZA()(),e.TgZ(170,"p"),e._uU(171,"If you don't want to load the "),e.TgZ(172,"code"),e._uU(173,".env"),e.qZA(),e._uU(174," file, but instead would like to simply access environment variables from the runtime environment (as with OS shell exports like "),e.TgZ(175,"code"),e._uU(176,"export DATABASE_USER=test"),e.qZA(),e._uU(177,"), set the options object's "),e.TgZ(178,"code"),e._uU(179,"ignoreEnvFile"),e.qZA(),e._uU(180," property to "),e.TgZ(181,"code"),e._uU(182,"true"),e.qZA(),e._uU(183,", as follows:"),e.qZA(),e.TgZ(184,"pre")(185,"code",15),e._uU(186,"\nConfigModule.forRoot({\n  ignoreEnvFile: true,\n});\n"),e.qZA()(),e.TgZ(187,"h4",19)(188,"span"),e._uU(189,"Use module globally"),e.qZA()(),e.TgZ(190,"p"),e._uU(191,"When you want to use "),e.TgZ(192,"code"),e._uU(193,"ConfigModule"),e.qZA(),e._uU(194," in other modules, you'll need to import it (as is standard with any Nest module). Alternatively, declare it as a "),e.TgZ(195,"a",20),e._uU(196,"global module"),e.qZA(),e._uU(197," by setting the options object's "),e.TgZ(198,"code"),e._uU(199,"isGlobal"),e.qZA(),e._uU(200," property to "),e.TgZ(201,"code"),e._uU(202,"true"),e.qZA(),e._uU(203,", as shown below. In that case, you will not need to import "),e.TgZ(204,"code"),e._uU(205,"ConfigModule"),e.qZA(),e._uU(206," in other modules once it's been loaded in the root module (e.g., "),e.TgZ(207,"code"),e._uU(208,"AppModule"),e.qZA(),e._uU(209,")."),e.qZA(),e.TgZ(210,"pre")(211,"code",15),e._uU(212,"\nConfigModule.forRoot({\n  isGlobal: true,\n});\n"),e.qZA()(),e.TgZ(213,"h4",21)(214,"span"),e._uU(215,"Custom configuration files"),e.qZA()(),e.TgZ(216,"p"),e._uU(217,"For more complex projects, you may utilize custom configuration files to return nested configuration objects. This allows you to group related configuration settings by function (e.g., database-related settings), and to store related settings in individual files to help manage them independently."),e.qZA(),e.TgZ(218,"p"),e._uU(219,"A custom configuration file exports a factory function that returns a configuration object. The configuration object can be any arbitrarily nested plain JavaScript object. The "),e.TgZ(220,"code"),e._uU(221,"process.env"),e.qZA(),e._uU(222," object will contain the fully resolved environment variable key/value pairs (with "),e.TgZ(223,"code"),e._uU(224,".env"),e.qZA(),e._uU(225," file and externally defined variables resolved and merged as described "),e.TgZ(226,"a",22),e._uU(227,"above"),e.qZA(),e._uU(228,"). Since you control the returned configuration object, you can add any required logic to cast values to an appropriate type, set default values, etc. For example:"),e.qZA(),e.TgZ(229,"span",13),e._uU(230),e.ALo(231,"extension"),e._UZ(232,"app-tabs",null,23),e.qZA(),e.TgZ(234,"pre")(235,"code",15),e._uU(236,"\nexport default () => ({\n  port: parseInt(process.env.PORT, 10) || 3000,\n  database: {\n    host: process.env.DATABASE_HOST,\n    port: parseInt(process.env.DATABASE_PORT, 10) || 5432\n  }\n});\n"),e.qZA()(),e.TgZ(237,"p"),e._uU(238,"We load this file using the "),e.TgZ(239,"code"),e._uU(240,"load"),e.qZA(),e._uU(241," property of the options object we pass to the "),e.TgZ(242,"code"),e._uU(243,"ConfigModule.forRoot()"),e.qZA(),e._uU(244," method:"),e.qZA(),e.TgZ(245,"pre")(246,"code",15),e._uU(247,"\nimport configuration from './config/configuration';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(248,"blockquote",9)(249,"strong"),e._uU(250,"Notice"),e.qZA(),e._uU(251," The value assigned to the "),e.TgZ(252,"code"),e._uU(253,"load"),e.qZA(),e._uU(254," property is an array, allowing you to load multiple configuration files (e.g. "),e.TgZ(255,"code"),e._uU(256,"load: [databaseConfig, authConfig]"),e.qZA(),e._uU(257,")\n"),e.qZA(),e.TgZ(258,"p"),e._uU(259,"With custom configuration files, we can also manage custom files such as YAML files. Here is an example of a configuration using YAML format:"),e.qZA(),e.TgZ(260,"pre")(261,"code",24),e._uU(262,"\nhttp:\n  host: 'localhost'\n  port: 8080\n\ndb:\n  postgres:\n    url: 'localhost'\n    port: 5432\n    database: 'yaml-db'\n\n  sqlite:\n    database: 'sqlite.db'\n"),e.qZA()(),e.TgZ(263,"p"),e._uU(264,"To read and parse YAML files, we can leverage the "),e.TgZ(265,"code"),e._uU(266,"js-yaml"),e.qZA(),e._uU(267," package."),e.qZA(),e.TgZ(268,"pre")(269,"code",8),e._uU(270,"\n$ npm i js-yaml\n$ npm i -D @types/js-yaml\n"),e.qZA()(),e.TgZ(271,"p"),e._uU(272,"Once the package is installed, we use "),e.TgZ(273,"code"),e._uU(274,"yaml#load"),e.qZA(),e._uU(275," function to load YAML file we just created above."),e.qZA(),e.TgZ(276,"span",13),e._uU(277),e.ALo(278,"extension"),e._UZ(279,"app-tabs",null,25),e.qZA(),e.TgZ(281,"pre")(282,"code",15),e._uU(283,"\nimport { readFileSync } from 'fs';\nimport * as yaml from 'js-yaml';\nimport { join } from 'path';\n\nconst YAML_CONFIG_FILENAME = 'config.yaml';\n\nexport default () => {\n  return yaml.load(\n    readFileSync(join(__dirname, YAML_CONFIG_FILENAME), 'utf8'),\n  ) as Record<string, any>;\n};\n"),e.qZA()(),e.TgZ(284,"blockquote",11)(285,"strong"),e._uU(286,"Note"),e.qZA(),e._uU(287,' Nest CLI does not automatically move your "assets" (non-TS files) to the '),e.TgZ(288,"code"),e._uU(289,"dist"),e.qZA(),e._uU(290," folder during the build process. To make sure that your YAML files are copied, you have to specify this in the "),e.TgZ(291,"code"),e._uU(292,"compilerOptions#assets"),e.qZA(),e._uU(293," object in the "),e.TgZ(294,"code"),e._uU(295,"nest-cli.json"),e.qZA(),e._uU(296," file. As an example, if the "),e.TgZ(297,"code"),e._uU(298,"config"),e.qZA(),e._uU(299," folder is at the same level as the "),e.TgZ(300,"code"),e._uU(301,"src"),e.qZA(),e._uU(302," folder, add "),e.TgZ(303,"code"),e._uU(304,"compilerOptions#assets"),e.qZA(),e._uU(305," with the value "),e.TgZ(306,"code"),e._uU(307),e.qZA(),e._uU(308,". Read more "),e.TgZ(309,"a",26),e._uU(310,"here"),e.qZA(),e._uU(311,".\n"),e.qZA(),e.TgZ(312,"p"),e._UZ(313,"app-banner-enterprise"),e.qZA(),e.TgZ(314,"h4",27)(315,"span"),e._uU(316,"Using the "),e.TgZ(317,"code"),e._uU(318,"ConfigService"),e.qZA()()(),e.TgZ(319,"p"),e._uU(320,"To access configuration values from our "),e.TgZ(321,"code"),e._uU(322,"ConfigService"),e.qZA(),e._uU(323,", we first need to inject "),e.TgZ(324,"code"),e._uU(325,"ConfigService"),e.qZA(),e._uU(326,". As with any provider, we need to import its containing module - the "),e.TgZ(327,"code"),e._uU(328,"ConfigModule"),e.qZA(),e._uU(329," - into the module that will use it (unless you set the "),e.TgZ(330,"code"),e._uU(331,"isGlobal"),e.qZA(),e._uU(332," property in the options object passed to the "),e.TgZ(333,"code"),e._uU(334,"ConfigModule.forRoot()"),e.qZA(),e._uU(335," method to "),e.TgZ(336,"code"),e._uU(337,"true"),e.qZA(),e._uU(338,"). Import it into a feature module as shown below."),e.qZA(),e.TgZ(339,"span",13),e._uU(340),e.ALo(341,"extension"),e._UZ(342,"app-tabs",null,28),e.qZA(),e.TgZ(344,"pre")(345,"code",15),e._uU(346,"\n@Module({\n  imports: [ConfigModule],\n  // ...\n})\n"),e.qZA()(),e.TgZ(347,"p"),e._uU(348,"Then we can inject it using standard constructor injection:"),e.qZA(),e.TgZ(349,"pre")(350,"code",15),e._uU(351,"\nconstructor(private configService: ConfigService) {}\n"),e.qZA()(),e.TgZ(352,"blockquote",9)(353,"strong"),e._uU(354,"Hint"),e.qZA(),e._uU(355," The "),e.TgZ(356,"code"),e._uU(357,"ConfigService"),e.qZA(),e._uU(358," is imported from the "),e.TgZ(359,"code"),e._uU(360,"@nestjs/config"),e.qZA(),e._uU(361," package.\n"),e.qZA(),e.TgZ(362,"p"),e._uU(363,"And use it in our class:"),e.qZA(),e.TgZ(364,"pre")(365,"code",15),e._uU(366,"\n// get an environment variable\nconst dbUser = this.configService.get<string>('DATABASE_USER');\n\n// get a custom configuration value\nconst dbHost = this.configService.get<string>('database.host');\n"),e.qZA()(),e.TgZ(367,"p"),e._uU(368,"As shown above, use the "),e.TgZ(369,"code"),e._uU(370,"configService.get()"),e.qZA(),e._uU(371," method to get a simple environment variable by passing the variable name. You can do TypeScript type hinting by passing the type, as shown above (e.g., "),e.TgZ(372,"code"),e._uU(373,"get<string>(...)"),e.qZA(),e._uU(374,"). The "),e.TgZ(375,"code"),e._uU(376,"get()"),e.qZA(),e._uU(377," method can also traverse a nested custom configuration object (created via a "),e.TgZ(378,"a",29),e._uU(379,"Custom configuration file"),e.qZA(),e._uU(380,"), as shown in the second example above."),e.qZA(),e.TgZ(381,"p"),e._uU(382,"You can also get the whole nested custom configuration object using an interface as the type hint:"),e.qZA(),e.TgZ(383,"pre")(384,"code",15),e._uU(385,"\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n}\n\nconst dbConfig = this.configService.get<DatabaseConfig>('database');\n\n// you can now use `dbConfig.port` and `dbConfig.host`\nconst port = dbConfig.port;\n"),e.qZA()(),e.TgZ(386,"p"),e._uU(387,"The "),e.TgZ(388,"code"),e._uU(389,"get()"),e.qZA(),e._uU(390," method also takes an optional second argument defining a default value, which will be returned when the key doesn't exist, as shown below:"),e.qZA(),e.TgZ(391,"pre")(392,"code",15),e._uU(393,"\n// use \"localhost\" when \"database.host\" is not defined\nconst dbHost = this.configService.get<string>('database.host', 'localhost');\n"),e.qZA()(),e.TgZ(394,"p")(395,"code"),e._uU(396,"ConfigService"),e.qZA(),e._uU(397," has two optional generics (type arguments). The first one is to help prevent accessing a config property that does not exist. Use it as shown below:"),e.qZA(),e.TgZ(398,"pre")(399,"code",15),e._uU(400,"\ninterface EnvironmentVariables {\n  PORT: number;\n  TIMEOUT: string;\n}\n\n// somewhere in the code\nconstructor(private configService: ConfigService<EnvironmentVariables>) {\n  const port = this.configService.get('PORT', { infer: true });\n\n  // TypeScript Error: this is invalid as the URL property is not defined in EnvironmentVariables\n  const url = this.configService.get('URL', { infer: true });\n}\n"),e.qZA()(),e.TgZ(401,"p"),e._uU(402,"With the "),e.TgZ(403,"code"),e._uU(404,"infer"),e.qZA(),e._uU(405," property set to "),e.TgZ(406,"code"),e._uU(407,"true"),e.qZA(),e._uU(408,", the "),e.TgZ(409,"code"),e._uU(410,"ConfigService#get"),e.qZA(),e._uU(411," method will automatically infer the property type based on the interface, so for example, "),e.TgZ(412,"code"),e._uU(413,'typeof port === "number"'),e.qZA(),e._uU(414," (if you're not using "),e.TgZ(415,"code"),e._uU(416,"strictNullChecks"),e.qZA(),e._uU(417," flag from TypeScript) since "),e.TgZ(418,"code"),e._uU(419,"PORT"),e.qZA(),e._uU(420," has a "),e.TgZ(421,"code"),e._uU(422,"number"),e.qZA(),e._uU(423," type in the "),e.TgZ(424,"code"),e._uU(425,"EnvironmentVariables"),e.qZA(),e._uU(426," interface."),e.qZA(),e.TgZ(427,"p"),e._uU(428,"Also, with the "),e.TgZ(429,"code"),e._uU(430,"infer"),e.qZA(),e._uU(431," feature, you can infer the type of a nested custom configuration object's property, even when using dot notation, as follows:"),e.qZA(),e.TgZ(432,"pre")(433,"code",15),e._uU(434,"\nconstructor(private configService: ConfigService<{ database: { host: string } }>) {\n  const dbHost = this.configService.get('database.host', { infer: true })!;\n  // typeof dbHost === \"string\"                                          |\n  //                                                                     +--\x3e non-null assertion operator\n}\n"),e.qZA()(),e.TgZ(435,"p"),e._uU(436,"The second generic relies on the first one, acting as a type assertion to get rid of all "),e.TgZ(437,"code"),e._uU(438,"undefined"),e.qZA(),e._uU(439," types that "),e.TgZ(440,"code"),e._uU(441,"ConfigService"),e.qZA(),e._uU(442,"'s methods can return when "),e.TgZ(443,"code"),e._uU(444,"strictNullChecks"),e.qZA(),e._uU(445," is on. For instance:"),e.qZA(),e.TgZ(446,"pre")(447,"code",15),e._uU(448,"\n// ...\nconstructor(private configService: ConfigService<{ PORT: number }, true>) {\n  //                                                               ^^^^\n  const port = this.configService.get('PORT', { infer: true });\n  //    ^^^ The type of port will be 'number' thus you don't need TS type assertions anymore\n}\n"),e.qZA()(),e.TgZ(449,"h4",30)(450,"span"),e._uU(451,"Configuration namespaces"),e.qZA()(),e.TgZ(452,"p"),e._uU(453,"The "),e.TgZ(454,"code"),e._uU(455,"ConfigModule"),e.qZA(),e._uU(456," allows you to define and load multiple custom configuration files, as shown in "),e.TgZ(457,"a",29),e._uU(458,"Custom configuration files"),e.qZA(),e._uU(459,' above. You can manage complex configuration object hierarchies with nested configuration objects as shown in that section. Alternatively, you can return a "namespaced" configuration object with the '),e.TgZ(460,"code"),e._uU(461,"registerAs()"),e.qZA(),e._uU(462," function as follows:"),e.qZA(),e.TgZ(463,"span",13),e._uU(464),e.ALo(465,"extension"),e._UZ(466,"app-tabs",null,31),e.qZA(),e.TgZ(468,"pre")(469,"code",15),e._uU(470,"\nexport default registerAs('database', () => ({\n  host: process.env.DATABASE_HOST,\n  port: process.env.DATABASE_PORT || 5432\n}));\n"),e.qZA()(),e.TgZ(471,"p"),e._uU(472,"As with custom configuration files, inside your "),e.TgZ(473,"code"),e._uU(474,"registerAs()"),e.qZA(),e._uU(475," factory function, the "),e.TgZ(476,"code"),e._uU(477,"process.env"),e.qZA(),e._uU(478," object will contain the fully resolved environment variable key/value pairs (with "),e.TgZ(479,"code"),e._uU(480,".env"),e.qZA(),e._uU(481," file and externally defined variables resolved and merged as described "),e.TgZ(482,"a",22),e._uU(483,"above"),e.qZA(),e._uU(484,")."),e.qZA(),e.TgZ(485,"blockquote",9)(486,"strong"),e._uU(487,"Hint"),e.qZA(),e._uU(488," The "),e.TgZ(489,"code"),e._uU(490,"registerAs"),e.qZA(),e._uU(491," function is exported from the "),e.TgZ(492,"code"),e._uU(493,"@nestjs/config"),e.qZA(),e._uU(494," package.\n"),e.qZA(),e.TgZ(495,"p"),e._uU(496,"Load a namespaced configuration with the "),e.TgZ(497,"code"),e._uU(498,"load"),e.qZA(),e._uU(499," property of the "),e.TgZ(500,"code"),e._uU(501,"forRoot()"),e.qZA(),e._uU(502," method's options object, in the same way you load a custom configuration file:"),e.qZA(),e.TgZ(503,"pre")(504,"code",15),e._uU(505,"\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [databaseConfig],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(506,"p"),e._uU(507,"Now, to get the "),e.TgZ(508,"code"),e._uU(509,"host"),e.qZA(),e._uU(510," value from the "),e.TgZ(511,"code"),e._uU(512,"database"),e.qZA(),e._uU(513," namespace, use dot notation. Use "),e.TgZ(514,"code"),e._uU(515,"'database'"),e.qZA(),e._uU(516," as the prefix to the property name, corresponding to the name of the namespace (passed as the first argument to the "),e.TgZ(517,"code"),e._uU(518,"registerAs()"),e.qZA(),e._uU(519," function):"),e.qZA(),e.TgZ(520,"pre")(521,"code",15),e._uU(522,"\nconst dbHost = this.configService.get<string>('database.host');\n"),e.qZA()(),e.TgZ(523,"p"),e._uU(524,"A reasonable alternative is to inject the "),e.TgZ(525,"code"),e._uU(526,"database"),e.qZA(),e._uU(527," namespace directly. This allows us to benefit from strong typing:"),e.qZA(),e.TgZ(528,"pre")(529,"code",15),e._uU(530,"\nconstructor(\n  @Inject(databaseConfig.KEY)\n  private dbConfig: ConfigType<typeof databaseConfig>,\n) {}\n"),e.qZA()(),e.TgZ(531,"blockquote",9)(532,"strong"),e._uU(533,"Hint"),e.qZA(),e._uU(534," The "),e.TgZ(535,"code"),e._uU(536,"ConfigType"),e.qZA(),e._uU(537," is exported from the "),e.TgZ(538,"code"),e._uU(539,"@nestjs/config"),e.qZA(),e._uU(540," package.\n"),e.qZA(),e.TgZ(541,"h4",32)(542,"span"),e._uU(543,"Cache environment variables"),e.qZA()(),e.TgZ(544,"p"),e._uU(545,"As accessing "),e.TgZ(546,"code"),e._uU(547,"process.env"),e.qZA(),e._uU(548," can be slow, you can set the "),e.TgZ(549,"code"),e._uU(550,"cache"),e.qZA(),e._uU(551," property of the options object passed to "),e.TgZ(552,"code"),e._uU(553,"ConfigModule.forRoot()"),e.qZA(),e._uU(554," to increase the performance of "),e.TgZ(555,"code"),e._uU(556,"ConfigService#get"),e.qZA(),e._uU(557," method when it comes to variables stored in "),e.TgZ(558,"code"),e._uU(559,"process.env"),e.qZA(),e._uU(560,"."),e.qZA(),e.TgZ(561,"pre")(562,"code",15),e._uU(563,"\nConfigModule.forRoot({\n  cache: true,\n});\n"),e.qZA()(),e.TgZ(564,"h4",33)(565,"span"),e._uU(566,"Partial registration"),e.qZA()(),e.TgZ(567,"p"),e._uU(568,"Thus far, we've processed configuration files in our root module (e.g., "),e.TgZ(569,"code"),e._uU(570,"AppModule"),e.qZA(),e._uU(571,"), with the "),e.TgZ(572,"code"),e._uU(573,"forRoot()"),e.qZA(),e._uU(574," method. Perhaps you have a more complex project structure, with feature-specific configuration files located in multiple different directories. Rather than load all these files in the root module, the "),e.TgZ(575,"code"),e._uU(576,"@nestjs/config"),e.qZA(),e._uU(577," package provides a feature called "),e.TgZ(578,"strong"),e._uU(579,"partial registration"),e.qZA(),e._uU(580,", which references only the configuration files associated with each feature module. Use the "),e.TgZ(581,"code"),e._uU(582,"forFeature()"),e.qZA(),e._uU(583," static method within a feature module to perform this partial registration, as follows:"),e.qZA(),e.TgZ(584,"pre")(585,"code",15),e._uU(586,"\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [ConfigModule.forFeature(databaseConfig)],\n})\nexport class DatabaseModule {}\n"),e.qZA()(),e.TgZ(587,"blockquote",9)(588,"strong"),e._uU(589,"Warning"),e.qZA(),e._uU(590," In some circumstances, you may need to access properties loaded via partial registration using the "),e.TgZ(591,"code"),e._uU(592,"onModuleInit()"),e.qZA(),e._uU(593," hook, rather than in a constructor. This is because the "),e.TgZ(594,"code"),e._uU(595,"forFeature()"),e.qZA(),e._uU(596," method is run during module initialization, and the order of module initialization is indeterminate. If you access values loaded this way by another module, in a constructor, the module that the configuration depends upon may not yet have initialized. The "),e.TgZ(597,"code"),e._uU(598,"onModuleInit()"),e.qZA(),e._uU(599," method runs only after all modules it depends upon have been initialized, so this technique is safe.\n"),e.qZA(),e.TgZ(600,"h4",34)(601,"span"),e._uU(602,"Schema validation"),e.qZA()(),e.TgZ(603,"p"),e._uU(604,"It is standard practice to throw an exception during application startup if required environment variables haven't been provided or if they don't meet certain validation rules. The "),e.TgZ(605,"code"),e._uU(606,"@nestjs/config"),e.qZA(),e._uU(607," package enables two different ways to do this:"),e.qZA(),e.TgZ(608,"ul")(609,"li")(610,"a",35),e._uU(611,"Joi"),e.qZA(),e._uU(612," built-in validator. With Joi, you define an object schema and validate JavaScript objects against it."),e.qZA(),e.TgZ(613,"li"),e._uU(614,"A custom "),e.TgZ(615,"code"),e._uU(616,"validate()"),e.qZA(),e._uU(617," function which takes environment variables as an input."),e.qZA()(),e.TgZ(618,"p"),e._uU(619,"To use Joi, we must install Joi package:"),e.qZA(),e.TgZ(620,"pre")(621,"code",8),e._uU(622,"\n$ npm install --save joi\n"),e.qZA()(),e.TgZ(623,"blockquote",11)(624,"strong"),e._uU(625,"Notice"),e.qZA(),e._uU(626," The latest version of "),e.TgZ(627,"code"),e._uU(628,"joi"),e.qZA(),e._uU(629," requires you to be running Node v12 or later. For older versions of node, please install "),e.TgZ(630,"code"),e._uU(631,"v16.1.8"),e.qZA(),e._uU(632,". This is mainly after the release of "),e.TgZ(633,"code"),e._uU(634,"v17.0.2"),e.qZA(),e._uU(635," which causes errors during build time. For more information, please refer to "),e.TgZ(636,"a",36),e._uU(637,"their 17.0.0 release notes"),e.qZA(),e._uU(638,".\n"),e.qZA(),e.TgZ(639,"p"),e._uU(640,"Now we can define a Joi validation schema and pass it via the "),e.TgZ(641,"code"),e._uU(642,"validationSchema"),e.qZA(),e._uU(643," property of the "),e.TgZ(644,"code"),e._uU(645,"forRoot()"),e.qZA(),e._uU(646," method's options object, as shown below:"),e.qZA(),e.TgZ(647,"span",13),e._uU(648),e.ALo(649,"extension"),e._UZ(650,"app-tabs",null,37),e.qZA(),e.TgZ(652,"pre")(653,"code",15),e._uU(654,"\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().default(3000),\n      }),\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(655,"p"),e._uU(656,"By default, all schema keys are considered optional. Here, we set default values for "),e.TgZ(657,"code"),e._uU(658,"NODE_ENV"),e.qZA(),e._uU(659," and "),e.TgZ(660,"code"),e._uU(661,"PORT"),e.qZA(),e._uU(662," which will be used if we don't provide these variables in the environment ("),e.TgZ(663,"code"),e._uU(664,".env"),e.qZA(),e._uU(665," file or process environment). Alternatively, we can use the "),e.TgZ(666,"code"),e._uU(667,"required()"),e.qZA(),e._uU(668," validation method to require that a value must be defined in the environment ("),e.TgZ(669,"code"),e._uU(670,".env"),e.qZA(),e._uU(671," file or process environment). In this case, the validation step will throw an exception if we don't provide the variable in the environment. See "),e.TgZ(672,"a",38),e._uU(673,"Joi validation methods"),e.qZA(),e._uU(674," for more on how to construct validation schemas."),e.qZA(),e.TgZ(675,"p"),e._uU(676,"By default, unknown environment variables (environment variables whose keys are not present in the schema) are allowed and do not trigger a validation exception. By default, all validation errors are reported. You can alter these behaviors by passing an options object via the "),e.TgZ(677,"code"),e._uU(678,"validationOptions"),e.qZA(),e._uU(679," key of the "),e.TgZ(680,"code"),e._uU(681,"forRoot()"),e.qZA(),e._uU(682," options object. This options object can contain any of the standard validation options properties provided by "),e.TgZ(683,"a",39),e._uU(684,"Joi validation options"),e.qZA(),e._uU(685,". For example, to reverse the two settings above, pass options like this:"),e.qZA(),e.TgZ(686,"span",13),e._uU(687),e.ALo(688,"extension"),e._UZ(689,"app-tabs",null,40),e.qZA(),e.TgZ(691,"pre")(692,"code",15),e._uU(693,"\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().default(3000),\n      }),\n      validationOptions: {\n        allowUnknown: false,\n        abortEarly: true,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(694,"p"),e._uU(695,"The "),e.TgZ(696,"code"),e._uU(697,"@nestjs/config"),e.qZA(),e._uU(698," package uses default settings of:"),e.qZA(),e.TgZ(699,"ul")(700,"li")(701,"code"),e._uU(702,"allowUnknown"),e.qZA(),e._uU(703,": controls whether or not to allow unknown keys in the environment variables. Default is "),e.TgZ(704,"code"),e._uU(705,"true"),e.qZA()(),e.TgZ(706,"li")(707,"code"),e._uU(708,"abortEarly"),e.qZA(),e._uU(709,": if true, stops validation on the first error; if false, returns all errors. Defaults to "),e.TgZ(710,"code"),e._uU(711,"false"),e.qZA(),e._uU(712,"."),e.qZA()(),e.TgZ(713,"p"),e._uU(714,"Note that once you decide to pass a "),e.TgZ(715,"code"),e._uU(716,"validationOptions"),e.qZA(),e._uU(717," object, any settings you do not explicitly pass will default to "),e.TgZ(718,"code"),e._uU(719,"Joi"),e.qZA(),e._uU(720," standard defaults (not the "),e.TgZ(721,"code"),e._uU(722,"@nestjs/config"),e.qZA(),e._uU(723," defaults). For example, if you leave "),e.TgZ(724,"code"),e._uU(725,"allowUnknowns"),e.qZA(),e._uU(726," unspecified in your custom "),e.TgZ(727,"code"),e._uU(728,"validationOptions"),e.qZA(),e._uU(729," object, it will have the "),e.TgZ(730,"code"),e._uU(731,"Joi"),e.qZA(),e._uU(732," default value of "),e.TgZ(733,"code"),e._uU(734,"false"),e.qZA(),e._uU(735,". Hence, it is probably safest to specify "),e.TgZ(736,"strong"),e._uU(737,"both"),e.qZA(),e._uU(738," of these settings in your custom object."),e.qZA(),e.TgZ(739,"h4",41)(740,"span"),e._uU(741,"Custom validate function"),e.qZA()(),e.TgZ(742,"p"),e._uU(743,"Alternatively, you can specify a "),e.TgZ(744,"strong"),e._uU(745,"synchronous"),e.qZA(),e.TgZ(746,"code"),e._uU(747,"validate"),e.qZA(),e._uU(748," function that takes an object containing the environment variables (from env file and process) and returns an object containing validated environment variables so that you can convert/mutate them if needed. If the function throws an error, it will prevent the application from bootstrapping."),e.qZA(),e.TgZ(749,"p"),e._uU(750,"In this example, we'll proceed with the "),e.TgZ(751,"code"),e._uU(752,"class-transformer"),e.qZA(),e._uU(753," and "),e.TgZ(754,"code"),e._uU(755,"class-validator"),e.qZA(),e._uU(756," packages. First, we have to define:"),e.qZA(),e.TgZ(757,"ul")(758,"li"),e._uU(759,"a class with validation constraints,"),e.qZA(),e.TgZ(760,"li"),e._uU(761,"a validate function that makes use of the "),e.TgZ(762,"code"),e._uU(763,"plainToClass"),e.qZA(),e._uU(764," and "),e.TgZ(765,"code"),e._uU(766,"validateSync"),e.qZA(),e._uU(767," functions."),e.qZA()(),e.TgZ(768,"span",13),e._uU(769),e.ALo(770,"extension"),e._UZ(771,"app-tabs",null,42),e.qZA(),e.TgZ(773,"pre")(774,"code",15),e._uU(775,'\nimport { plainToClass } from \'class-transformer\';\nimport { IsEnum, IsNumber, validateSync } from \'class-validator\';\n\nenum Environment {\n  Development = "development",\n  Production = "production",\n  Test = "test",\n  Provision = "provision",\n}\n\nclass EnvironmentVariables {\n  @IsEnum(Environment)\n  NODE_ENV: Environment;\n\n  @IsNumber()\n  PORT: number;\n}\n\nexport function validate(config: Record<string, unknown>) {\n  const validatedConfig = plainToClass(\n    EnvironmentVariables,\n    config,\n    { enableImplicitConversion: true },\n  );\n  const errors = validateSync(validatedConfig, { skipMissingProperties: false });\n\n  if (errors.length > 0) {\n    throw new Error(errors.toString());\n  }\n  return validatedConfig;\n}\n'),e.qZA()(),e.TgZ(776,"p"),e._uU(777,"With this in place, use the "),e.TgZ(778,"code"),e._uU(779,"validate"),e.qZA(),e._uU(780," function as a configuration option of the "),e.TgZ(781,"code"),e._uU(782,"ConfigModule"),e.qZA(),e._uU(783,", as follows:"),e.qZA(),e.TgZ(784,"span",13),e._uU(785),e.ALo(786,"extension"),e._UZ(787,"app-tabs",null,43),e.qZA(),e.TgZ(789,"pre")(790,"code",15),e._uU(791,"\nimport { validate } from './env.validation';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validate,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(792,"p"),e._UZ(793,"app-banner-shop"),e.qZA(),e.TgZ(794,"h4",44)(795,"span"),e._uU(796,"Custom getter functions"),e.qZA()(),e.TgZ(797,"p")(798,"code"),e._uU(799,"ConfigService"),e.qZA(),e._uU(800," defines a generic "),e.TgZ(801,"code"),e._uU(802,"get()"),e.qZA(),e._uU(803," method to retrieve a configuration value by key. We may also add "),e.TgZ(804,"code"),e._uU(805,"getter"),e.qZA(),e._uU(806," functions to enable a little more natural coding style:"),e.qZA(),e.TgZ(807,"span",13),e._UZ(808,"app-tabs",null,45),e.qZA(),e.TgZ(810,"pre")(811,"code",15),e._uU(812,"\n@Injectable()\nexport class ApiConfigService {\n  constructor(private configService: ConfigService) {}\n\n  get isAuthEnabled(): boolean {\n    return this.configService.get('AUTH_ENABLED') === 'true';\n  }\n}\n"),e.qZA()(),e.TgZ(813,"pre")(814,"code",15),e._uU(815,"\n@Dependencies(ConfigService)\n@Injectable()\nexport class ApiConfigService {\n  constructor(configService) {\n    this.configService = configService;\n  }\n\n  get isAuthEnabled() {\n    return this.configService.get('AUTH_ENABLED') === 'true';\n  }\n}\n"),e.qZA()(),e.TgZ(816,"p"),e._uU(817,"Now we can use the getter function as follows:"),e.qZA(),e.TgZ(818,"span",13),e._uU(819),e.ALo(820,"extension"),e._UZ(821,"app-tabs",null,46),e.qZA(),e.TgZ(823,"pre")(824,"code",15),e._uU(825,"\n@Injectable()\nexport class AppService {\n  constructor(apiConfigService: ApiConfigService) {\n    if (apiConfigService.isAuthEnabled) {\n      // Authentication is enabled\n    }\n  }\n}\n"),e.qZA()(),e.TgZ(826,"pre")(827,"code",15),e._uU(828,"\n@Dependencies(ApiConfigService)\n@Injectable()\nexport class AppService {\n  constructor(apiConfigService) {\n    if (apiConfigService.isAuthEnabled) {\n      // Authentication is enabled\n    }\n  }\n}\n"),e.qZA()(),e.TgZ(829,"h4",47)(830,"span"),e._uU(831,"Expandable variables"),e.qZA()(),e.TgZ(832,"p"),e._uU(833,"The "),e.TgZ(834,"code"),e._uU(835,"@nestjs/config"),e.qZA(),e._uU(836," package supports environment variable expansion. With this technique, you can create nested environment variables, where one variable is referred to within the definition of another. For example:"),e.qZA(),e.TgZ(837,"pre")(838,"code",16),e._uU(839,"\nAPP_URL=mywebsite.com\nSUPPORT_EMAIL=support@${APP_URL}\n"),e.qZA()(),e.TgZ(840,"p"),e._uU(841,"With this construction, the variable "),e.TgZ(842,"code"),e._uU(843,"SUPPORT_EMAIL"),e.qZA(),e._uU(844," resolves to "),e.TgZ(845,"code"),e._uU(846,"'support@mywebsite.com'"),e.qZA(),e._uU(847,". Note the use of the "),e.TgZ(848,"code"),e._uU(849),e.qZA(),e._uU(850," syntax to trigger resolving the value of the variable "),e.TgZ(851,"code"),e._uU(852,"APP_URL"),e.qZA(),e._uU(853," inside the definition of "),e.TgZ(854,"code"),e._uU(855,"SUPPORT_EMAIL"),e.qZA(),e._uU(856,"."),e.qZA(),e.TgZ(857,"blockquote",9)(858,"strong"),e._uU(859,"Hint"),e.qZA(),e._uU(860," For this feature, "),e.TgZ(861,"code"),e._uU(862,"@nestjs/config"),e.qZA(),e._uU(863," package internally uses "),e.TgZ(864,"a",48),e._uU(865,"dotenv-expand"),e.qZA(),e._uU(866,".\n"),e.qZA(),e.TgZ(867,"p"),e._uU(868,"Enable environment variable expansion using the "),e.TgZ(869,"code"),e._uU(870,"expandVariables"),e.qZA(),e._uU(871," property in the options object passed to the "),e.TgZ(872,"code"),e._uU(873,"forRoot()"),e.qZA(),e._uU(874," method of the "),e.TgZ(875,"code"),e._uU(876,"ConfigModule"),e.qZA(),e._uU(877,", as shown below:"),e.qZA(),e.TgZ(878,"span",13),e._uU(879),e.ALo(880,"extension"),e._UZ(881,"app-tabs",null,49),e.qZA(),e.TgZ(883,"pre")(884,"code",15),e._uU(885,"\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      // ...\n      expandVariables: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(886,"h4",50)(887,"span"),e._uU(888,"Using in the "),e.TgZ(889,"code"),e._uU(890,"main.ts"),e.qZA()()(),e.TgZ(891,"p"),e._uU(892,"While our config is a stored in a service, it can still be used in the "),e.TgZ(893,"code"),e._uU(894,"main.ts"),e.qZA(),e._uU(895," file. This way, you can use it to store variables such as the application port or the CORS host."),e.qZA(),e.TgZ(896,"p"),e._uU(897,"To access it, you must use the "),e.TgZ(898,"code"),e._uU(899,"app.get()"),e.qZA(),e._uU(900," method, followed by the service reference:"),e.qZA(),e.TgZ(901,"pre")(902,"code",15),e._uU(903,"\nconst configService = app.get(ConfigService);\n"),e.qZA()(),e.TgZ(904,"p"),e._uU(905,"You can then use it as usual, by calling the "),e.TgZ(906,"code"),e._uU(907,"get"),e.qZA(),e._uU(908," method with the configuration key:"),e.qZA(),e.TgZ(909,"pre")(910,"code",15),e._uU(911,"\nconst port = configService.get('PORT');\n"),e.qZA()()()),2&n){const a=e.MAs(90),u=e.MAs(233),l=e.MAs(280),c=e.MAs(343),g=e.MAs(467),Z=e.MAs(651),_=e.MAs(690),m=e.MAs(772),A=e.MAs(788),T=e.MAs(809),q=e.MAs(822),f=e.MAs(882);e.xp6(87),e.hij(" ",e.xi3(88,23,"app.module",a.isJsActive),"\n"),e.xp6(143),e.hij(" ",e.xi3(231,26,"config/configuration",u.isJsActive),"\n"),e.xp6(47),e.hij(" ",e.xi3(278,29,"config/configuration",l.isJsActive),"\n"),e.xp6(30),e.AsE('"assets": [',"{",'"include": "../config/*.yaml", "outDir": "./dist/config"',"}","]"),e.xp6(33),e.hij(" ",e.xi3(341,32,"feature.module",c.isJsActive),"\n"),e.xp6(124),e.hij(" ",e.xi3(465,35,"config/database.config",g.isJsActive),"\n"),e.xp6(184),e.hij(" ",e.xi3(649,38,"app.module",Z.isJsActive),"\n"),e.xp6(39),e.hij(" ",e.xi3(688,41,"app.module",_.isJsActive),"\n"),e.xp6(82),e.hij(" ",e.xi3(770,44,"env.validation",m.isJsActive),"\n"),e.xp6(16),e.hij(" ",e.xi3(786,47,"app.module",A.isJsActive),"\n"),e.xp6(25),e.ekj("hide",T.isJsActive),e.xp6(3),e.ekj("hide",!T.isJsActive),e.xp6(6),e.hij(" ",e.xi3(820,50,"app.service",q.isJsActive),"\n"),e.xp6(4),e.ekj("hide",q.isJsActive),e.xp6(3),e.ekj("hide",!q.isJsActive),e.xp6(23),e.AsE("$","{","...","}",""),e.xp6(30),e.hij(" ",e.xi3(880,53,"app.module",f.isJsActive),"\n")}},dependencies:[p.n,i.U,b.V,j.f,U.F],encapsulation:2,changeDetection:0}),t})(),E=(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cookies-docs"]],features:[e.qOj],decls:240,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/cookies.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cookies"],["appAnchor","","id","use-with-express-default"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/cookie-parser"],[1,"language-shell"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://www.npmjs.org/package/cookie"],[1,"info"],[1,"warning"],["href","/controllers#appendix-library-specific-approach"],["appAnchor","","id","use-with-fastify"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify-cookie#sending"],["appAnchor","","id","creating-a-custom-decorator-cross-platform"],["routerLink","/custom-decorators"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Cookies"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"An "),e.TgZ(9,"strong"),e._uU(10,"HTTP cookie"),e.qZA(),e._uU(11," is a small piece of data stored by the user's browser. Cookies were designed to be a reliable mechanism for websites to remember stateful information. When the user visits the website again, the cookie is automatically sent with the request."),e.qZA(),e.TgZ(12,"h4",6)(13,"span"),e._uU(14,"Use with Express (default)"),e.qZA()(),e.TgZ(15,"p"),e._uU(16,"First install the "),e.TgZ(17,"a",7),e._uU(18,"required package"),e.qZA(),e._uU(19," (and its types for TypeScript users):"),e.qZA(),e.TgZ(20,"pre")(21,"code",8),e._uU(22,"\n$ npm i cookie-parser\n$ npm i -D @types/cookie-parser\n"),e.qZA()(),e.TgZ(23,"p"),e._uU(24,"Once the installation is complete, apply the "),e.TgZ(25,"code"),e._uU(26,"cookie-parser"),e.qZA(),e._uU(27," middleware as global middleware (for example, in your "),e.TgZ(28,"code"),e._uU(29,"main.ts"),e.qZA(),e._uU(30," file)."),e.qZA(),e.TgZ(31,"pre")(32,"code",9),e._uU(33,"\nimport * as cookieParser from 'cookie-parser';\n// somewhere in your initialization file\napp.use(cookieParser());\n"),e.qZA()(),e.TgZ(34,"p"),e._uU(35,"You can pass several options to the "),e.TgZ(36,"code"),e._uU(37,"cookieParser"),e.qZA(),e._uU(38," middleware:"),e.qZA(),e.TgZ(39,"ul")(40,"li")(41,"code"),e._uU(42,"secret"),e.qZA(),e._uU(43," a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order."),e.qZA(),e.TgZ(44,"li")(45,"code"),e._uU(46,"options"),e.qZA(),e._uU(47," an object that is passed to "),e.TgZ(48,"code"),e._uU(49,"cookie.parse"),e.qZA(),e._uU(50," as the second option. See "),e.TgZ(51,"a",10),e._uU(52,"cookie"),e.qZA(),e._uU(53," for more information."),e.qZA()(),e.TgZ(54,"p"),e._uU(55,"The middleware will parse the "),e.TgZ(56,"code"),e._uU(57,"Cookie"),e.qZA(),e._uU(58," header on the request and expose the cookie data as the property "),e.TgZ(59,"code"),e._uU(60,"req.cookies"),e.qZA(),e._uU(61," and, if a secret was provided, as the property "),e.TgZ(62,"code"),e._uU(63,"req.signedCookies"),e.qZA(),e._uU(64,". These properties are name value pairs of the cookie name to cookie value."),e.qZA(),e.TgZ(65,"p"),e._uU(66,"When secret is provided, this module will unsign and validate any signed cookie values and move those name value pairs from req.cookies into "),e.TgZ(67,"code"),e._uU(68,"req.signedCookies"),e.qZA(),e._uU(69,". A signed cookie is a cookie that has a value prefixed with "),e.TgZ(70,"code"),e._uU(71,"s:"),e.qZA(),e._uU(72,". Signed cookies that fail signature validation will have the value "),e.TgZ(73,"code"),e._uU(74,"false"),e.qZA(),e._uU(75," instead of the tampered value."),e.qZA(),e.TgZ(76,"p"),e._uU(77,"With this in place, you can now read cookies from within the route handlers, as follows:"),e.qZA(),e.TgZ(78,"pre")(79,"code",9),e._uU(80,"\n@Get()\nfindAll(@Req() request: Request) {\n  console.log(request.cookies); // or \"request.cookies['cookieKey']\"\n  // or console.log(request.signedCookies);\n}\n"),e.qZA()(),e.TgZ(81,"blockquote",11)(82,"strong"),e._uU(83,"Hint"),e.qZA(),e._uU(84," The "),e.TgZ(85,"code"),e._uU(86,"@Req()"),e.qZA(),e._uU(87," decorator is imported from the "),e.TgZ(88,"code"),e._uU(89,"@nestjs/common"),e.qZA(),e._uU(90,", while "),e.TgZ(91,"code"),e._uU(92,"Request"),e.qZA(),e._uU(93," from the "),e.TgZ(94,"code"),e._uU(95,"express"),e.qZA(),e._uU(96," package.\n"),e.qZA(),e.TgZ(97,"p"),e._uU(98,"To attach a cookie to an outgoing response, use the "),e.TgZ(99,"code"),e._uU(100,"Response#cookie()"),e.qZA(),e._uU(101," method:"),e.qZA(),e.TgZ(102,"pre")(103,"code",9),e._uU(104,"\n@Get()\nfindAll(@Res({ passthrough: true }) response: Response) {\n  response.cookie('key', 'value')\n}\n"),e.qZA()(),e.TgZ(105,"blockquote",12)(106,"strong"),e._uU(107,"Warning"),e.qZA(),e._uU(108," If you want to leave the response handling logic to the framework, remember to set the "),e.TgZ(109,"code"),e._uU(110,"passthrough"),e.qZA(),e._uU(111," option to "),e.TgZ(112,"code"),e._uU(113,"true"),e.qZA(),e._uU(114,", as shown above. Read more "),e.TgZ(115,"a",13),e._uU(116,"here"),e.qZA(),e._uU(117,".\n"),e.qZA(),e.TgZ(118,"blockquote",11)(119,"strong"),e._uU(120,"Hint"),e.qZA(),e._uU(121," The "),e.TgZ(122,"code"),e._uU(123,"@Res()"),e.qZA(),e._uU(124," decorator is imported from the "),e.TgZ(125,"code"),e._uU(126,"@nestjs/common"),e.qZA(),e._uU(127,", while "),e.TgZ(128,"code"),e._uU(129,"Response"),e.qZA(),e._uU(130," from the "),e.TgZ(131,"code"),e._uU(132,"express"),e.qZA(),e._uU(133," package.\n"),e.qZA(),e.TgZ(134,"h4",14)(135,"span"),e._uU(136,"Use with Fastify"),e.qZA()(),e.TgZ(137,"p"),e._uU(138,"First install the required package:"),e.qZA(),e.TgZ(139,"pre")(140,"code",8),e._uU(141,"\n$ npm i fastify-cookie\n"),e.qZA()(),e.TgZ(142,"p"),e._uU(143,"Once the installation is complete, register the "),e.TgZ(144,"code"),e._uU(145,"fastify-cookie"),e.qZA(),e._uU(146," plugin:"),e.qZA(),e.TgZ(147,"pre")(148,"code",9),e._uU(149,"\nimport fastifyCookie from 'fastify-cookie';\n\n// somewhere in your initialization file\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter(),\n);\nawait app.register(fastifyCookie, {\n  secret: 'my-secret', // for cookies signature\n});\n"),e.qZA()(),e.TgZ(150,"p"),e._uU(151,"With this in place, you can now read cookies from within the route handlers, as follows:"),e.qZA(),e.TgZ(152,"pre")(153,"code",9),e._uU(154,"\n@Get()\nfindAll(@Req() request: FastifyRequest) {\n  console.log(request.cookies); // or \"request.cookies['cookieKey']\"\n}\n"),e.qZA()(),e.TgZ(155,"blockquote",11)(156,"strong"),e._uU(157,"Hint"),e.qZA(),e._uU(158," The "),e.TgZ(159,"code"),e._uU(160,"@Req()"),e.qZA(),e._uU(161," decorator is imported from the "),e.TgZ(162,"code"),e._uU(163,"@nestjs/common"),e.qZA(),e._uU(164,", while "),e.TgZ(165,"code"),e._uU(166,"FastifyRequest"),e.qZA(),e._uU(167," from the "),e.TgZ(168,"code"),e._uU(169,"fastify"),e.qZA(),e._uU(170," package.\n"),e.qZA(),e.TgZ(171,"p"),e._uU(172,"To attach a cookie to an outgoing response, use the "),e.TgZ(173,"code"),e._uU(174,"FastifyReply#setCookie()"),e.qZA(),e._uU(175," method:"),e.qZA(),e.TgZ(176,"pre")(177,"code",9),e._uU(178,"\n@Get()\nfindAll(@Res({ passthrough: true }) response: FastifyReply) {\n  response.setCookie('key', 'value')\n}\n"),e.qZA()(),e.TgZ(179,"p"),e._uU(180,"To read more about "),e.TgZ(181,"code"),e._uU(182,"FastifyReply#setCookie()"),e.qZA(),e._uU(183," method, check out this "),e.TgZ(184,"a",15),e._uU(185,"page"),e.qZA(),e._uU(186,"."),e.qZA(),e.TgZ(187,"blockquote",12)(188,"strong"),e._uU(189,"Warning"),e.qZA(),e._uU(190," If you want to leave the response handling logic to the framework, remember to set the "),e.TgZ(191,"code"),e._uU(192,"passthrough"),e.qZA(),e._uU(193," option to "),e.TgZ(194,"code"),e._uU(195,"true"),e.qZA(),e._uU(196,", as shown above. Read more "),e.TgZ(197,"a",13),e._uU(198,"here"),e.qZA(),e._uU(199,".\n"),e.qZA(),e.TgZ(200,"blockquote",11)(201,"strong"),e._uU(202,"Hint"),e.qZA(),e._uU(203," The "),e.TgZ(204,"code"),e._uU(205,"@Res()"),e.qZA(),e._uU(206," decorator is imported from the "),e.TgZ(207,"code"),e._uU(208,"@nestjs/common"),e.qZA(),e._uU(209,", while "),e.TgZ(210,"code"),e._uU(211,"FastifyReply"),e.qZA(),e._uU(212," from the "),e.TgZ(213,"code"),e._uU(214,"fastify"),e.qZA(),e._uU(215," package.\n"),e.qZA(),e.TgZ(216,"h4",16)(217,"span"),e._uU(218,"Creating a custom decorator (cross-platform)"),e.qZA()(),e.TgZ(219,"p"),e._uU(220,"To provide a convenient, declarative way of accessing incoming cookies, we can create a "),e.TgZ(221,"a",17),e._uU(222,"custom decorator"),e.qZA(),e._uU(223,"."),e.qZA(),e.TgZ(224,"pre")(225,"code",9),e._uU(226,"\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Cookies = createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return data ? request.cookies?.[data] : request.cookies;\n  },\n);\n"),e.qZA()(),e.TgZ(227,"p"),e._uU(228,"The "),e.TgZ(229,"code"),e._uU(230,"@Cookies()"),e.qZA(),e._uU(231," decorator will extract all cookies, or a named cookie from the "),e.TgZ(232,"code"),e._uU(233,"req.cookies"),e.qZA(),e._uU(234," object and populate the decorated parameter with that value."),e.qZA(),e.TgZ(235,"p"),e._uU(236,"With this in place, we can now use the decorator in a route handler signature, as follows:"),e.qZA(),e.TgZ(237,"pre")(238,"code",9),e._uU(239,"\n@Get()\nfindAll(@Cookies('name') name: string) {}\n"),e.qZA()()())},dependencies:[i.U,h.yS],encapsulation:2,changeDetection:0}),t})(),I=(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-events"]],features:[e.qOj],decls:198,vars:4,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/events.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","events"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/@nestjs/event-emitter"],["rel","nofollow","target","_blank","href","https://github.com/EventEmitter2/EventEmitter2"],["appAnchor","","id","getting-started"],[1,"language-shell"],[1,"filename"],["app8808921d003c9924a455cb833733aa8253d3381a",""],[1,"language-typescript"],["appAnchor","","id","dispatching-events"],[1,"info"],["appAnchor","","id","listening-to-events"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/EventEmitter2/EventEmitter2#emitteronevent-listener-options-objectboolean"],["rel","nofollow","target","_blank","href","https://github.com/EventEmitter2/EventEmitter2#multi-level-wildcards"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/30-event-emitter"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Events"),e.qZA(),e.TgZ(7,"p")(8,"a",6),e._uU(9,"Event Emitter"),e.qZA(),e._uU(10," package ("),e.TgZ(11,"code"),e._uU(12,"@nestjs/event-emitter"),e.qZA(),e._uU(13,") provides a simple observer implementation, allowing you to subscribe and listen for various events that occur in your application. Events serve as a great way to decouple various aspects of your application, since a single event can have multiple listeners that do not depend on each other."),e.qZA(),e.TgZ(14,"p")(15,"code"),e._uU(16,"EventEmitterModule"),e.qZA(),e._uU(17," internally uses the "),e.TgZ(18,"a",7),e._uU(19,"eventemitter2"),e.qZA(),e._uU(20," package."),e.qZA(),e.TgZ(21,"h4",8)(22,"span"),e._uU(23,"Getting started"),e.qZA()(),e.TgZ(24,"p"),e._uU(25,"First install the required package:"),e.qZA(),e.TgZ(26,"pre")(27,"code",9),e._uU(28,"\n$ npm i --save @nestjs/event-emitter\n"),e.qZA()(),e.TgZ(29,"p"),e._uU(30,"Once the installation is complete, import the "),e.TgZ(31,"code"),e._uU(32,"EventEmitterModule"),e.qZA(),e._uU(33," into the root "),e.TgZ(34,"code"),e._uU(35,"AppModule"),e.qZA(),e._uU(36," and run the "),e.TgZ(37,"code"),e._uU(38,"forRoot()"),e.qZA(),e._uU(39," static method as shown below:"),e.qZA(),e.TgZ(40,"span",10),e._uU(41),e.ALo(42,"extension"),e._UZ(43,"app-tabs",null,11),e.qZA(),e.TgZ(45,"pre")(46,"code",12),e._uU(47,"\nimport { Module } from '@nestjs/common';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\n\n@Module({\n  imports: [\n    EventEmitterModule.forRoot()\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(48,"p"),e._uU(49,"The "),e.TgZ(50,"code"),e._uU(51,".forRoot()"),e.qZA(),e._uU(52," call initializes the event emitter and registers any declarative event listeners that exist within your app. Registration occurs when the "),e.TgZ(53,"code"),e._uU(54,"onApplicationBootstrap"),e.qZA(),e._uU(55," lifecycle hook occurs, ensuring that all modules have loaded and declared any scheduled jobs."),e.qZA(),e.TgZ(56,"p"),e._uU(57,"To configure the underlying "),e.TgZ(58,"code"),e._uU(59,"EventEmitter"),e.qZA(),e._uU(60," instance, pass the configuration object to the "),e.TgZ(61,"code"),e._uU(62,".forRoot()"),e.qZA(),e._uU(63," method, as follows:"),e.qZA(),e.TgZ(64,"pre")(65,"code",12),e._uU(66,"\nEventEmitterModule.forRoot({\n  // set this to `true` to use wildcards\n  wildcard: false,\n  // the delimiter used to segment namespaces\n  delimiter: '.',\n  // set this to `true` if you want to emit the newListener event\n  newListener: false,\n  // set this to `true` if you want to emit the removeListener event\n  removeListener: false,\n  // the maximum amount of listeners that can be assigned to an event\n  maxListeners: 10,\n  // show event name in memory leak message when more than maximum amount of listeners is assigned\n  verboseMemoryLeak: false,\n  // disable throwing uncaughtException if an error event is emitted and it has no listeners\n  ignoreErrors: false,\n});\n"),e.qZA()(),e.TgZ(67,"h4",13)(68,"span"),e._uU(69,"Dispatching Events"),e.qZA()(),e.TgZ(70,"p"),e._uU(71,"To dispatch (i.e., fire) an event, first inject "),e.TgZ(72,"code"),e._uU(73,"EventEmitter2"),e.qZA(),e._uU(74," using standard constructor injection:"),e.qZA(),e.TgZ(75,"pre")(76,"code",12),e._uU(77,"\nconstructor(private eventEmitter: EventEmitter2) {}\n"),e.qZA()(),e.TgZ(78,"blockquote",14)(79,"strong"),e._uU(80,"Hint"),e.qZA(),e._uU(81," Import the "),e.TgZ(82,"code"),e._uU(83,"EventEmitter2"),e.qZA(),e._uU(84," from the "),e.TgZ(85,"code"),e._uU(86,"@nestjs/event-emitter"),e.qZA(),e._uU(87," package.\n"),e.qZA(),e.TgZ(88,"p"),e._uU(89,"Then use it in a class as follows:"),e.qZA(),e.TgZ(90,"pre")(91,"code",12),e._uU(92,"\nthis.eventEmitter.emit(\n  'order.created',\n  new OrderCreatedEvent({\n    orderId: 1,\n    payload: {},\n  }),\n);\n"),e.qZA()(),e.TgZ(93,"h4",15)(94,"span"),e._uU(95,"Listening to Events"),e.qZA()(),e.TgZ(96,"p"),e._uU(97,"To declare an event listener, decorate a method with the "),e.TgZ(98,"code"),e._uU(99,"@OnEvent()"),e.qZA(),e._uU(100," decorator preceding the method definition containing the code to be executed, as follows:"),e.qZA(),e.TgZ(101,"pre")(102,"code",12),e._uU(103,"\n@OnEvent('order.created')\nhandleOrderCreatedEvent(payload: OrderCreatedEvent) {\n  // handle and process \"OrderCreatedEvent\" event\n}\n"),e.qZA()(),e.TgZ(104,"blockquote",16)(105,"strong"),e._uU(106,"Warning"),e.qZA(),e._uU(107," Event subscribers cannot be request-scoped.\n"),e.qZA(),e.TgZ(108,"p"),e._uU(109,"The first argument can be a "),e.TgZ(110,"code"),e._uU(111,"string"),e.qZA(),e._uU(112," or "),e.TgZ(113,"code"),e._uU(114,"symbol"),e.qZA(),e._uU(115," for a simple event emitter and a "),e.TgZ(116,"code"),e._uU(117,"string | symbol | Array<string | symbol>"),e.qZA(),e._uU(118," in a case of a wildcard emitter. The second argument (optional) is a listener options object ("),e.TgZ(119,"a",17),e._uU(120,"read more"),e.qZA(),e._uU(121,")."),e.qZA(),e.TgZ(122,"pre")(123,"code",12),e._uU(124,"\n@OnEvent('order.created', { async: true })\nhandleOrderCreatedEvent(payload: OrderCreatedEvent) {\n  // handle and process \"OrderCreatedEvent\" event\n}\n"),e.qZA()(),e.TgZ(125,"p"),e._uU(126,"To use namespaces/wildcards, pass the "),e.TgZ(127,"code"),e._uU(128,"wildcard"),e.qZA(),e._uU(129," option into the "),e.TgZ(130,"code"),e._uU(131,"EventEmitterModule#forRoot()"),e.qZA(),e._uU(132," method. When namespaces/wildcards are enabled, events can either be strings ("),e.TgZ(133,"code"),e._uU(134,"foo.bar"),e.qZA(),e._uU(135,") separated by a delimiter or arrays ("),e.TgZ(136,"code"),e._uU(137,"['foo', 'bar']"),e.qZA(),e._uU(138,"). The delimiter is also configurable as a configuration property ("),e.TgZ(139,"code"),e._uU(140,"delimiter"),e.qZA(),e._uU(141,"). With namespaces feature enabled, you can subscribe to events using a wildcard:"),e.qZA(),e.TgZ(142,"pre")(143,"code",12),e._uU(144,"\n@OnEvent('order.*')\nhandleOrderEvents(payload: OrderCreatedEvent | OrderRemovedEvent | OrderUpdatedEvent) {\n  // handle and process an event\n}\n"),e.qZA()(),e.TgZ(145,"p"),e._uU(146,"Note that such a wildcard only applies to one block. The argument "),e.TgZ(147,"code"),e._uU(148,"order.*"),e.qZA(),e._uU(149," will match, for example, the events "),e.TgZ(150,"code"),e._uU(151,"order.created"),e.qZA(),e._uU(152," and "),e.TgZ(153,"code"),e._uU(154,"order.shipped"),e.qZA(),e._uU(155," but not "),e.TgZ(156,"code"),e._uU(157,"order.delayed.out_of_stock"),e.qZA(),e._uU(158,". In order to listen to such events,\nuse the "),e.TgZ(159,"code"),e._uU(160,"multilevel wildcard"),e.qZA(),e._uU(161," pattern (i.e, "),e.TgZ(162,"code"),e._uU(163,"**"),e.qZA(),e._uU(164,"), described in the "),e.TgZ(165,"code"),e._uU(166,"EventEmitter2"),e.qZA(),e.TgZ(167,"a",18),e._uU(168,"documentation"),e.qZA(),e._uU(169,"."),e.qZA(),e.TgZ(170,"p"),e._uU(171,"With this pattern, you can, for example, create an event listener that catches all events."),e.qZA(),e.TgZ(172,"pre")(173,"code",12),e._uU(174,"\n@OnEvent('**')\nhandleEverything(payload: any) {\n  // handle and process an event\n}\n"),e.qZA()(),e.TgZ(175,"blockquote",14)(176,"strong"),e._uU(177,"Hint"),e.qZA(),e.TgZ(178,"code"),e._uU(179,"EventEmitter2"),e.qZA(),e._uU(180," class provides several useful methods for interacting with events, like "),e.TgZ(181,"code"),e._uU(182,"waitFor"),e.qZA(),e._uU(183," and "),e.TgZ(184,"code"),e._uU(185,"onAny"),e.qZA(),e._uU(186,". You can read more about them "),e.TgZ(187,"a",7),e._uU(188,"here"),e.qZA(),e._uU(189,".\n"),e.qZA(),e.TgZ(190,"h4",19)(191,"span"),e._uU(192,"Example"),e.qZA()(),e.TgZ(193,"p"),e._uU(194,"A working example is available "),e.TgZ(195,"a",20),e._uU(196,"here"),e.qZA(),e._uU(197,"."),e.qZA()()),2&n){const a=e.MAs(44);e.xp6(41),e.hij(" ",e.xi3(42,1,"app.module",a.isJsActive),"\n")}},dependencies:[p.n,i.U,U.F],encapsulation:2,changeDetection:0}),t})(),R=(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-file-upload"]],features:[e.qOj],decls:356,vars:18,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/file-upload.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","file-upload"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/multer"],[1,"warning"],[1,"language-shell"],["appAnchor","","id","basic-example"],[1,"filename"],["appd0ebc3614e85edd708ffd22e185a4d62c35805c1",""],[1,"language-typescript"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/multer#multeropts"],["appAnchor","","id","array-of-files"],["app5de7c2a6443c0545f14e67e038a038b1a83355e7",""],["appAnchor","","id","multiple-files"],["app32c5c9aec8027c8b790d3fdf4d87a078893eddc7",""],["appAnchor","","id","any-files"],["app93416cc525fb2377aab30cfb3afd283ed4c52c2f",""],["appAnchor","","id","default-options"],["appAnchor","","id","async-configuration"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/29-file-upload"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"File upload"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"To handle file uploading, Nest provides a built-in module based on the "),e.TgZ(9,"a",6),e._uU(10,"multer"),e.qZA(),e._uU(11," middleware package for Express. Multer handles data posted in the "),e.TgZ(12,"code"),e._uU(13,"multipart/form-data"),e.qZA(),e._uU(14," format, which is primarily used for uploading files via an HTTP "),e.TgZ(15,"code"),e._uU(16,"POST"),e.qZA(),e._uU(17," request. This module is fully configurable and you can adjust its behavior to your application requirements."),e.qZA(),e.TgZ(18,"blockquote",7)(19,"strong"),e._uU(20,"Warning"),e.qZA(),e._uU(21," Multer cannot process data which is not in the supported multipart format ("),e.TgZ(22,"code"),e._uU(23,"multipart/form-data"),e.qZA(),e._uU(24,"). Also, note that this package is not compatible with the "),e.TgZ(25,"code"),e._uU(26,"FastifyAdapter"),e.qZA(),e._uU(27,".\n"),e.qZA(),e.TgZ(28,"p"),e._uU(29,"For better type safety, let's install Multer typings package:"),e.qZA(),e.TgZ(30,"pre")(31,"code",8),e._uU(32,"\n$ npm i -D @types/multer\n"),e.qZA()(),e.TgZ(33,"p"),e._uU(34,"With this package installed, we can now use the "),e.TgZ(35,"code"),e._uU(36,"Express.Multer.File"),e.qZA(),e._uU(37," type (you can import this type as follows: "),e.TgZ(38,"code"),e._uU(39),e.qZA(),e._uU(40,")."),e.qZA(),e.TgZ(41,"h4",9)(42,"span"),e._uU(43,"Basic example"),e.qZA()(),e.TgZ(44,"p"),e._uU(45,"To upload a single file, simply tie the "),e.TgZ(46,"code"),e._uU(47,"FileInterceptor()"),e.qZA(),e._uU(48," interceptor to the route handler and extract "),e.TgZ(49,"code"),e._uU(50,"file"),e.qZA(),e._uU(51," from the "),e.TgZ(52,"code"),e._uU(53,"request"),e.qZA(),e._uU(54," using the "),e.TgZ(55,"code"),e._uU(56,"@UploadedFile()"),e.qZA(),e._uU(57," decorator."),e.qZA(),e.TgZ(58,"span",10),e._UZ(59,"app-tabs",null,11),e.qZA(),e.TgZ(61,"pre")(62,"code",12),e._uU(63,"\n@Post('upload')\n@UseInterceptors(FileInterceptor('file'))\nuploadFile(@UploadedFile() file: Express.Multer.File) {\n  console.log(file);\n}\n"),e.qZA()(),e.TgZ(64,"pre")(65,"code",12),e._uU(66,"\n@Post('upload')\n@UseInterceptors(FileInterceptor('file'))\n@Bind(UploadedFile())\nuploadFile(file) {\n  console.log(file);\n}\n"),e.qZA()(),e.TgZ(67,"blockquote",13)(68,"strong"),e._uU(69,"Hint"),e.qZA(),e._uU(70," The "),e.TgZ(71,"code"),e._uU(72,"FileInterceptor()"),e.qZA(),e._uU(73," decorator is exported from the "),e.TgZ(74,"code"),e._uU(75,"@nestjs/platform-express"),e.qZA(),e._uU(76," package. The "),e.TgZ(77,"code"),e._uU(78,"@UploadedFile()"),e.qZA(),e._uU(79," decorator is exported from "),e.TgZ(80,"code"),e._uU(81,"@nestjs/common"),e.qZA(),e._uU(82,".\n"),e.qZA(),e.TgZ(83,"p"),e._uU(84,"The "),e.TgZ(85,"code"),e._uU(86,"FileInterceptor()"),e.qZA(),e._uU(87," decorator takes two arguments:"),e.qZA(),e.TgZ(88,"ul")(89,"li")(90,"code"),e._uU(91,"fieldName"),e.qZA(),e._uU(92,": string that supplies the name of the field from the HTML form that holds a file"),e.qZA(),e.TgZ(93,"li")(94,"code"),e._uU(95,"options"),e.qZA(),e._uU(96,": optional object of type "),e.TgZ(97,"code"),e._uU(98,"MulterOptions"),e.qZA(),e._uU(99,". This is the same object used by the multer constructor (more details "),e.TgZ(100,"a",14),e._uU(101,"here"),e.qZA(),e._uU(102,")."),e.qZA()(),e.TgZ(103,"blockquote",7)(104,"strong"),e._uU(105,"Warning"),e.qZA(),e.TgZ(106,"code"),e._uU(107,"FileInterceptor()"),e.qZA(),e._uU(108," may not be compatible with third party cloud providers like Google Firebase or others.\n"),e.qZA(),e.TgZ(109,"h4",15)(110,"span"),e._uU(111,"Array of files"),e.qZA()(),e.TgZ(112,"p"),e._uU(113,"To upload an array of files (identified with a single field name), use the "),e.TgZ(114,"code"),e._uU(115,"FilesInterceptor()"),e.qZA(),e._uU(116," decorator (note the plural "),e.TgZ(117,"strong"),e._uU(118,"Files"),e.qZA(),e._uU(119," in the decorator name). This decorator takes three arguments:"),e.qZA(),e.TgZ(120,"ul")(121,"li")(122,"code"),e._uU(123,"fieldName"),e.qZA(),e._uU(124,": as described above"),e.qZA(),e.TgZ(125,"li")(126,"code"),e._uU(127,"maxCount"),e.qZA(),e._uU(128,": optional number defining the maximum number of files to accept"),e.qZA(),e.TgZ(129,"li")(130,"code"),e._uU(131,"options"),e.qZA(),e._uU(132,": optional "),e.TgZ(133,"code"),e._uU(134,"MulterOptions"),e.qZA(),e._uU(135," object, as described above"),e.qZA()(),e.TgZ(136,"p"),e._uU(137,"When using "),e.TgZ(138,"code"),e._uU(139,"FilesInterceptor()"),e.qZA(),e._uU(140,", extract files from the "),e.TgZ(141,"code"),e._uU(142,"request"),e.qZA(),e._uU(143," with the "),e.TgZ(144,"code"),e._uU(145,"@UploadedFiles()"),e.qZA(),e._uU(146," decorator."),e.qZA(),e.TgZ(147,"span",10),e._UZ(148,"app-tabs",null,16),e.qZA(),e.TgZ(150,"pre")(151,"code",12),e._uU(152,"\n@Post('upload')\n@UseInterceptors(FilesInterceptor('files'))\nuploadFile(@UploadedFiles() files: Array<Express.Multer.File>) {\n  console.log(files);\n}\n"),e.qZA()(),e.TgZ(153,"pre")(154,"code",12),e._uU(155,"\n@Post('upload')\n@UseInterceptors(FilesInterceptor('files'))\n@Bind(UploadedFiles())\nuploadFile(files) {\n  console.log(files);\n}\n"),e.qZA()(),e.TgZ(156,"blockquote",13)(157,"strong"),e._uU(158,"Hint"),e.qZA(),e._uU(159," The "),e.TgZ(160,"code"),e._uU(161,"FilesInterceptor()"),e.qZA(),e._uU(162," decorator is exported from the "),e.TgZ(163,"code"),e._uU(164,"@nestjs/platform-express"),e.qZA(),e._uU(165," package. The "),e.TgZ(166,"code"),e._uU(167,"@UploadedFiles()"),e.qZA(),e._uU(168," decorator is exported from "),e.TgZ(169,"code"),e._uU(170,"@nestjs/common"),e.qZA(),e._uU(171,".\n"),e.qZA(),e.TgZ(172,"h4",17)(173,"span"),e._uU(174,"Multiple files"),e.qZA()(),e.TgZ(175,"p"),e._uU(176,"To upload multiple fields (all with different field name keys), use the "),e.TgZ(177,"code"),e._uU(178,"FileFieldsInterceptor()"),e.qZA(),e._uU(179," decorator. This decorator takes two arguments:"),e.qZA(),e.TgZ(180,"ul")(181,"li")(182,"code"),e._uU(183,"uploadedFields"),e.qZA(),e._uU(184,": an array of objects, where each object specifies a required "),e.TgZ(185,"code"),e._uU(186,"name"),e.qZA(),e._uU(187," property with a string value specifying a field name, as described above, and an optional "),e.TgZ(188,"code"),e._uU(189,"maxCount"),e.qZA(),e._uU(190," property, as described above"),e.qZA(),e.TgZ(191,"li")(192,"code"),e._uU(193,"options"),e.qZA(),e._uU(194,": optional "),e.TgZ(195,"code"),e._uU(196,"MulterOptions"),e.qZA(),e._uU(197," object, as described above"),e.qZA()(),e.TgZ(198,"p"),e._uU(199,"When using "),e.TgZ(200,"code"),e._uU(201,"FileFieldsInterceptor()"),e.qZA(),e._uU(202,", extract files from the "),e.TgZ(203,"code"),e._uU(204,"request"),e.qZA(),e._uU(205," with the "),e.TgZ(206,"code"),e._uU(207,"@UploadedFiles()"),e.qZA(),e._uU(208," decorator."),e.qZA(),e.TgZ(209,"span",10),e._UZ(210,"app-tabs",null,18),e.qZA(),e.TgZ(212,"pre")(213,"code",12),e._uU(214,"\n@Post('upload')\n@UseInterceptors(FileFieldsInterceptor([\n  { name: 'avatar', maxCount: 1 },\n  { name: 'background', maxCount: 1 },\n]))\nuploadFile(@UploadedFiles() files: { avatar?: Express.Multer.File[], background?: Express.Multer.File[] }) {\n  console.log(files);\n}\n"),e.qZA()(),e.TgZ(215,"pre")(216,"code",12),e._uU(217,"\n@Post('upload')\n@Bind(UploadedFiles())\n@UseInterceptors(FileFieldsInterceptor([\n  { name: 'avatar', maxCount: 1 },\n  { name: 'background', maxCount: 1 },\n]))\nuploadFile(files) {\n  console.log(files);\n}\n"),e.qZA()(),e.TgZ(218,"h4",19)(219,"span"),e._uU(220,"Any files"),e.qZA()(),e.TgZ(221,"p"),e._uU(222,"To upload all fields with arbitrary field name keys, use the "),e.TgZ(223,"code"),e._uU(224,"AnyFilesInterceptor()"),e.qZA(),e._uU(225," decorator. This decorator can accept an optional "),e.TgZ(226,"code"),e._uU(227,"options"),e.qZA(),e._uU(228," object as described above."),e.qZA(),e.TgZ(229,"p"),e._uU(230,"When using "),e.TgZ(231,"code"),e._uU(232,"AnyFilesInterceptor()"),e.qZA(),e._uU(233,", extract files from the "),e.TgZ(234,"code"),e._uU(235,"request"),e.qZA(),e._uU(236," with the "),e.TgZ(237,"code"),e._uU(238,"@UploadedFiles()"),e.qZA(),e._uU(239," decorator."),e.qZA(),e.TgZ(240,"span",10),e._UZ(241,"app-tabs",null,20),e.qZA(),e.TgZ(243,"pre")(244,"code",12),e._uU(245,"\n@Post('upload')\n@UseInterceptors(AnyFilesInterceptor())\nuploadFile(@UploadedFiles() files: Array<Express.Multer.File>) {\n  console.log(files);\n}\n"),e.qZA()(),e.TgZ(246,"pre")(247,"code",12),e._uU(248,"\n@Post('upload')\n@Bind(UploadedFiles())\n@UseInterceptors(AnyFilesInterceptor())\nuploadFile(files) {\n  console.log(files);\n}\n"),e.qZA()(),e.TgZ(249,"h4",21)(250,"span"),e._uU(251,"Default options"),e.qZA()(),e.TgZ(252,"p"),e._uU(253,"You can specify multer options in the file interceptors as described above. To set default options, you can call the static "),e.TgZ(254,"code"),e._uU(255,"register()"),e.qZA(),e._uU(256," method when you import the "),e.TgZ(257,"code"),e._uU(258,"MulterModule"),e.qZA(),e._uU(259,", passing in supported options. You can use all options listed "),e.TgZ(260,"a",14),e._uU(261,"here"),e.qZA(),e._uU(262,"."),e.qZA(),e.TgZ(263,"pre")(264,"code",12),e._uU(265,"\nMulterModule.register({\n  dest: './upload',\n});\n"),e.qZA()(),e.TgZ(266,"blockquote",13)(267,"strong"),e._uU(268,"Hint"),e.qZA(),e._uU(269," The "),e.TgZ(270,"code"),e._uU(271,"MulterModule"),e.qZA(),e._uU(272," class is exported from the "),e.TgZ(273,"code"),e._uU(274,"@nestjs/platform-express"),e.qZA(),e._uU(275," package.\n"),e.qZA(),e.TgZ(276,"h4",22)(277,"span"),e._uU(278,"Async configuration"),e.qZA()(),e.TgZ(279,"p"),e._uU(280,"When you need to set "),e.TgZ(281,"code"),e._uU(282,"MulterModule"),e.qZA(),e._uU(283," options asynchronously instead of statically, use the "),e.TgZ(284,"code"),e._uU(285,"registerAsync()"),e.qZA(),e._uU(286," method. As with most dynamic modules, Nest provides several techniques to deal with async configuration."),e.qZA(),e.TgZ(287,"p"),e._uU(288,"One technique is to use a factory function:"),e.qZA(),e.TgZ(289,"pre")(290,"code",12),e._uU(291,"\nMulterModule.registerAsync({\n  useFactory: () => ({\n    dest: './upload',\n  }),\n});\n"),e.qZA()(),e.TgZ(292,"p"),e._uU(293,"Like other "),e.TgZ(294,"a",23),e._uU(295,"factory providers"),e.qZA(),e._uU(296,", our factory function can be "),e.TgZ(297,"code"),e._uU(298,"async"),e.qZA(),e._uU(299," and can inject dependencies through "),e.TgZ(300,"code"),e._uU(301,"inject"),e.qZA(),e._uU(302,"."),e.qZA(),e.TgZ(303,"pre")(304,"code",12),e._uU(305,"\nMulterModule.registerAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    dest: configService.getString('MULTER_DEST'),\n  }),\n  inject: [ConfigService],\n});\n"),e.qZA()(),e.TgZ(306,"p"),e._uU(307,"Alternatively, you can configure the "),e.TgZ(308,"code"),e._uU(309,"MulterModule"),e.qZA(),e._uU(310," using a class instead of a factory, as shown below:"),e.qZA(),e.TgZ(311,"pre")(312,"code",12),e._uU(313,"\nMulterModule.registerAsync({\n  useClass: MulterConfigService,\n});\n"),e.qZA()(),e.TgZ(314,"p"),e._uU(315,"The construction above instantiates "),e.TgZ(316,"code"),e._uU(317,"MulterConfigService"),e.qZA(),e._uU(318," inside "),e.TgZ(319,"code"),e._uU(320,"MulterModule"),e.qZA(),e._uU(321,", using it to create the required options object. Note that in this example, the "),e.TgZ(322,"code"),e._uU(323,"MulterConfigService"),e.qZA(),e._uU(324," has to implement the "),e.TgZ(325,"code"),e._uU(326,"MulterOptionsFactory"),e.qZA(),e._uU(327," interface, as shown below. The "),e.TgZ(328,"code"),e._uU(329,"MulterModule"),e.qZA(),e._uU(330," will call the "),e.TgZ(331,"code"),e._uU(332,"createMulterOptions()"),e.qZA(),e._uU(333," method on the instantiated object of the supplied class."),e.qZA(),e.TgZ(334,"pre")(335,"code",12),e._uU(336,"\n@Injectable()\nclass MulterConfigService implements MulterOptionsFactory {\n  createMulterOptions(): MulterModuleOptions {\n    return {\n      dest: './upload',\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(337,"p"),e._uU(338,"If you want to reuse an existing options provider instead of creating a private copy inside the "),e.TgZ(339,"code"),e._uU(340,"MulterModule"),e.qZA(),e._uU(341,", use the "),e.TgZ(342,"code"),e._uU(343,"useExisting"),e.qZA(),e._uU(344," syntax."),e.qZA(),e.TgZ(345,"pre")(346,"code",12),e._uU(347,"\nMulterModule.registerAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n"),e.qZA()(),e.TgZ(348,"h4",24)(349,"span"),e._uU(350,"Example"),e.qZA()(),e.TgZ(351,"p"),e._uU(352,"A working example is available "),e.TgZ(353,"a",25),e._uU(354,"here"),e.qZA(),e._uU(355,"."),e.qZA()()),2&n){const a=e.MAs(60),u=e.MAs(149),l=e.MAs(211),c=e.MAs(242);e.xp6(39),e.AsE("import ","{"," Express ","}"," from 'express'"),e.xp6(22),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive),e.xp6(86),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(59),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(28),e.ekj("hide",c.isJsActive),e.xp6(3),e.ekj("hide",!c.isJsActive)}},dependencies:[p.n,i.U],encapsulation:2,changeDetection:0}),t})(),F=(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-http-module"]],features:[e.qOj],decls:209,vars:4,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/http-module.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","http-module"],["rel","nofollow","target","_blank","href","https://github.com/axios/axios"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/sindresorhus/got"],["rel","nofollow","target","_blank","href","https://github.com/nodejs/undici"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","getting-started"],[1,"language-typescript"],[1,"filename"],["app0b7bd2bda4c9838e54e64e456fd18395bf55b60d",""],["appAnchor","","id","configuration"],["rel","nofollow","target","_blank","href","https://github.com/axios/axios#request-config"],["appAnchor","","id","async-configuration"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory"],["appAnchor","","id","using-axios-directly"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"HTTP module"),e.qZA(),e.TgZ(7,"p")(8,"a",6),e._uU(9,"Axios"),e.qZA(),e._uU(10," is richly featured HTTP client package that is widely used. Nest wraps Axios and exposes it via the built-in "),e.TgZ(11,"code"),e._uU(12,"HttpModule"),e.qZA(),e._uU(13,". The "),e.TgZ(14,"code"),e._uU(15,"HttpModule"),e.qZA(),e._uU(16," exports the "),e.TgZ(17,"code"),e._uU(18,"HttpService"),e.qZA(),e._uU(19," class, which exposes Axios-based methods to perform HTTP requests. The library also transforms the resulting HTTP responses into "),e.TgZ(20,"code"),e._uU(21,"Observables"),e.qZA(),e._uU(22,"."),e.qZA(),e.TgZ(23,"blockquote",7)(24,"strong"),e._uU(25,"Hint"),e.qZA(),e._uU(26," You can also use any general purpose Node.js HTTP client library directly, including "),e.TgZ(27,"a",8),e._uU(28,"got"),e.qZA(),e._uU(29," or "),e.TgZ(30,"a",9),e._uU(31,"undici"),e.qZA(),e._uU(32,".\n"),e.qZA(),e.TgZ(33,"h4",10)(34,"span"),e._uU(35,"Installation"),e.qZA()(),e.TgZ(36,"p"),e._uU(37,"To begin using it, we first install the required dependency."),e.qZA(),e.TgZ(38,"pre")(39,"code",11),e._uU(40,"\n$ npm i --save @nestjs/axios\n"),e.qZA()(),e.TgZ(41,"h4",12)(42,"span"),e._uU(43,"Getting started"),e.qZA()(),e.TgZ(44,"p"),e._uU(45,"Once the installation process is complete, to use the "),e.TgZ(46,"code"),e._uU(47,"HttpService"),e.qZA(),e._uU(48,", first import "),e.TgZ(49,"code"),e._uU(50,"HttpModule"),e.qZA(),e._uU(51,"."),e.qZA(),e.TgZ(52,"pre")(53,"code",13),e._uU(54,"\n@Module({\n  imports: [HttpModule],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n"),e.qZA()(),e.TgZ(55,"p"),e._uU(56,"Next, inject "),e.TgZ(57,"code"),e._uU(58,"HttpService"),e.qZA(),e._uU(59," using normal constructor injection."),e.qZA(),e.TgZ(60,"blockquote",7)(61,"strong"),e._uU(62,"Hint"),e.qZA(),e.TgZ(63,"code"),e._uU(64,"HttpModule"),e.qZA(),e._uU(65," and "),e.TgZ(66,"code"),e._uU(67,"HttpService"),e.qZA(),e._uU(68," are imported from "),e.TgZ(69,"code"),e._uU(70,"@nestjs/axios"),e.qZA(),e._uU(71," package.\n"),e.qZA(),e.TgZ(72,"span",14),e._UZ(73,"app-tabs",null,15),e.qZA(),e.TgZ(75,"pre")(76,"code",13),e._uU(77,"\n@Injectable()\nexport class CatsService {\n  constructor(private readonly httpService: HttpService) {}\n\n  findAll(): Observable<AxiosResponse<Cat[]>> {\n    return this.httpService.get('http://localhost:3000/cats');\n  }\n}\n"),e.qZA()(),e.TgZ(78,"pre")(79,"code",13),e._uU(80,"\n@Injectable()\n@Dependencies(HttpService)\nexport class CatsService {\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n\n  findAll() {\n    return this.httpService.get('http://localhost:3000/cats');\n  }\n}\n"),e.qZA()(),e.TgZ(81,"blockquote",7)(82,"strong"),e._uU(83,"Hint"),e.qZA(),e.TgZ(84,"code"),e._uU(85,"AxiosResponse"),e.qZA(),e._uU(86," is an interface exported from the "),e.TgZ(87,"code"),e._uU(88,"axios"),e.qZA(),e._uU(89," package ("),e.TgZ(90,"code"),e._uU(91,"$ npm i axios"),e.qZA(),e._uU(92,").\n"),e.qZA(),e.TgZ(93,"p"),e._uU(94,"All "),e.TgZ(95,"code"),e._uU(96,"HttpService"),e.qZA(),e._uU(97," methods return an "),e.TgZ(98,"code"),e._uU(99,"AxiosResponse"),e.qZA(),e._uU(100," wrapped in an "),e.TgZ(101,"code"),e._uU(102,"Observable"),e.qZA(),e._uU(103," object."),e.qZA(),e.TgZ(104,"h4",16)(105,"span"),e._uU(106,"Configuration"),e.qZA()(),e.TgZ(107,"p")(108,"a",6),e._uU(109,"Axios"),e.qZA(),e._uU(110," can be configured with a variety of options to customize the behavior of the "),e.TgZ(111,"code"),e._uU(112,"HttpService"),e.qZA(),e._uU(113,". Read more about them "),e.TgZ(114,"a",17),e._uU(115,"here"),e.qZA(),e._uU(116,". To configure the underlying Axios instance, pass an optional options object to the "),e.TgZ(117,"code"),e._uU(118,"register()"),e.qZA(),e._uU(119," method of "),e.TgZ(120,"code"),e._uU(121,"HttpModule"),e.qZA(),e._uU(122," when importing it. This options object will be passed directly to the underlying Axios constructor."),e.qZA(),e.TgZ(123,"pre")(124,"code",13),e._uU(125,"\n@Module({\n  imports: [\n    HttpModule.register({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  ],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n"),e.qZA()(),e.TgZ(126,"h4",18)(127,"span"),e._uU(128,"Async configuration"),e.qZA()(),e.TgZ(129,"p"),e._uU(130,"When you need to pass module options asynchronously instead of statically, use the "),e.TgZ(131,"code"),e._uU(132,"registerAsync()"),e.qZA(),e._uU(133," method. As with most dynamic modules, Nest provides several techniques to deal with async configuration."),e.qZA(),e.TgZ(134,"p"),e._uU(135,"One technique is to use a factory function:"),e.qZA(),e.TgZ(136,"pre")(137,"code",13),e._uU(138,"\nHttpModule.registerAsync({\n  useFactory: () => ({\n    timeout: 5000,\n    maxRedirects: 5,\n  }),\n});\n"),e.qZA()(),e.TgZ(139,"p"),e._uU(140,"Like other factory providers, our factory function can be "),e.TgZ(141,"a",19),e._uU(142,"async"),e.qZA(),e._uU(143," and can inject dependencies through "),e.TgZ(144,"code"),e._uU(145,"inject"),e.qZA(),e._uU(146,"."),e.qZA(),e.TgZ(147,"pre")(148,"code",13),e._uU(149,"\nHttpModule.registerAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    timeout: configService.get('HTTP_TIMEOUT'),\n    maxRedirects: configService.get('HTTP_MAX_REDIRECTS'),\n  }),\n  inject: [ConfigService],\n});\n"),e.qZA()(),e.TgZ(150,"p"),e._uU(151,"Alternatively, you can configure the "),e.TgZ(152,"code"),e._uU(153,"HttpModule"),e.qZA(),e._uU(154," using a class instead of a factory, as shown below."),e.qZA(),e.TgZ(155,"pre")(156,"code",13),e._uU(157,"\nHttpModule.registerAsync({\n  useClass: HttpConfigService,\n});\n"),e.qZA()(),e.TgZ(158,"p"),e._uU(159,"The construction above instantiates "),e.TgZ(160,"code"),e._uU(161,"HttpConfigService"),e.qZA(),e._uU(162," inside "),e.TgZ(163,"code"),e._uU(164,"HttpModule"),e.qZA(),e._uU(165,", using it to create an options object. Note that in this example, the "),e.TgZ(166,"code"),e._uU(167,"HttpConfigService"),e.qZA(),e._uU(168," has to implement "),e.TgZ(169,"code"),e._uU(170,"HttpModuleOptionsFactory"),e.qZA(),e._uU(171," interface as shown below. The "),e.TgZ(172,"code"),e._uU(173,"HttpModule"),e.qZA(),e._uU(174," will call the "),e.TgZ(175,"code"),e._uU(176,"createHttpOptions()"),e.qZA(),e._uU(177," method on the instantiated object of the supplied class."),e.qZA(),e.TgZ(178,"pre")(179,"code",13),e._uU(180,"\n@Injectable()\nclass HttpConfigService implements HttpModuleOptionsFactory {\n  createHttpOptions(): HttpModuleOptions {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(181,"p"),e._uU(182,"If you want to reuse an existing options provider instead of creating a private copy inside the "),e.TgZ(183,"code"),e._uU(184,"HttpModule"),e.qZA(),e._uU(185,", use the "),e.TgZ(186,"code"),e._uU(187,"useExisting"),e.qZA(),e._uU(188," syntax."),e.qZA(),e.TgZ(189,"pre")(190,"code",13),e._uU(191,"\nHttpModule.registerAsync({\n  imports: [ConfigModule],\n  useExisting: HttpConfigService,\n});\n"),e.qZA()(),e.TgZ(192,"h4",20)(193,"span"),e._uU(194,"Using Axios directly"),e.qZA()(),e.TgZ(195,"p"),e._uU(196,"If you think that "),e.TgZ(197,"code"),e._uU(198,"HttpModule.register"),e.qZA(),e._uU(199,"'s options are not enough for you, or if you just want to access the underlying Axios instance created by "),e.TgZ(200,"code"),e._uU(201,"@nestjs/axios"),e.qZA(),e._uU(202,", you can access it via "),e.TgZ(203,"code"),e._uU(204,"HttpService#axiosRef"),e.qZA(),e._uU(205," as follows:"),e.qZA(),e.TgZ(206,"pre")(207,"code",13),e._uU(208,"\n@Injectable()\nexport class CatsService {\n  constructor(private readonly httpService: HttpService) {}\n\n  findAll(): Promise<AxiosResponse<Cat[]>> {\n    return this.httpService.axiosRef.get('http://localhost:3000/cats');\n    //                      ^ AxiosInstance interface\n  }\n}\n"),e.qZA()()()),2&n){const a=e.MAs(74);e.xp6(75),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive)}},dependencies:[p.n,i.U],encapsulation:2,changeDetection:0}),t})();var y=d(8857);const O=[{path:"authentication",redirectTo:"/security/authentication"},{path:"mvc",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-mvc"]],features:[e.qOj],decls:215,vars:29,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/mvc.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","model-view-controller"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/express"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest-cli"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://expressjs.com/en/guide/using-template-engines.html"],["rel","nofollow","target","_blank","href","https://github.com/pillarjs/hbs#readme"],[1,"filename"],["app643082298126fcb1e7fbd84cccfe9305eeca1b75",""],[1,"language-typescript"],["appAnchor","","id","template-rendering"],[1,"language-html"],["app7947981a5b6ab2c7d4071982a52c052d57a23ba4",""],["appAnchor","","id","dynamic-template-rendering"],[1,"info"],["rel","nofollow","target","_blank","href","https://expressjs.com/en/api.html"],["appcc1f43b8d46728e5182660e549821c552ccc7fc0",""],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/15-mvc"],["appAnchor","","id","fastify"],["routerLink","/techniques/performance"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify"],["app7db6bed9ad214a271bbd6d46252279d101dd2481",""],["app740bc1567e9951fa82e651eb53d1097fe5647cc7",""],["appAnchor","","id","example-1"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/17-mvc-fastify"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Model-View-Controller"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest, by default, makes use of the "),e.TgZ(9,"a",6),e._uU(10,"Express"),e.qZA(),e._uU(11," library under the hood. Hence, every technique for using the MVC (Model-View-Controller) pattern in Express applies to Nest as well."),e.qZA(),e.TgZ(12,"p"),e._uU(13,"First, let's scaffold a simple Nest application using the "),e.TgZ(14,"a",7),e._uU(15,"CLI"),e.qZA(),e._uU(16," tool:"),e.qZA(),e.TgZ(17,"pre")(18,"code",8),e._uU(19,"\n$ npm i -g @nestjs/cli\n$ nest new project\n"),e.qZA()(),e.TgZ(20,"p"),e._uU(21,"In order to create an MVC app, we also need a "),e.TgZ(22,"a",9),e._uU(23,"template engine"),e.qZA(),e._uU(24," to render our HTML views:"),e.qZA(),e.TgZ(25,"pre")(26,"code",8),e._uU(27,"\n$ npm install --save hbs\n"),e.qZA()(),e.TgZ(28,"p"),e._uU(29,"We've used the "),e.TgZ(30,"code"),e._uU(31,"hbs"),e.qZA(),e._uU(32," ("),e.TgZ(33,"a",10),e._uU(34,"Handlebars"),e.qZA(),e._uU(35,") engine, though you can use whatever fits your requirements. Once the installation process is complete, we need to configure the express instance using the following code:"),e.qZA(),e.TgZ(36,"span",11),e._uU(37),e.ALo(38,"extension"),e._UZ(39,"app-tabs",null,12),e.qZA(),e.TgZ(41,"pre")(42,"code",13),e._uU(43,"\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport { join } from 'path';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(\n    AppModule,\n  );\n\n  app.useStaticAssets(join(__dirname, '..', 'public'));\n  app.setBaseViewsDir(join(__dirname, '..', 'views'));\n  app.setViewEngine('hbs');\n\n  await app.listen(3000);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(44,"pre")(45,"code",13),e._uU(46,"\nimport { NestFactory } from '@nestjs/core';\nimport { join } from 'path';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(\n    AppModule,\n  );\n\n  app.useStaticAssets(join(__dirname, '..', 'public'));\n  app.setBaseViewsDir(join(__dirname, '..', 'views'));\n  app.setViewEngine('hbs');\n\n  await app.listen(3000);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(47,"p"),e._uU(48,"We told "),e.TgZ(49,"a",6),e._uU(50,"Express"),e.qZA(),e._uU(51," that the "),e.TgZ(52,"code"),e._uU(53,"public"),e.qZA(),e._uU(54," directory will be used for storing static assets, "),e.TgZ(55,"code"),e._uU(56,"views"),e.qZA(),e._uU(57," will contain templates, and the "),e.TgZ(58,"code"),e._uU(59,"hbs"),e.qZA(),e._uU(60," template engine should be used to render HTML output."),e.qZA(),e.TgZ(61,"h4",14)(62,"span"),e._uU(63,"Template rendering"),e.qZA()(),e.TgZ(64,"p"),e._uU(65,"Now, let's create a "),e.TgZ(66,"code"),e._uU(67,"views"),e.qZA(),e._uU(68," directory and "),e.TgZ(69,"code"),e._uU(70,"index.hbs"),e.qZA(),e._uU(71," template inside it. In the template, we'll print a "),e.TgZ(72,"code"),e._uU(73,"message"),e.qZA(),e._uU(74," passed from the controller:"),e.qZA(),e.TgZ(75,"pre")(76,"code",15),e._uU(77),e.qZA()(),e.TgZ(78,"p"),e._uU(79,"Next, open the "),e.TgZ(80,"code"),e._uU(81,"app.controller"),e.qZA(),e._uU(82," file and replace the "),e.TgZ(83,"code"),e._uU(84,"root()"),e.qZA(),e._uU(85," method with the following code:"),e.qZA(),e.TgZ(86,"span",11),e._uU(87),e.ALo(88,"extension"),e._UZ(89,"app-tabs",null,16),e.qZA(),e.TgZ(91,"pre")(92,"code",13),e._uU(93,"\nimport { Get, Controller, Render } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  @Render('index')\n  root() {\n    return { message: 'Hello world!' };\n  }\n}\n"),e.qZA()(),e.TgZ(94,"p"),e._uU(95,"In this code, we are specifying the template to use in the "),e.TgZ(96,"code"),e._uU(97,"@Render()"),e.qZA(),e._uU(98," decorator, and the return value of the route handler method is passed to the template for rendering. Notice that the return value is an object with a property "),e.TgZ(99,"code"),e._uU(100,"message"),e.qZA(),e._uU(101,", matching the "),e.TgZ(102,"code"),e._uU(103,"message"),e.qZA(),e._uU(104," placeholder we created in the template."),e.qZA(),e.TgZ(105,"p"),e._uU(106,"While the application is running, open your browser and navigate to "),e.TgZ(107,"code"),e._uU(108,"http://localhost:3000"),e.qZA(),e._uU(109,". You should see the "),e.TgZ(110,"code"),e._uU(111,"Hello world!"),e.qZA(),e._uU(112," message."),e.qZA(),e.TgZ(113,"h4",17)(114,"span"),e._uU(115,"Dynamic template rendering"),e.qZA()(),e.TgZ(116,"p"),e._uU(117,"If the application logic must dynamically decide which template to render, then we should use the "),e.TgZ(118,"code"),e._uU(119,"@Res()"),e.qZA(),e._uU(120," decorator, and supply the view name in our route handler, rather than in the "),e.TgZ(121,"code"),e._uU(122,"@Render()"),e.qZA(),e._uU(123," decorator:"),e.qZA(),e.TgZ(124,"blockquote",18)(125,"strong"),e._uU(126,"Hint"),e.qZA(),e._uU(127," When Nest detects the "),e.TgZ(128,"code"),e._uU(129,"@Res()"),e.qZA(),e._uU(130," decorator, it injects the library-specific "),e.TgZ(131,"code"),e._uU(132,"response"),e.qZA(),e._uU(133," object. We can use this object to dynamically render the template. Learn more about the "),e.TgZ(134,"code"),e._uU(135,"response"),e.qZA(),e._uU(136," object API "),e.TgZ(137,"a",19),e._uU(138,"here"),e.qZA(),e._uU(139,".\n"),e.qZA(),e.TgZ(140,"span",11),e._uU(141),e.ALo(142,"extension"),e._UZ(143,"app-tabs",null,20),e.qZA(),e.TgZ(145,"pre")(146,"code",13),e._uU(147,"\nimport { Get, Controller, Res, Render } from '@nestjs/common';\nimport { Response } from 'express';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private appService: AppService) {}\n\n  @Get()\n  root(@Res() res: Response) {\n    return res.render(\n      this.appService.getViewName(),\n      { message: 'Hello world!' },\n    );\n  }\n}\n"),e.qZA()(),e.TgZ(148,"h4",21)(149,"span"),e._uU(150,"Example"),e.qZA()(),e.TgZ(151,"p"),e._uU(152,"A working example is available "),e.TgZ(153,"a",22),e._uU(154,"here"),e.qZA(),e._uU(155,"."),e.qZA(),e.TgZ(156,"h4",23)(157,"span"),e._uU(158,"Fastify"),e.qZA()(),e.TgZ(159,"p"),e._uU(160,"As mentioned in this "),e.TgZ(161,"a",24),e._uU(162,"chapter"),e.qZA(),e._uU(163,", we are able to use any compatible HTTP provider together with Nest. One such library is "),e.TgZ(164,"a",25),e._uU(165,"Fastify"),e.qZA(),e._uU(166,". In order to create an MVC application with Fastify, we have to install the following packages:"),e.qZA(),e.TgZ(167,"pre")(168,"code",8),e._uU(169,"\n$ npm i --save fastify-static point-of-view handlebars\n"),e.qZA()(),e.TgZ(170,"p"),e._uU(171,"The next steps cover almost the same process used with Express, with minor differences specific to the platform. Once the installation process is complete, open the "),e.TgZ(172,"code"),e._uU(173,"main.ts"),e.qZA(),e._uU(174," file and update its contents:"),e.qZA(),e.TgZ(175,"span",11),e._uU(176),e.ALo(177,"extension"),e._UZ(178,"app-tabs",null,26),e.qZA(),e.TgZ(180,"pre")(181,"code",13),e._uU(182,"\nimport { NestFactory } from '@nestjs/core';\nimport { NestFastifyApplication, FastifyAdapter } from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\nimport { join } from 'path';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n  app.useStaticAssets({\n    root: join(__dirname, '..', 'public'),\n    prefix: '/public/',\n  });\n  app.setViewEngine({\n    engine: {\n      handlebars: require('handlebars'),\n    },\n    templates: join(__dirname, '..', 'views'),\n  });\n  await app.listen(3000);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(183,"pre")(184,"code",13),e._uU(185,"\nimport { NestFactory } from '@nestjs/core';\nimport { FastifyAdapter } from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\nimport { join } from 'path';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, new FastifyAdapter());\n  app.useStaticAssets({\n    root: join(__dirname, '..', 'public'),\n    prefix: '/public/',\n  });\n  app.setViewEngine({\n    engine: {\n      handlebars: require('handlebars'),\n    },\n    templates: join(__dirname, '..', 'views'),\n  });\n  await app.listen(3000);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(186,"p"),e._uU(187,"The Fastify API is slightly different but the end result of those methods calls remains the same. One difference to notice with Fastify is that the template name passed into the "),e.TgZ(188,"code"),e._uU(189,"@Render()"),e.qZA(),e._uU(190," decorator must include a file extension."),e.qZA(),e.TgZ(191,"span",11),e._uU(192),e.ALo(193,"extension"),e._UZ(194,"app-tabs",null,27),e.qZA(),e.TgZ(196,"pre")(197,"code",13),e._uU(198,"\nimport { Get, Controller, Render } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  @Render('index.hbs')\n  root() {\n    return { message: 'Hello world!' };\n  }\n}\n"),e.qZA()(),e.TgZ(199,"p"),e._uU(200,"While the application is running, open your browser and navigate to "),e.TgZ(201,"code"),e._uU(202,"http://localhost:3000"),e.qZA(),e._uU(203,". You should see the "),e.TgZ(204,"code"),e._uU(205,"Hello world!"),e.qZA(),e._uU(206," message."),e.qZA(),e.TgZ(207,"h4",28)(208,"span"),e._uU(209,"Example"),e.qZA()(),e.TgZ(210,"p"),e._uU(211,"A working example is available "),e.TgZ(212,"a",29),e._uU(213,"here"),e.qZA(),e._uU(214,"."),e.qZA()()),2&n){const a=e.MAs(40),u=e.MAs(90),l=e.MAs(144),c=e.MAs(179),g=e.MAs(195);e.xp6(37),e.hij(" ",e.xi3(38,14,"main",a.isJsActive),"\n"),e.xp6(4),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive),e.xp6(33),e.hij('\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <title>App</title>\n  </head>\n  <body>\n    ',"{{ message }}","\n  </body>\n</html>\n"),e.xp6(10),e.hij(" ",e.xi3(88,17,"app.controller",u.isJsActive),"\n"),e.xp6(54),e.hij(" ",e.xi3(142,20,"app.controller",l.isJsActive),"\n"),e.xp6(35),e.hij(" ",e.xi3(177,23,"main",c.isJsActive),"\n"),e.xp6(4),e.ekj("hide",c.isJsActive),e.xp6(3),e.ekj("hide",!c.isJsActive),e.xp6(9),e.hij(" ",e.xi3(193,26,"app.controller",g.isJsActive),"\n")}},dependencies:[p.n,i.U,h.yS,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"MVC"}},{path:"serialization",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-serialization"]],features:[e.qOj],decls:171,vars:2,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/serialization.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","serialization"],["appAnchor","","id","overview"],["rel","nofollow","target","_blank","href","https://github.com/typestack/class-transformer"],["appAnchor","","id","exclude-properties"],[1,"language-typescript"],[1,""],[1,"info"],[1,"language-json"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/interceptors#binding-interceptors"],["appAnchor","","id","expose-properties"],["appAnchor","","id","transform"],["appAnchor","","id","pass-options"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/21-serializer"],["appAnchor","","id","websockets-and-microservices"],["appAnchor","","id","learn-more"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Serialization"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Serialization is a process that happens before objects are returned in a network response. This is an appropriate place to provide rules for transforming and sanitizing the data to be returned to the client. For example, sensitive data like passwords should always be excluded from the response. Or, certain properties might require additional transformation, such as sending only a subset of properties of an entity. Performing these transformations manually can be tedious and error prone, and can leave you uncertain that all cases have been covered."),e.qZA(),e.TgZ(9,"h4",6)(10,"span"),e._uU(11,"Overview"),e.qZA()(),e.TgZ(12,"p"),e._uU(13,"Nest provides a built-in capability to help ensure that these operations can be performed in a straightforward way. The "),e.TgZ(14,"code"),e._uU(15,"ClassSerializerInterceptor"),e.qZA(),e._uU(16," interceptor uses the powerful "),e.TgZ(17,"a",7),e._uU(18,"class-transformer"),e.qZA(),e._uU(19," package to provide a declarative and extensible way of transforming objects. The basic operation it performs is to take the value returned by a method handler and apply the "),e.TgZ(20,"code"),e._uU(21,"classToPlain()"),e.qZA(),e._uU(22," function from "),e.TgZ(23,"a",7),e._uU(24,"class-transformer"),e.qZA(),e._uU(25,". In doing so, it can apply rules expressed by "),e.TgZ(26,"code"),e._uU(27,"class-transformer"),e.qZA(),e._uU(28," decorators on an entity/DTO class, as described below."),e.qZA(),e.TgZ(29,"h4",8)(30,"span"),e._uU(31,"Exclude properties"),e.qZA()(),e.TgZ(32,"p"),e._uU(33,"Let's assume that we want to automatically exclude a "),e.TgZ(34,"code"),e._uU(35,"password"),e.qZA(),e._uU(36," property from a user entity. We annotate the entity as follows:"),e.qZA(),e.TgZ(37,"pre")(38,"code",9),e._uU(39,"\nimport { Exclude } from 'class-transformer';\n\nexport class UserEntity {\n  id: number;\n  firstName: string;\n  lastName: string;\n\n  @Exclude()\n  password: string;\n\n  constructor(partial: Partial<UserEntity>) {\n    Object.assign(this, partial);\n  }\n}\n"),e.qZA()(),e.TgZ(40,"p"),e._uU(41,"Now consider a controller with a method handler that returns an instance of this class."),e.qZA(),e.TgZ(42,"pre")(43,"code",9),e._uU(44,"\n@UseInterceptors(ClassSerializerInterceptor)\n@Get()\nfindOne(): UserEntity {\n  return new UserEntity({\n    id: 1,\n    firstName: 'Kamil',\n    lastName: 'Mysliwiec',\n    password: 'password',\n  });\n}\n"),e.qZA()(),e.TgZ(45,"blockquote",10)(46,"strong"),e._uU(47,"Warning"),e.qZA(),e._uU(48," Note that we must return an instance of the class. If you return a plain JavaScript object, for example, "),e.TgZ(49,"code"),e._uU(50),e.qZA(),e._uU(51,", the object won't be properly serialized.\n"),e.qZA(),e.TgZ(52,"blockquote",11)(53,"strong"),e._uU(54,"Hint"),e.qZA(),e._uU(55," The "),e.TgZ(56,"code"),e._uU(57,"ClassSerializerInterceptor"),e.qZA(),e._uU(58," is imported from "),e.TgZ(59,"code"),e._uU(60,"@nestjs/common"),e.qZA(),e._uU(61,".\n"),e.qZA(),e.TgZ(62,"p"),e._uU(63,"When this endpoint is requested, the client receives the following response:"),e.qZA(),e.TgZ(64,"pre")(65,"code",12),e._uU(66,'\n{\n  "id": 1,\n  "firstName": "Kamil",\n  "lastName": "Mysliwiec"\n}\n'),e.qZA()(),e.TgZ(67,"p"),e._uU(68,"Note that the interceptor can be applied application-wide (as covered "),e.TgZ(69,"a",13),e._uU(70,"here"),e.qZA(),e._uU(71,"). The combination of the interceptor and the entity class declaration ensures that "),e.TgZ(72,"strong"),e._uU(73,"any"),e.qZA(),e._uU(74," method that returns a "),e.TgZ(75,"code"),e._uU(76,"UserEntity"),e.qZA(),e._uU(77," will be sure to remove the "),e.TgZ(78,"code"),e._uU(79,"password"),e.qZA(),e._uU(80," property. This gives you a measure of centralized enforcement of this business rule."),e.qZA(),e.TgZ(81,"h4",14)(82,"span"),e._uU(83,"Expose properties"),e.qZA()(),e.TgZ(84,"p"),e._uU(85,"You can use the "),e.TgZ(86,"code"),e._uU(87,"@Expose()"),e.qZA(),e._uU(88," decorator to provide alias names for properties, or to execute a function to calculate a property value (analogous to "),e.TgZ(89,"strong"),e._uU(90,"getter"),e.qZA(),e._uU(91," functions), as shown below."),e.qZA(),e.TgZ(92,"pre")(93,"code",9),e._uU(94,"\n@Expose()\nget fullName(): string {\n  return `${this.firstName} ${this.lastName}`;\n}\n"),e.qZA()(),e.TgZ(95,"h4",15)(96,"span"),e._uU(97,"Transform"),e.qZA()(),e.TgZ(98,"p"),e._uU(99,"You can perform additional data transformation using the "),e.TgZ(100,"code"),e._uU(101,"@Transform()"),e.qZA(),e._uU(102," decorator. For example, the following construct returns the name property of the "),e.TgZ(103,"code"),e._uU(104,"RoleEntity"),e.qZA(),e._uU(105," instead of returning the whole object."),e.qZA(),e.TgZ(106,"pre")(107,"code",9),e._uU(108,"\n@Transform(({ value }) => value.name)\nrole: RoleEntity;\n"),e.qZA()(),e.TgZ(109,"h4",16)(110,"span"),e._uU(111,"Pass options"),e.qZA()(),e.TgZ(112,"p"),e._uU(113,"You may want to modify the default behavior of the transformation functions. To override default settings, pass them in an "),e.TgZ(114,"code"),e._uU(115,"options"),e.qZA(),e._uU(116," object with the "),e.TgZ(117,"code"),e._uU(118,"@SerializeOptions()"),e.qZA(),e._uU(119," decorator."),e.qZA(),e.TgZ(120,"pre")(121,"code",9),e._uU(122,"\n@SerializeOptions({\n  excludePrefixes: ['_'],\n})\n@Get()\nfindOne(): UserEntity {\n  return new UserEntity();\n}\n"),e.qZA()(),e.TgZ(123,"blockquote",11)(124,"strong"),e._uU(125,"Hint"),e.qZA(),e._uU(126," The "),e.TgZ(127,"code"),e._uU(128,"@SerializeOptions()"),e.qZA(),e._uU(129," decorator is imported from "),e.TgZ(130,"code"),e._uU(131,"@nestjs/common"),e.qZA(),e._uU(132,".\n"),e.qZA(),e.TgZ(133,"p"),e._uU(134,"Options passed via "),e.TgZ(135,"code"),e._uU(136,"@SerializeOptions()"),e.qZA(),e._uU(137," are passed as the second argument of the underlying "),e.TgZ(138,"code"),e._uU(139,"classToPlain()"),e.qZA(),e._uU(140," function. In this example, we are automatically excluding all properties that begin with the "),e.TgZ(141,"code"),e._uU(142,"_"),e.qZA(),e._uU(143," prefix."),e.qZA(),e.TgZ(144,"h4",17)(145,"span"),e._uU(146,"Example"),e.qZA()(),e.TgZ(147,"p"),e._uU(148,"A working example is available "),e.TgZ(149,"a",18),e._uU(150,"here"),e.qZA(),e._uU(151,"."),e.qZA(),e.TgZ(152,"h4",19)(153,"span"),e._uU(154,"WebSockets and Microservices"),e.qZA()(),e.TgZ(155,"p"),e._uU(156,"While this chapter shows examples using HTTP style applications (e.g., Express or Fastify), the "),e.TgZ(157,"code"),e._uU(158,"ClassSerializerInterceptor"),e.qZA(),e._uU(159," works the same for WebSockets and Microservices, regardless of the transport method that is used."),e.qZA(),e.TgZ(160,"h4",20)(161,"span"),e._uU(162,"Learn more"),e.qZA()(),e.TgZ(163,"p"),e._uU(164,"Read more about available decorators and options as provided by the "),e.TgZ(165,"code"),e._uU(166,"class-transformer"),e.qZA(),e._uU(167," package "),e.TgZ(168,"a",7),e._uU(169,"here"),e.qZA(),e._uU(170,"."),e.qZA()()),2&n&&(e.xp6(50),e.AsE("","{"," user: new UserEntity() ","}",""))},dependencies:[i.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"Serialization"}},{path:"caching",component:M,data:{title:"Caching"}},{path:"validation",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-validation"]],features:[e.qOj],decls:751,vars:8,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/validation.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","validation"],["rel","nofollow","target","_blank","href","https://github.com/typestack/class-validator"],["appAnchor","","id","overview"],["routerLink","/pipes"],["appAnchor","","id","using-the-built-in-validationpipe"],[1,"language-bash"],[1,"info"],["rel","nofollow","target","_blank","href","https://github.com/typestack/class-transformer"],[1,"language-typescript"],["appAnchor","","id","auto-validation"],["rel","nofollow","target","_blank","href","https://github.com/typestack/class-validator#validation-decorators"],[1,"language-json"],["appAnchor","","id","disable-detailed-errors"],["appAnchor","","id","stripping-properties"],["appAnchor","","id","transform-payload-objects"],[1,"filename"],["appd77bb3b10c0533fde784f1e72da218e7d5a3df45",""],["appAnchor","","id","explicit-conversion"],["appAnchor","","id","mapped-types"],[1,""],["routerLink","/openapi/mapped-types"],["routerLink","/graphql/mapped-types"],["appAnchor","","id","parsing-and-validating-arrays"],["appAnchor","","id","websockets-and-microservices"],["appAnchor","","id","learn-more"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Validation"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"It is best practice to validate the correctness of any data sent into a web application. To automatically validate incoming requests, Nest provides several pipes available right out-of-the-box:"),e.qZA(),e.TgZ(9,"ul")(10,"li")(11,"code"),e._uU(12,"ValidationPipe"),e.qZA()(),e.TgZ(13,"li")(14,"code"),e._uU(15,"ParseIntPipe"),e.qZA()(),e.TgZ(16,"li")(17,"code"),e._uU(18,"ParseBoolPipe"),e.qZA()(),e.TgZ(19,"li")(20,"code"),e._uU(21,"ParseArrayPipe"),e.qZA()(),e.TgZ(22,"li")(23,"code"),e._uU(24,"ParseUUIDPipe"),e.qZA()()(),e.TgZ(25,"p"),e._uU(26,"The "),e.TgZ(27,"code"),e._uU(28,"ValidationPipe"),e.qZA(),e._uU(29," makes use of the powerful "),e.TgZ(30,"a",6),e._uU(31,"class-validator"),e.qZA(),e._uU(32," package and its declarative validation decorators. The "),e.TgZ(33,"code"),e._uU(34,"ValidationPipe"),e.qZA(),e._uU(35," provides a convenient approach to enforce validation rules for all incoming client payloads, where the specific rules are declared with simple annotations in local class/DTO declarations in each module."),e.qZA(),e.TgZ(36,"h4",7)(37,"span"),e._uU(38,"Overview"),e.qZA()(),e.TgZ(39,"p"),e._uU(40,"In the "),e.TgZ(41,"a",8),e._uU(42,"Pipes"),e.qZA(),e._uU(43," chapter, we went through the process of building simple pipes and binding them to controllers, methods or to the global app to demonstrate how the process works. Be sure to review that chapter to best understand the topics of this chapter. Here, we'll focus on various "),e.TgZ(44,"strong"),e._uU(45,"real world"),e.qZA(),e._uU(46," use cases of the "),e.TgZ(47,"code"),e._uU(48,"ValidationPipe"),e.qZA(),e._uU(49,", and show how to use some of its advanced customization features."),e.qZA(),e.TgZ(50,"h4",9)(51,"span"),e._uU(52,"Using the built-in ValidationPipe"),e.qZA()(),e.TgZ(53,"p"),e._uU(54,"To begin using it, we first install the required dependency."),e.qZA(),e.TgZ(55,"pre")(56,"code",10),e._uU(57,"\n$ npm i --save class-validator class-transformer\n"),e.qZA()(),e.TgZ(58,"blockquote",11)(59,"strong"),e._uU(60,"Hint"),e.qZA(),e._uU(61," The "),e.TgZ(62,"code"),e._uU(63,"ValidationPipe"),e.qZA(),e._uU(64," is exported from the "),e.TgZ(65,"code"),e._uU(66,"@nestjs/common"),e.qZA(),e._uU(67," package.\n"),e.qZA(),e.TgZ(68,"p"),e._uU(69,"Because this pipe uses the "),e.TgZ(70,"a",6)(71,"code"),e._uU(72,"class-validator"),e.qZA()(),e._uU(73," and "),e.TgZ(74,"a",12)(75,"code"),e._uU(76,"class-transformer"),e.qZA()(),e._uU(77," libraries, there are many options available. You configure these settings via a configuration object passed to the pipe. Following are the built-in options:"),e.qZA(),e.TgZ(78,"pre")(79,"code",13),e._uU(80,"\nexport interface ValidationPipeOptions extends ValidatorOptions {\n  transform?: boolean;\n  disableErrorMessages?: boolean;\n  exceptionFactory?: (errors: ValidationError[]) => any;\n}\n"),e.qZA()(),e.TgZ(81,"p"),e._uU(82,"In addition to these, all "),e.TgZ(83,"code"),e._uU(84,"class-validator"),e.qZA(),e._uU(85," options (inherited from the "),e.TgZ(86,"code"),e._uU(87,"ValidatorOptions"),e.qZA(),e._uU(88," interface) are available:"),e.qZA(),e.TgZ(89,"table")(90,"tr")(91,"th"),e._uU(92,"Option"),e.qZA(),e.TgZ(93,"th"),e._uU(94,"Type"),e.qZA(),e.TgZ(95,"th"),e._uU(96,"Description"),e.qZA()(),e.TgZ(97,"tr")(98,"td")(99,"code"),e._uU(100,"enableDebugMessages"),e.qZA()(),e.TgZ(101,"td")(102,"code"),e._uU(103,"boolean"),e.qZA()(),e.TgZ(104,"td"),e._uU(105,"If set to true, validator will print extra warning messages to the console when something is not right."),e.qZA()(),e.TgZ(106,"tr")(107,"td")(108,"code"),e._uU(109,"skipUndefinedProperties"),e.qZA()(),e.TgZ(110,"td")(111,"code"),e._uU(112,"boolean"),e.qZA()(),e.TgZ(113,"td"),e._uU(114,"If set to true then validator will skip validation of all properties that are undefined in the validating object."),e.qZA()(),e.TgZ(115,"tr")(116,"td")(117,"code"),e._uU(118,"skipNullProperties"),e.qZA()(),e.TgZ(119,"td")(120,"code"),e._uU(121,"boolean"),e.qZA()(),e.TgZ(122,"td"),e._uU(123,"If set to true then validator will skip validation of all properties that are null in the validating object."),e.qZA()(),e.TgZ(124,"tr")(125,"td")(126,"code"),e._uU(127,"skipMissingProperties"),e.qZA()(),e.TgZ(128,"td")(129,"code"),e._uU(130,"boolean"),e.qZA()(),e.TgZ(131,"td"),e._uU(132,"If set to true then validator will skip validation of all properties that are null or undefined in the validating object."),e.qZA()(),e.TgZ(133,"tr")(134,"td")(135,"code"),e._uU(136,"whitelist"),e.qZA()(),e.TgZ(137,"td")(138,"code"),e._uU(139,"boolean"),e.qZA()(),e.TgZ(140,"td"),e._uU(141,"If set to true, validator will strip validated (returned) object of any properties that do not use any validation decorators."),e.qZA()(),e.TgZ(142,"tr")(143,"td")(144,"code"),e._uU(145,"forbidNonWhitelisted"),e.qZA()(),e.TgZ(146,"td")(147,"code"),e._uU(148,"boolean"),e.qZA()(),e.TgZ(149,"td"),e._uU(150,"If set to true, instead of stripping non-whitelisted properties validator will throw an exception."),e.qZA()(),e.TgZ(151,"tr")(152,"td")(153,"code"),e._uU(154,"forbidUnknownValues"),e.qZA()(),e.TgZ(155,"td")(156,"code"),e._uU(157,"boolean"),e.qZA()(),e.TgZ(158,"td"),e._uU(159,"If set to true, attempts to validate unknown objects fail immediately."),e.qZA()(),e.TgZ(160,"tr")(161,"td")(162,"code"),e._uU(163,"disableErrorMessages"),e.qZA()(),e.TgZ(164,"td")(165,"code"),e._uU(166,"boolean"),e.qZA()(),e.TgZ(167,"td"),e._uU(168,"If set to true, validation errors will not be returned to the client."),e.qZA()(),e.TgZ(169,"tr")(170,"td")(171,"code"),e._uU(172,"errorHttpStatusCode"),e.qZA()(),e.TgZ(173,"td")(174,"code"),e._uU(175,"number"),e.qZA()(),e.TgZ(176,"td"),e._uU(177,"This setting allows you to specify which exception type will be used in case of an error. By default it throws "),e.TgZ(178,"code"),e._uU(179,"BadRequestException"),e.qZA(),e._uU(180,"."),e.qZA()(),e.TgZ(181,"tr")(182,"td")(183,"code"),e._uU(184,"exceptionFactory"),e.qZA()(),e.TgZ(185,"td")(186,"code"),e._uU(187,"Function"),e.qZA()(),e.TgZ(188,"td"),e._uU(189,"Takes an array of the validation errors and returns an exception object to be thrown."),e.qZA()(),e.TgZ(190,"tr")(191,"td")(192,"code"),e._uU(193,"groups"),e.qZA()(),e.TgZ(194,"td")(195,"code"),e._uU(196,"string[]"),e.qZA()(),e.TgZ(197,"td"),e._uU(198,"Groups to be used during validation of the object."),e.qZA()(),e.TgZ(199,"tr")(200,"td")(201,"code"),e._uU(202,"always"),e.qZA()(),e.TgZ(203,"td")(204,"code"),e._uU(205,"boolean"),e.qZA()(),e.TgZ(206,"td"),e._uU(207,"Set default for "),e.TgZ(208,"code"),e._uU(209,"always"),e.qZA(),e._uU(210," option of decorators. Default can be overridden in decorator options"),e.qZA()(),e.TgZ(211,"tr")(212,"td")(213,"code"),e._uU(214,"strictGroups"),e.qZA()(),e.TgZ(215,"td")(216,"code"),e._uU(217,"boolean"),e.qZA()(),e.TgZ(218,"td"),e._uU(219,"If "),e.TgZ(220,"code"),e._uU(221,"groups"),e.qZA(),e._uU(222," is not given or is empty, ignore decorators with at least one group."),e.qZA()(),e.TgZ(223,"tr")(224,"td")(225,"code"),e._uU(226,"dismissDefaultMessages"),e.qZA()(),e.TgZ(227,"td")(228,"code"),e._uU(229,"boolean"),e.qZA()(),e.TgZ(230,"td"),e._uU(231,"If set to true, the validation will not use default messages. Error message always will be "),e.TgZ(232,"code"),e._uU(233,"undefined"),e.qZA(),e._uU(234," if its not explicitly set."),e.qZA()(),e.TgZ(235,"tr")(236,"td")(237,"code"),e._uU(238,"validationError.target"),e.qZA()(),e.TgZ(239,"td")(240,"code"),e._uU(241,"boolean"),e.qZA()(),e.TgZ(242,"td"),e._uU(243,"Indicates if target should be exposed in "),e.TgZ(244,"code"),e._uU(245,"ValidationError"),e.qZA(),e._uU(246,"."),e.qZA()(),e.TgZ(247,"tr")(248,"td")(249,"code"),e._uU(250,"validationError.value"),e.qZA()(),e.TgZ(251,"td")(252,"code"),e._uU(253,"boolean"),e.qZA()(),e.TgZ(254,"td"),e._uU(255,"Indicates if validated value should be exposed in "),e.TgZ(256,"code"),e._uU(257,"ValidationError"),e.qZA(),e._uU(258,"."),e.qZA()(),e.TgZ(259,"tr")(260,"td")(261,"code"),e._uU(262,"stopAtFirstError"),e.qZA()(),e.TgZ(263,"td")(264,"code"),e._uU(265,"boolean"),e.qZA()(),e.TgZ(266,"td"),e._uU(267,"When set to true, validation of the given property will stop after encountering the first error. Defaults to false."),e.qZA()()(),e.TgZ(268,"blockquote",11)(269,"strong"),e._uU(270,"Notice"),e.qZA(),e._uU(271," Find more information about the "),e.TgZ(272,"code"),e._uU(273,"class-validator"),e.qZA(),e._uU(274," package in its "),e.TgZ(275,"a",6),e._uU(276,"repository"),e.qZA(),e._uU(277,".\n"),e.qZA(),e.TgZ(278,"h4",14)(279,"span"),e._uU(280,"Auto-validation"),e.qZA()(),e.TgZ(281,"p"),e._uU(282,"We'll start by binding "),e.TgZ(283,"code"),e._uU(284,"ValidationPipe"),e.qZA(),e._uU(285," at the application level, thus ensuring all endpoints are protected from receiving incorrect data."),e.qZA(),e.TgZ(286,"pre")(287,"code",13),e._uU(288,"\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(3000);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(289,"p"),e._uU(290,"To test our pipe, let's create a basic endpoint."),e.qZA(),e.TgZ(291,"pre")(292,"code",13),e._uU(293,"\n@Post()\ncreate(@Body() createUserDto: CreateUserDto) {\n  return 'This action adds a new user';\n}\n"),e.qZA()(),e.TgZ(294,"blockquote",11)(295,"strong"),e._uU(296,"Hint"),e.qZA(),e._uU(297," Since TypeScript does not store metadata about "),e.TgZ(298,"strong"),e._uU(299,"generics or interfaces"),e.qZA(),e._uU(300,", when you use them in your DTOs, "),e.TgZ(301,"code"),e._uU(302,"ValidationPipe"),e.qZA(),e._uU(303," may not be able to properly validate incoming data. For this reason, consider using concrete classes in your DTOs.\n"),e.qZA(),e.TgZ(304,"blockquote",11)(305,"strong"),e._uU(306,"Hint"),e.qZA(),e._uU(307," When importing your DTOs, you can't use a type-only import as that would be erased at runtime, i.e. remember to "),e.TgZ(308,"code"),e._uU(309),e.qZA(),e._uU(310," instead of "),e.TgZ(311,"code"),e._uU(312),e.qZA(),e._uU(313,".\n"),e.qZA(),e.TgZ(314,"p"),e._uU(315,"Now we can add a few validation rules in our "),e.TgZ(316,"code"),e._uU(317,"CreateUserDto"),e.qZA(),e._uU(318,". We do this using decorators provided by the "),e.TgZ(319,"code"),e._uU(320,"class-validator"),e.qZA(),e._uU(321," package, described in detail "),e.TgZ(322,"a",15),e._uU(323,"here"),e.qZA(),e._uU(324,". In this fashion, any route that uses the "),e.TgZ(325,"code"),e._uU(326,"CreateUserDto"),e.qZA(),e._uU(327," will automatically enforce these validation rules."),e.qZA(),e.TgZ(328,"pre")(329,"code",13),e._uU(330,"\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n"),e.qZA()(),e.TgZ(331,"p"),e._uU(332,"With these rules in place, if a request hits our endpoint with an invalid "),e.TgZ(333,"code"),e._uU(334,"email"),e.qZA(),e._uU(335," property in the request body, the application will automatically respond with a "),e.TgZ(336,"code"),e._uU(337,"400 Bad Request"),e.qZA(),e._uU(338," code, along with the following response body:"),e.qZA(),e.TgZ(339,"pre")(340,"code",16),e._uU(341,'\n{\n  "statusCode": 400,\n  "error": "Bad Request",\n  "message": ["email must be an email"]\n}\n'),e.qZA()(),e.TgZ(342,"p"),e._uU(343,"In addition to validating request bodies, the "),e.TgZ(344,"code"),e._uU(345,"ValidationPipe"),e.qZA(),e._uU(346," can be used with other request object properties as well. Imagine that we would like to accept "),e.TgZ(347,"code"),e._uU(348,":id"),e.qZA(),e._uU(349," in the endpoint path. To ensure that only numbers are accepted for this request parameter, we can use the following construct:"),e.qZA(),e.TgZ(350,"pre")(351,"code",13),e._uU(352,"\n@Get(':id')\nfindOne(@Param() params: FindOneParams) {\n  return 'This action returns a user';\n}\n"),e.qZA()(),e.TgZ(353,"p")(354,"code"),e._uU(355,"FindOneParams"),e.qZA(),e._uU(356,", like a DTO, is simply a class that defines validation rules using "),e.TgZ(357,"code"),e._uU(358,"class-validator"),e.qZA(),e._uU(359,". It would look like this:"),e.qZA(),e.TgZ(360,"pre")(361,"code",13),e._uU(362,"\nimport { IsNumberString } from 'class-validator';\n\nexport class FindOneParams {\n  @IsNumberString()\n  id: number;\n}\n"),e.qZA()(),e.TgZ(363,"h4",17)(364,"span"),e._uU(365,"Disable detailed errors"),e.qZA()(),e.TgZ(366,"p"),e._uU(367,"Error messages can be helpful to explain what was incorrect in a request. However, some production environments prefer to disable detailed errors. Do this by passing an options object to the "),e.TgZ(368,"code"),e._uU(369,"ValidationPipe"),e.qZA(),e._uU(370,":"),e.qZA(),e.TgZ(371,"pre")(372,"code",13),e._uU(373,"\napp.useGlobalPipes(\n  new ValidationPipe({\n    disableErrorMessages: true,\n  }),\n);\n"),e.qZA()(),e.TgZ(374,"p"),e._uU(375,"As a result, detailed error messages won't be displayed in the response body."),e.qZA(),e.TgZ(376,"h4",18)(377,"span"),e._uU(378,"Stripping properties"),e.qZA()(),e.TgZ(379,"p"),e._uU(380,"Our "),e.TgZ(381,"code"),e._uU(382,"ValidationPipe"),e.qZA(),e._uU(383," can also filter out properties that should not be received by the method handler. In this case, we can "),e.TgZ(384,"strong"),e._uU(385,"whitelist"),e.qZA(),e._uU(386," the acceptable properties, and any property not included in the whitelist is automatically stripped from the resulting object. For example, if our handler expects "),e.TgZ(387,"code"),e._uU(388,"email"),e.qZA(),e._uU(389," and "),e.TgZ(390,"code"),e._uU(391,"password"),e.qZA(),e._uU(392," properties, but a request also includes an "),e.TgZ(393,"code"),e._uU(394,"age"),e.qZA(),e._uU(395," property, this property can be automatically removed from the resulting DTO. To enable such behavior, set "),e.TgZ(396,"code"),e._uU(397,"whitelist"),e.qZA(),e._uU(398," to "),e.TgZ(399,"code"),e._uU(400,"true"),e.qZA(),e._uU(401,"."),e.qZA(),e.TgZ(402,"pre")(403,"code",13),e._uU(404,"\napp.useGlobalPipes(\n  new ValidationPipe({\n    whitelist: true,\n  }),\n);\n"),e.qZA()(),e.TgZ(405,"p"),e._uU(406,"When set to true, this will automatically remove non-whitelisted properties (those without any decorator in the validation class)."),e.qZA(),e.TgZ(407,"p"),e._uU(408,"Alternatively, you can stop the request from processing when non-whitelisted properties are present, and return an error response to the user. To enable this, set the "),e.TgZ(409,"code"),e._uU(410,"forbidNonWhitelisted"),e.qZA(),e._uU(411," option property to "),e.TgZ(412,"code"),e._uU(413,"true"),e.qZA(),e._uU(414,", in combination with setting "),e.TgZ(415,"code"),e._uU(416,"whitelist"),e.qZA(),e._uU(417," to "),e.TgZ(418,"code"),e._uU(419,"true"),e.qZA(),e._uU(420,"."),e.qZA(),e.TgZ(421,"p"),e._UZ(422,"app-banner-courses"),e.qZA(),e.TgZ(423,"h4",19)(424,"span"),e._uU(425,"Transform payload objects"),e.qZA()(),e.TgZ(426,"p"),e._uU(427,"Payloads coming in over the network are plain JavaScript objects. The "),e.TgZ(428,"code"),e._uU(429,"ValidationPipe"),e.qZA(),e._uU(430," can automatically transform payloads to be objects typed according to their DTO classes. To enable auto-transformation, set "),e.TgZ(431,"code"),e._uU(432,"transform"),e.qZA(),e._uU(433," to "),e.TgZ(434,"code"),e._uU(435,"true"),e.qZA(),e._uU(436,". This can be done at a method level:"),e.qZA(),e.TgZ(437,"span",20),e._uU(438),e.ALo(439,"extension"),e._UZ(440,"app-tabs",null,21),e.qZA(),e.TgZ(442,"pre")(443,"code",13),e._uU(444,"\n@Post()\n@UsePipes(new ValidationPipe({ transform: true }))\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(445,"p"),e._uU(446,"To enable this behavior globally, set the option on a global pipe:"),e.qZA(),e.TgZ(447,"pre")(448,"code",13),e._uU(449,"\napp.useGlobalPipes(\n  new ValidationPipe({\n    transform: true,\n  }),\n);\n"),e.qZA()(),e.TgZ(450,"p"),e._uU(451,"With the auto-transformation option enabled, the "),e.TgZ(452,"code"),e._uU(453,"ValidationPipe"),e.qZA(),e._uU(454," will also perform conversion of primitive types. In the following example, the "),e.TgZ(455,"code"),e._uU(456,"findOne()"),e.qZA(),e._uU(457," method takes one argument which represents an extracted "),e.TgZ(458,"code"),e._uU(459,"id"),e.qZA(),e._uU(460," path parameter:"),e.qZA(),e.TgZ(461,"pre")(462,"code",13),e._uU(463,"\n@Get(':id')\nfindOne(@Param('id') id: number) {\n  console.log(typeof id === 'number'); // true\n  return 'This action returns a user';\n}\n"),e.qZA()(),e.TgZ(464,"p"),e._uU(465,"By default, every path parameter and query parameter comes over the network as a "),e.TgZ(466,"code"),e._uU(467,"string"),e.qZA(),e._uU(468,". In the above example, we specified the "),e.TgZ(469,"code"),e._uU(470,"id"),e.qZA(),e._uU(471," type as a "),e.TgZ(472,"code"),e._uU(473,"number"),e.qZA(),e._uU(474," (in the method signature). Therefore, the "),e.TgZ(475,"code"),e._uU(476,"ValidationPipe"),e.qZA(),e._uU(477," will try to automatically convert a string identifier to a number."),e.qZA(),e.TgZ(478,"h4",22)(479,"span"),e._uU(480,"Explicit conversion"),e.qZA()(),e.TgZ(481,"p"),e._uU(482,"In the above section, we showed how the "),e.TgZ(483,"code"),e._uU(484,"ValidationPipe"),e.qZA(),e._uU(485," can implicitly transform query and path parameters based on the expected type. However, this feature requires having auto-transformation enabled."),e.qZA(),e.TgZ(486,"p"),e._uU(487,"Alternatively (with auto-transformation disabled), you can explicitly cast values using the "),e.TgZ(488,"code"),e._uU(489,"ParseIntPipe"),e.qZA(),e._uU(490," or "),e.TgZ(491,"code"),e._uU(492,"ParseBoolPipe"),e.qZA(),e._uU(493," (note that "),e.TgZ(494,"code"),e._uU(495,"ParseStringPipe"),e.qZA(),e._uU(496," is not needed because, as mentioned earlier, every path parameter and query parameter comes over the network as a "),e.TgZ(497,"code"),e._uU(498,"string"),e.qZA(),e._uU(499," by default)."),e.qZA(),e.TgZ(500,"pre")(501,"code",13),e._uU(502,"\n@Get(':id')\nfindOne(\n  @Param('id', ParseIntPipe) id: number,\n  @Query('sort', ParseBoolPipe) sort: boolean,\n) {\n  console.log(typeof id === 'number'); // true\n  console.log(typeof sort === 'boolean'); // true\n  return 'This action returns a user';\n}\n"),e.qZA()(),e.TgZ(503,"blockquote",11)(504,"strong"),e._uU(505,"Hint"),e.qZA(),e._uU(506," The "),e.TgZ(507,"code"),e._uU(508,"ParseIntPipe"),e.qZA(),e._uU(509," and "),e.TgZ(510,"code"),e._uU(511,"ParseBoolPipe"),e.qZA(),e._uU(512," are exported from the "),e.TgZ(513,"code"),e._uU(514,"@nestjs/common"),e.qZA(),e._uU(515," package.\n"),e.qZA(),e.TgZ(516,"h4",23)(517,"span"),e._uU(518,"Mapped types"),e.qZA()(),e.TgZ(519,"p"),e._uU(520,"As you build out features like "),e.TgZ(521,"strong"),e._uU(522,"CRUD"),e.qZA(),e._uU(523," (Create/Read/Update/Delete) it's often useful to construct variants on a base entity type. Nest provides several utility functions that perform type transformations to make this task more convenient."),e.qZA(),e.TgZ(524,"blockquote",24)(525,"strong"),e._uU(526,"Warning"),e.qZA(),e._uU(527," If your application uses the "),e.TgZ(528,"code"),e._uU(529,"@nestjs/swagger"),e.qZA(),e._uU(530," package, see "),e.TgZ(531,"a",25),e._uU(532,"this chapter"),e.qZA(),e._uU(533," for more information about Mapped Types. Likewise, if you use the "),e.TgZ(534,"code"),e._uU(535,"@nestjs/graphql"),e.qZA(),e._uU(536," package see "),e.TgZ(537,"a",26),e._uU(538,"this chapter"),e.qZA(),e._uU(539,". Both packages heavily rely on types and so they require a different import to be used. Therefore, if you used "),e.TgZ(540,"code"),e._uU(541,"@nestjs/mapped-types"),e.qZA(),e._uU(542," (instead of an appropriate one, either "),e.TgZ(543,"code"),e._uU(544,"@nestjs/swagger"),e.qZA(),e._uU(545," or "),e.TgZ(546,"code"),e._uU(547,"@nestjs/graphql"),e.qZA(),e._uU(548," depending on the type of your app), you may face various, undocumented side-effects.\n"),e.qZA(),e.TgZ(549,"p"),e._uU(550,"When building input validation types (also called DTOs), it's often useful to build "),e.TgZ(551,"strong"),e._uU(552,"create"),e.qZA(),e._uU(553," and "),e.TgZ(554,"strong"),e._uU(555,"update"),e.qZA(),e._uU(556," variations on the same type. For example, the "),e.TgZ(557,"strong"),e._uU(558,"create"),e.qZA(),e._uU(559," variant may require all fields, while the "),e.TgZ(560,"strong"),e._uU(561,"update"),e.qZA(),e._uU(562," variant may make all fields optional."),e.qZA(),e.TgZ(563,"p"),e._uU(564,"Nest provides the "),e.TgZ(565,"code"),e._uU(566,"PartialType()"),e.qZA(),e._uU(567," utility function to make this task easier and minimize boilerplate."),e.qZA(),e.TgZ(568,"p"),e._uU(569,"The "),e.TgZ(570,"code"),e._uU(571,"PartialType()"),e.qZA(),e._uU(572," function returns a type (class) with all the properties of the input type set to optional. For example, suppose we have a "),e.TgZ(573,"strong"),e._uU(574,"create"),e.qZA(),e._uU(575," type as follows:"),e.qZA(),e.TgZ(576,"pre")(577,"code",13),e._uU(578,"\nexport class CreateCatDto {\n  name: string;\n  age: number;\n  breed: string;\n}\n"),e.qZA()(),e.TgZ(579,"p"),e._uU(580,"By default, all of these fields are required. To create a type with the same fields, but with each one optional, use "),e.TgZ(581,"code"),e._uU(582,"PartialType()"),e.qZA(),e._uU(583," passing the class reference ("),e.TgZ(584,"code"),e._uU(585,"CreateCatDto"),e.qZA(),e._uU(586,") as an argument:"),e.qZA(),e.TgZ(587,"pre")(588,"code",13),e._uU(589,"\nexport class UpdateCatDto extends PartialType(CreateCatDto) {}\n"),e.qZA()(),e.TgZ(590,"blockquote",11)(591,"strong"),e._uU(592,"Hint"),e.qZA(),e._uU(593," The "),e.TgZ(594,"code"),e._uU(595,"PartialType()"),e.qZA(),e._uU(596," function is imported from the "),e.TgZ(597,"code"),e._uU(598,"@nestjs/mapped-types"),e.qZA(),e._uU(599," package.\n"),e.qZA(),e.TgZ(600,"p"),e._uU(601,"The "),e.TgZ(602,"code"),e._uU(603,"PickType()"),e.qZA(),e._uU(604," function constructs a new type (class) by picking a set of properties from an input type. For example, suppose we start with a type like:"),e.qZA(),e.TgZ(605,"pre")(606,"code",13),e._uU(607,"\nexport class CreateCatDto {\n  name: string;\n  age: number;\n  breed: string;\n}\n"),e.qZA()(),e.TgZ(608,"p"),e._uU(609,"We can pick a set of properties from this class using the "),e.TgZ(610,"code"),e._uU(611,"PickType()"),e.qZA(),e._uU(612," utility function:"),e.qZA(),e.TgZ(613,"pre")(614,"code",13),e._uU(615,"\nexport class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {}\n"),e.qZA()(),e.TgZ(616,"blockquote",11)(617,"strong"),e._uU(618,"Hint"),e.qZA(),e._uU(619," The "),e.TgZ(620,"code"),e._uU(621,"PickType()"),e.qZA(),e._uU(622," function is imported from the "),e.TgZ(623,"code"),e._uU(624,"@nestjs/mapped-types"),e.qZA(),e._uU(625," package.\n"),e.qZA(),e.TgZ(626,"p"),e._uU(627,"The "),e.TgZ(628,"code"),e._uU(629,"OmitType()"),e.qZA(),e._uU(630," function constructs a type by picking all properties from an input type and then removing a particular set of keys. For example, suppose we start with a type like:"),e.qZA(),e.TgZ(631,"pre")(632,"code",13),e._uU(633,"\nexport class CreateCatDto {\n  name: string;\n  age: number;\n  breed: string;\n}\n"),e.qZA()(),e.TgZ(634,"p"),e._uU(635,"We can generate a derived type that has every property "),e.TgZ(636,"strong"),e._uU(637,"except"),e.qZA(),e.TgZ(638,"code"),e._uU(639,"name"),e.qZA(),e._uU(640," as shown below. In this construct, the second argument to "),e.TgZ(641,"code"),e._uU(642,"OmitType"),e.qZA(),e._uU(643," is an array of property names."),e.qZA(),e.TgZ(644,"pre")(645,"code",13),e._uU(646,"\nexport class UpdateCatDto extends OmitType(CreateCatDto, ['name'] as const) {}\n"),e.qZA()(),e.TgZ(647,"blockquote",11)(648,"strong"),e._uU(649,"Hint"),e.qZA(),e._uU(650," The "),e.TgZ(651,"code"),e._uU(652,"OmitType()"),e.qZA(),e._uU(653," function is imported from the "),e.TgZ(654,"code"),e._uU(655,"@nestjs/mapped-types"),e.qZA(),e._uU(656," package.\n"),e.qZA(),e.TgZ(657,"p"),e._uU(658,"The "),e.TgZ(659,"code"),e._uU(660,"IntersectionType()"),e.qZA(),e._uU(661," function combines two types into one new type (class). For example, suppose we start with two types like:"),e.qZA(),e.TgZ(662,"pre")(663,"code",13),e._uU(664,"\nexport class CreateCatDto {\n  name: string;\n  breed: string;\n}\n\nexport class AdditionalCatInfo {\n  color: string;\n}\n"),e.qZA()(),e.TgZ(665,"p"),e._uU(666,"We can generate a new type that combines all properties in both types."),e.qZA(),e.TgZ(667,"pre")(668,"code",13),e._uU(669,"\nexport class UpdateCatDto extends IntersectionType(\n  CreateCatDto,\n  AdditionalCatInfo,\n) {}\n"),e.qZA()(),e.TgZ(670,"blockquote",11)(671,"strong"),e._uU(672,"Hint"),e.qZA(),e._uU(673," The "),e.TgZ(674,"code"),e._uU(675,"IntersectionType()"),e.qZA(),e._uU(676," function is imported from the "),e.TgZ(677,"code"),e._uU(678,"@nestjs/mapped-types"),e.qZA(),e._uU(679," package.\n"),e.qZA(),e.TgZ(680,"p"),e._uU(681,"The type mapping utility functions are composable. For example, the following will produce a type (class) that has all of the properties of the "),e.TgZ(682,"code"),e._uU(683,"CreateCatDto"),e.qZA(),e._uU(684," type except for "),e.TgZ(685,"code"),e._uU(686,"name"),e.qZA(),e._uU(687,", and those properties will be set to optional:"),e.qZA(),e.TgZ(688,"pre")(689,"code",13),e._uU(690,"\nexport class UpdateCatDto extends PartialType(\n  OmitType(CreateCatDto, ['name'] as const),\n) {}\n"),e.qZA()(),e.TgZ(691,"h4",27)(692,"span"),e._uU(693,"Parsing and validating arrays"),e.qZA()(),e.TgZ(694,"p"),e._uU(695,"TypeScript does not store metadata about generics or interfaces, so when you use them in your DTOs, "),e.TgZ(696,"code"),e._uU(697,"ValidationPipe"),e.qZA(),e._uU(698," may not be able to properly validate incoming data. For instance, in the following code, "),e.TgZ(699,"code"),e._uU(700,"createUserDtos"),e.qZA(),e._uU(701," won't be correctly validated:"),e.qZA(),e.TgZ(702,"pre")(703,"code",13),e._uU(704,"\n@Post()\ncreateBulk(@Body() createUserDtos: CreateUserDto[]) {\n  return 'This action adds new users';\n}\n"),e.qZA()(),e.TgZ(705,"p"),e._uU(706,"To validate the array, create a dedicated class which contains a property that wraps the array, or use the "),e.TgZ(707,"code"),e._uU(708,"ParseArrayPipe"),e.qZA(),e._uU(709,"."),e.qZA(),e.TgZ(710,"pre")(711,"code",13),e._uU(712,"\n@Post()\ncreateBulk(\n  @Body(new ParseArrayPipe({ items: CreateUserDto }))\n  createUserDtos: CreateUserDto[],\n) {\n  return 'This action adds new users';\n}\n"),e.qZA()(),e.TgZ(713,"p"),e._uU(714,"In addition, the "),e.TgZ(715,"code"),e._uU(716,"ParseArrayPipe"),e.qZA(),e._uU(717," may come in handy when parsing query parameters. Let's consider a "),e.TgZ(718,"code"),e._uU(719,"findByIds()"),e.qZA(),e._uU(720," method that returns users based on identifiers passed as query parameters."),e.qZA(),e.TgZ(721,"pre")(722,"code",13),e._uU(723,"\n@Get()\nfindByIds(\n  @Query('ids', new ParseArrayPipe({ items: Number, separator: ',' }))\n  ids: number[],\n) {\n  return 'This action returns users by ids';\n}\n"),e.qZA()(),e.TgZ(724,"p"),e._uU(725,"This construction validates the incoming query parameters from an HTTP "),e.TgZ(726,"code"),e._uU(727,"GET"),e.qZA(),e._uU(728," request like the following:"),e.qZA(),e.TgZ(729,"pre")(730,"code",10),e._uU(731,"\nGET /?ids=1,2,3\n"),e.qZA()(),e.TgZ(732,"h4",28)(733,"span"),e._uU(734,"WebSockets and Microservices"),e.qZA()(),e.TgZ(735,"p"),e._uU(736,"While this chapter shows examples using HTTP style applications (e.g., Express or Fastify), the "),e.TgZ(737,"code"),e._uU(738,"ValidationPipe"),e.qZA(),e._uU(739," works the same for WebSockets and microservices, regardless of the transport method that is used."),e.qZA(),e.TgZ(740,"h4",29)(741,"span"),e._uU(742,"Learn more"),e.qZA()(),e.TgZ(743,"p"),e._uU(744,"Read more about custom validators, error messages, and available decorators as provided by the "),e.TgZ(745,"code"),e._uU(746,"class-validator"),e.qZA(),e._uU(747," package "),e.TgZ(748,"a",6),e._uU(749,"here"),e.qZA(),e._uU(750,"."),e.qZA()()),2&n){const a=e.MAs(441);e.xp6(309),e.AsE("import ","{"," CreateUserDto ","}",""),e.xp6(3),e.AsE("import type ","{"," CreateUserDto ","}",""),e.xp6(126),e.hij(" ",e.xi3(439,5,"cats.controller",a.isJsActive),"\n")}},dependencies:[p.n,i.U,y.f,h.yS,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"Validation"}},{path:"sql",redirectTo:"database"},{path:"database",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-sql"]],features:[e.qOj],decls:1476,vars:96,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/sql.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","database"],["rel","nofollow","target","_blank","href","https://expressjs.com/en/guide/database-integration.html"],["rel","nofollow","target","_blank","href","https://mikro-orm.io/"],["routerLink","/recipes/mikroorm"],["rel","nofollow","target","_blank","href","https://sequelize.org/"],["href","/techniques/database#sequelize-integration"],["rel","nofollow","target","_blank","href","https://knexjs.org/"],["rel","nofollow","target","_blank","href","https://dev.to/nestjs/build-a-nestjs-module-for-knex-js-or-other-resource-based-libraries-in-5-minutes-12an"],["rel","nofollow","target","_blank","href","https://github.com/typeorm/typeorm"],["rel","nofollow","target","_blank","href","https://www.github.com/prisma/prisma"],["routerLink","/recipes/prisma"],["routerLink","/techniques/mongodb"],["id","typeorm-integration"],["rel","nofollow","target","_blank","href","https://www.mysql.com/"],[1,"language-bash"],[1,"filename"],["app7172eff7693f2647430a895def6cd745fe5d52cb",""],[1,"language-typescript"],[1,"warning"],["rel","nofollow","target","_blank","href","https://typeorm.io/data-source-options#common-data-source-options"],[1,"info"],["rel","nofollow","target","_blank","href","https://typeorm.io/data-source-options"],["app413e2efdc46c957383e6da08901bf41e97341bc3",""],["appAnchor","","id","repository-pattern"],["appaf6a7a785c5ea8e65f55dfb343d164af2fa44db8",""],["rel","nofollow","target","_blank","href","https://typeorm.io/#/entities"],["appd18b8275a84583e37d24bf5845e0c2eec19404a1",""],["appf04a3532cf7648ede2bad77482c601a6550c8995",""],["app87ff5c809b1595c58cd067fd2fd33f34c449fa12",""],["app340d950ff2ccbee5e4972678bb7d02f552a982a6",""],["appc54bf50e20433e8feb5c85825f45e0ee8d343af2",""],["appAnchor","","id","relations"],["app3e62b95e86dc65e3d9f044ce24094abe533cbc89",""],["rel","nofollow","target","_blank","href","https://typeorm.io/#/relations"],["appAnchor","","id","auto-load-entities"],["app3602abe00c7aebf197a57a3fb7d7fb799d1c991d",""],["appAnchor","","id","separating-entity-definition"],["rel","nofollow","target","_blank","href","https://typeorm.io/#/separating-entity-definition"],[1,"warning","error"],["appAnchor","","id","transactions"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Database_transaction"],["rel","nofollow","target","_blank","href","https://typeorm.io/#/transactions"],["rel","nofollow","target","_blank","href","https://typeorm.io/#/transactions/creating-and-using-transactions"],["appAnchor","","id","subscribers"],["rel","nofollow","target","_blank","href","https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber"],[1,"error"],["routerLink","/fundamentals/injection-scopes"],["appAnchor","","id","migrations"],["rel","nofollow","target","_blank","href","https://typeorm.io/#/migrations"],["rel","nofollow","target","_blank","href","https://typeorm.io/#/migrations/creating-a-new-migration"],["appAnchor","","id","multiple-databases"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/typeorm/issues/86"],["appAnchor","","id","testing"],["routerLink","/fundamentals/custom-providers"],["appAnchor","","id","async-configuration"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/async-providers"],["appAnchor","","id","custom-datasource-factory"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm"],["id","sequelize-integration"],["rel","nofollow","target","_blank","href","https://github.com/RobinBuschmann/sequelize-typescript"],["app610d2fe855caa2ae123f6d391da3ae81778efb09",""],["rel","nofollow","target","_blank","href","https://sequelize.org/v5/manual/getting-started.html#setting-up-a-connection"],["appb0bd79831991cae593db9655975442ebea7b00a5",""],["appAnchor","","id","models"],["app80c7fcd702a10a6df3fa55a731c5b168b9121b84",""],["rel","nofollow","target","_blank","href","https://github.com/RobinBuschmann/sequelize-typescript#column"],["appc78f11be644764a21ac384eaa773141ee3536f87",""],["appa4cefb8151b80832582db7e6d661ca1e2e100234",""],["appd78334a80f505f0e9316bca3875c650e5e3619c3",""],["appa47f82f4d1aeb8ac5793ec322141388541f03a7a",""],["appf45e274406158a29f54293d3138b03b104f4b268",""],["appAnchor","","id","relations-1"],["app68533ce3e052455317a9bb6235fce9b8b3b7c559",""],["rel","nofollow","target","_blank","href","https://github.com/RobinBuschmann/sequelize-typescript#model-association"],["appAnchor","","id","auto-load-models"],["app59227fa53c5b6b3dade95d1cf0cbf30c620aec7e",""],["appAnchor","","id","transactions-1"],["rel","nofollow","target","_blank","href","https://sequelize.org/v5/manual/transactions.html"],["appAnchor","","id","migrations-1"],["rel","nofollow","target","_blank","href","https://sequelize.org/v5/manual/migrations.html"],["rel","nofollow","target","_blank","href","https://sequelize.org/v5/manual/migrations.html#the-cli"],["appAnchor","","id","multiple-databases-1"],["appAnchor","","id","testing-1"],["appAnchor","","id","async-configuration-1"],["appAnchor","","id","example-1"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/07-sequelize"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Database"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest is database agnostic, allowing you to easily integrate with any SQL or NoSQL database. You have a number of options available to you, depending on your preferences. At the most general level, connecting Nest to a database is simply a matter of loading an appropriate Node.js driver for the database, just as you would with "),e.TgZ(9,"a",6),e._uU(10,"Express"),e.qZA(),e._uU(11," or Fastify."),e.qZA(),e.TgZ(12,"p"),e._uU(13,"You can also directly use any general purpose Node.js database integration "),e.TgZ(14,"strong"),e._uU(15,"library"),e.qZA(),e._uU(16," or ORM, such as "),e.TgZ(17,"a",7),e._uU(18,"MikroORM"),e.qZA(),e._uU(19," also check the "),e.TgZ(20,"a",8),e._uU(21,"recipe here"),e.qZA(),e._uU(22,", "),e.TgZ(23,"a",9),e._uU(24,"Sequelize"),e.qZA(),e._uU(25," (navigate to the "),e.TgZ(26,"a",10),e._uU(27,"Sequelize integration"),e.qZA(),e._uU(28," section), "),e.TgZ(29,"a",11),e._uU(30,"Knex.js"),e.qZA(),e._uU(31," ("),e.TgZ(32,"a",12),e._uU(33,"tutorial"),e.qZA(),e._uU(34,"), "),e.TgZ(35,"a",13),e._uU(36,"TypeORM"),e.qZA(),e._uU(37,", and "),e.TgZ(38,"a",14),e._uU(39,"Prisma"),e.qZA(),e._uU(40," ("),e.TgZ(41,"a",15),e._uU(42,"recipe"),e.qZA(),e._uU(43,") , to operate at a higher level of abstraction."),e.qZA(),e.TgZ(44,"p"),e._uU(45,"For convenience, Nest provides tight integration with TypeORM and Sequelize out-of-the-box with the "),e.TgZ(46,"code"),e._uU(47,"@nestjs/typeorm"),e.qZA(),e._uU(48," and "),e.TgZ(49,"code"),e._uU(50,"@nestjs/sequelize"),e.qZA(),e._uU(51," packages respectively, which we'll cover in the current chapter, and Mongoose with "),e.TgZ(52,"code"),e._uU(53,"@nestjs/mongoose"),e.qZA(),e._uU(54,", which is covered in "),e.TgZ(55,"a",16),e._uU(56,"this chapter"),e.qZA(),e._uU(57,". These integrations provide additional NestJS-specific features, such as model/repository injection, testability, and asynchronous configuration to make accessing your chosen database even easier."),e.qZA(),e.TgZ(58,"h3",17),e._uU(59,"TypeORM Integration"),e.qZA(),e.TgZ(60,"p"),e._uU(61,"For integrating with SQL and NoSQL databases, Nest provides the "),e.TgZ(62,"code"),e._uU(63,"@nestjs/typeorm"),e.qZA(),e._uU(64," package. Nest uses "),e.TgZ(65,"a",13),e._uU(66,"TypeORM"),e.qZA(),e._uU(67," because it's the most mature Object Relational Mapper (ORM) available for TypeScript. Since it's written in TypeScript, it integrates well with the Nest framework."),e.qZA(),e.TgZ(68,"p"),e._uU(69,"To begin using it, we first install the required dependencies. In this chapter, we'll demonstrate using the popular "),e.TgZ(70,"a",18),e._uU(71,"MySQL"),e.qZA(),e._uU(72," Relational DBMS, but TypeORM provides support for many relational databases, such as PostgreSQL, Oracle, Microsoft SQL Server, SQLite, and even NoSQL databases like MongoDB. The procedure we walk through in this chapter will be the same for any database supported by TypeORM. You'll simply need to install the associated client API libraries for your selected database."),e.qZA(),e.TgZ(73,"pre")(74,"code",19),e._uU(75,"\n$ npm install --save @nestjs/typeorm typeorm mysql2\n"),e.qZA()(),e.TgZ(76,"p"),e._uU(77,"Once the installation process is complete, we can import the "),e.TgZ(78,"code"),e._uU(79,"TypeOrmModule"),e.qZA(),e._uU(80," into the root "),e.TgZ(81,"code"),e._uU(82,"AppModule"),e.qZA(),e._uU(83,"."),e.qZA(),e.TgZ(84,"span",20),e._uU(85),e.ALo(86,"extension"),e._UZ(87,"app-tabs",null,21),e.qZA(),e.TgZ(89,"pre")(90,"code",22),e._uU(91,"\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      entities: [],\n      synchronize: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(92,"blockquote",23)(93,"strong"),e._uU(94,"Warning"),e.qZA(),e._uU(95," Setting "),e.TgZ(96,"code"),e._uU(97,"synchronize: true"),e.qZA(),e._uU(98," shouldn't be used in production - otherwise you can lose production data.\n"),e.qZA(),e.TgZ(99,"p"),e._uU(100,"The "),e.TgZ(101,"code"),e._uU(102,"forRoot()"),e.qZA(),e._uU(103," method supports all the configuration properties exposed by the "),e.TgZ(104,"code"),e._uU(105,"DataSource"),e.qZA(),e._uU(106," constructor from the "),e.TgZ(107,"a",24),e._uU(108,"TypeORM"),e.qZA(),e._uU(109," package. In addition, there are several extra configuration properties described below."),e.qZA(),e.TgZ(110,"table")(111,"tr")(112,"td")(113,"code"),e._uU(114,"retryAttempts"),e.qZA()(),e.TgZ(115,"td"),e._uU(116,"Number of attempts to connect to the database (default: "),e.TgZ(117,"code"),e._uU(118,"10"),e.qZA(),e._uU(119,")"),e.qZA()(),e.TgZ(120,"tr")(121,"td")(122,"code"),e._uU(123,"retryDelay"),e.qZA()(),e.TgZ(124,"td"),e._uU(125,"Delay between connection retry attempts (ms) (default: "),e.TgZ(126,"code"),e._uU(127,"3000"),e.qZA(),e._uU(128,")"),e.qZA()(),e.TgZ(129,"tr")(130,"td")(131,"code"),e._uU(132,"autoLoadEntities"),e.qZA()(),e.TgZ(133,"td"),e._uU(134,"If "),e.TgZ(135,"code"),e._uU(136,"true"),e.qZA(),e._uU(137,", entities will be loaded automatically (default: "),e.TgZ(138,"code"),e._uU(139,"false"),e.qZA(),e._uU(140,")"),e.qZA()()(),e.TgZ(141,"blockquote",25)(142,"strong"),e._uU(143,"Hint"),e.qZA(),e._uU(144," Learn more about the data source options "),e.TgZ(145,"a",26),e._uU(146,"here"),e.qZA(),e._uU(147,".\n"),e.qZA(),e.TgZ(148,"p"),e._uU(149,"Once this is done, the TypeORM "),e.TgZ(150,"code"),e._uU(151,"DataSource"),e.qZA(),e._uU(152," and "),e.TgZ(153,"code"),e._uU(154,"EntityManager"),e.qZA(),e._uU(155," objects will be available to inject across the entire project (without needing to import any modules), for example:"),e.qZA(),e.TgZ(156,"span",20),e._uU(157),e.ALo(158,"extension"),e._UZ(159,"app-tabs",null,27),e.qZA(),e.TgZ(161,"pre")(162,"code",22),e._uU(163,"\nimport { DataSource } from 'typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forRoot(), UsersModule],\n})\nexport class AppModule {\n  constructor(private dataSource: DataSource) {}\n}\n"),e.qZA()(),e.TgZ(164,"pre")(165,"code",22),e._uU(166,"\nimport { DataSource } from 'typeorm';\n\n@Dependencies(DataSource)\n@Module({\n  imports: [TypeOrmModule.forRoot(), UsersModule],\n})\nexport class AppModule {\n  constructor(dataSource) {\n    this.dataSource = dataSource;\n  }\n}\n"),e.qZA()(),e.TgZ(167,"h4",28)(168,"span"),e._uU(169,"Repository pattern"),e.qZA()(),e.TgZ(170,"p")(171,"a",13),e._uU(172,"TypeORM"),e.qZA(),e._uU(173," supports the "),e.TgZ(174,"strong"),e._uU(175,"repository design pattern"),e.qZA(),e._uU(176,", so each entity has its own repository. These repositories can be obtained from the database data source."),e.qZA(),e.TgZ(177,"p"),e._uU(178,"To continue the example, we need at least one entity. Let's define the "),e.TgZ(179,"code"),e._uU(180,"User"),e.qZA(),e._uU(181," entity."),e.qZA(),e.TgZ(182,"span",20),e._uU(183),e.ALo(184,"extension"),e._UZ(185,"app-tabs",null,29),e.qZA(),e.TgZ(187,"pre")(188,"code",22),e._uU(189,"\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n}\n"),e.qZA()(),e.TgZ(190,"blockquote",25)(191,"strong"),e._uU(192,"Hint"),e.qZA(),e._uU(193," Learn more about entities\xa0in the "),e.TgZ(194,"a",30),e._uU(195,"TypeORM documentation"),e.qZA(),e._uU(196,".\n"),e.qZA(),e.TgZ(197,"p"),e._uU(198,"The "),e.TgZ(199,"code"),e._uU(200,"User"),e.qZA(),e._uU(201," entity file sits in the "),e.TgZ(202,"code"),e._uU(203,"users"),e.qZA(),e._uU(204," directory. This directory contains all files related to the "),e.TgZ(205,"code"),e._uU(206,"UsersModule"),e.qZA(),e._uU(207,". You can decide where to keep your model files, however, we recommend creating them near their "),e.TgZ(208,"strong"),e._uU(209,"domain"),e.qZA(),e._uU(210,", in the corresponding module directory."),e.qZA(),e.TgZ(211,"p"),e._uU(212,"To begin using the "),e.TgZ(213,"code"),e._uU(214,"User"),e.qZA(),e._uU(215," entity, we need to let TypeORM know about it by inserting it into the "),e.TgZ(216,"code"),e._uU(217,"entities"),e.qZA(),e._uU(218," array in the module "),e.TgZ(219,"code"),e._uU(220,"forRoot()"),e.qZA(),e._uU(221," method options (unless you use a static glob path):"),e.qZA(),e.TgZ(222,"span",20),e._uU(223),e.ALo(224,"extension"),e._UZ(225,"app-tabs",null,31),e.qZA(),e.TgZ(227,"pre")(228,"code",22),e._uU(229,"\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      entities: [User],\n      synchronize: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(230,"p"),e._uU(231,"Next, let's look at the "),e.TgZ(232,"code"),e._uU(233,"UsersModule"),e.qZA(),e._uU(234,":"),e.qZA(),e.TgZ(235,"span",20),e._uU(236),e.ALo(237,"extension"),e._UZ(238,"app-tabs",null,32),e.qZA(),e.TgZ(240,"pre")(241,"code",22),e._uU(242,"\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(243,"p"),e._uU(244,"This module uses the "),e.TgZ(245,"code"),e._uU(246,"forFeature()"),e.qZA(),e._uU(247," method to define which repositories are registered in the current scope. With that in place, we can inject the "),e.TgZ(248,"code"),e._uU(249,"UsersRepository"),e.qZA(),e._uU(250," into the "),e.TgZ(251,"code"),e._uU(252,"UsersService"),e.qZA(),e._uU(253," using the "),e.TgZ(254,"code"),e._uU(255,"@InjectRepository()"),e.qZA(),e._uU(256," decorator:"),e.qZA(),e.TgZ(257,"span",20),e._uU(258),e.ALo(259,"extension"),e._UZ(260,"app-tabs",null,33),e.qZA(),e.TgZ(262,"pre")(263,"code",22),e._uU(264,"\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository<User>,\n  ) {}\n\n  findAll(): Promise<User[]> {\n    return this.usersRepository.find();\n  }\n\n  findOne(id: string): Promise<User> {\n    return this.usersRepository.findOneBy({ id });\n  }\n\n  async remove(id: string): Promise<void> {\n    await this.usersRepository.delete(id);\n  }\n}\n"),e.qZA()(),e.TgZ(265,"pre")(266,"code",22),e._uU(267,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\n@Dependencies(getRepositoryToken(User))\nexport class UsersService {\n  constructor(usersRepository) {\n    this.usersRepository = usersRepository;\n  }\n\n  findAll() {\n    return this.usersRepository.find();\n  }\n\n  findOne(id) {\n    return this.usersRepository.findOneBy({ id });\n  }\n\n  async remove(id) {\n    await this.usersRepository.delete(id);\n  }\n}\n"),e.qZA()(),e.TgZ(268,"blockquote",23)(269,"strong"),e._uU(270,"Notice"),e.qZA(),e._uU(271," Don't forget to import the "),e.TgZ(272,"code"),e._uU(273,"UsersModule"),e.qZA(),e._uU(274," into the root "),e.TgZ(275,"code"),e._uU(276,"AppModule"),e.qZA(),e._uU(277,".\n"),e.qZA(),e.TgZ(278,"p"),e._uU(279,"If you want to use the repository outside of the module which imports "),e.TgZ(280,"code"),e._uU(281,"TypeOrmModule.forFeature"),e.qZA(),e._uU(282,", you'll need to re-export the providers generated by it.\nYou can do this by exporting the whole module, like this:"),e.qZA(),e.TgZ(283,"span",20),e._uU(284),e.ALo(285,"extension"),e._UZ(286,"app-tabs",null,34),e.qZA(),e.TgZ(288,"pre")(289,"code",22),e._uU(290,"\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule]\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(291,"p"),e._uU(292,"Now if we import "),e.TgZ(293,"code"),e._uU(294,"UsersModule"),e.qZA(),e._uU(295," in "),e.TgZ(296,"code"),e._uU(297,"UserHttpModule"),e.qZA(),e._uU(298,", we can use "),e.TgZ(299,"code"),e._uU(300,"@InjectRepository(User)"),e.qZA(),e._uU(301," in the providers of the latter module."),e.qZA(),e.TgZ(302,"span",20),e._uU(303),e.ALo(304,"extension"),e._UZ(305,"app-tabs",null,35),e.qZA(),e.TgZ(307,"pre")(308,"code",22),e._uU(309,"\nimport { Module } from '@nestjs/common';\nimport { UsersModule } from './users.module';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  imports: [UsersModule],\n  providers: [UsersService],\n  controllers: [UsersController]\n})\nexport class UserHttpModule {}\n"),e.qZA()(),e.TgZ(310,"h4",36)(311,"span"),e._uU(312,"Relations"),e.qZA()(),e.TgZ(313,"p"),e._uU(314,"Relations are associations established between two or more tables. Relations are based on common fields from each table, often involving primary and foreign keys."),e.qZA(),e.TgZ(315,"p"),e._uU(316,"There are three types of relations:"),e.qZA(),e.TgZ(317,"table")(318,"tr")(319,"td")(320,"code"),e._uU(321,"One-to-one"),e.qZA()(),e.TgZ(322,"td"),e._uU(323,"Every row in the primary table has one and only one associated row in the foreign table. Use the "),e.TgZ(324,"code"),e._uU(325,"@OneToOne()"),e.qZA(),e._uU(326," decorator to define this type of relation."),e.qZA()(),e.TgZ(327,"tr")(328,"td")(329,"code"),e._uU(330,"One-to-many / Many-to-one"),e.qZA()(),e.TgZ(331,"td"),e._uU(332,"Every row in the primary table has one or more related rows in the foreign table. Use the "),e.TgZ(333,"code"),e._uU(334,"@OneToMany()"),e.qZA(),e._uU(335," and "),e.TgZ(336,"code"),e._uU(337,"@ManyToOne()"),e.qZA(),e._uU(338," decorators to define this type of relation."),e.qZA()(),e.TgZ(339,"tr")(340,"td")(341,"code"),e._uU(342,"Many-to-many"),e.qZA()(),e.TgZ(343,"td"),e._uU(344,"Every row in the primary table has many related rows in the foreign table, and every record in the foreign table has many related rows in the primary table. Use the "),e.TgZ(345,"code"),e._uU(346,"@ManyToMany()"),e.qZA(),e._uU(347," decorator to define this type of relation."),e.qZA()()(),e.TgZ(348,"p"),e._uU(349,"To define relations in entities, use the corresponding "),e.TgZ(350,"strong"),e._uU(351,"decorators"),e.qZA(),e._uU(352,". For example, to define that each "),e.TgZ(353,"code"),e._uU(354,"User"),e.qZA(),e._uU(355," can have multiple photos, use the "),e.TgZ(356,"code"),e._uU(357,"@OneToMany()"),e.qZA(),e._uU(358," decorator."),e.qZA(),e.TgZ(359,"span",20),e._uU(360),e.ALo(361,"extension"),e._UZ(362,"app-tabs",null,37),e.qZA(),e.TgZ(364,"pre")(365,"code",22),e._uU(366,"\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { Photo } from '../photos/photo.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @OneToMany(type => Photo, photo => photo.user)\n  photos: Photo[];\n}\n"),e.qZA()(),e.TgZ(367,"blockquote",25)(368,"strong"),e._uU(369,"Hint"),e.qZA(),e._uU(370," To learn more about relations in TypeORM, visit the "),e.TgZ(371,"a",38),e._uU(372,"TypeORM documentation"),e.qZA(),e._uU(373,".\n"),e.qZA(),e.TgZ(374,"h4",39)(375,"span"),e._uU(376,"Auto-load entities"),e.qZA()(),e.TgZ(377,"p"),e._uU(378,"Manually adding entities to the "),e.TgZ(379,"code"),e._uU(380,"entities"),e.qZA(),e._uU(381," array of the data source options can be tedious. In addition, referencing entities from the root module breaks application domain boundaries and causes leaking implementation details to other parts of the application. To address this issue, an alternative solution is provided. To automatically load entities, set the "),e.TgZ(382,"code"),e._uU(383,"autoLoadEntities"),e.qZA(),e._uU(384," property of the configuration object (passed into the "),e.TgZ(385,"code"),e._uU(386,"forRoot()"),e.qZA(),e._uU(387," method) to "),e.TgZ(388,"code"),e._uU(389,"true"),e.qZA(),e._uU(390,", as shown below:"),e.qZA(),e.TgZ(391,"span",20),e._uU(392),e.ALo(393,"extension"),e._UZ(394,"app-tabs",null,40),e.qZA(),e.TgZ(396,"pre")(397,"code",22),e._uU(398,"\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...\n      autoLoadEntities: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(399,"p"),e._uU(400,"With that option specified, every entity registered through the "),e.TgZ(401,"code"),e._uU(402,"forFeature()"),e.qZA(),e._uU(403," method will be automatically added to the "),e.TgZ(404,"code"),e._uU(405,"entities"),e.qZA(),e._uU(406," array of the configuration object."),e.qZA(),e.TgZ(407,"blockquote",23)(408,"strong"),e._uU(409,"Warning"),e.qZA(),e._uU(410," Note that entities that aren't registered through the "),e.TgZ(411,"code"),e._uU(412,"forFeature()"),e.qZA(),e._uU(413," method, but are only referenced from the entity (via a relationship), won't be included by way of the "),e.TgZ(414,"code"),e._uU(415,"autoLoadEntities"),e.qZA(),e._uU(416," setting.\n"),e.qZA(),e.TgZ(417,"h4",41)(418,"span"),e._uU(419,"Separating entity definition"),e.qZA()(),e.TgZ(420,"p"),e._uU(421,"You can define an entity and its columns right in the model, using decorators. But some people prefer to define entities and their columns inside separate files using the "),e.TgZ(422,"a",42),e._uU(423,'"entity schemas"'),e.qZA(),e._uU(424,"."),e.qZA(),e.TgZ(425,"pre")(426,"code",22),e._uU(427,"\nimport { EntitySchema } from 'typeorm';\nimport { User } from './user.entity';\n\nexport const UserSchema = new EntitySchema<User>({\n  name: 'User',\n  target: User,\n  columns: {\n    id: {\n      type: Number,\n      primary: true,\n      generated: true,\n    },\n    firstName: {\n      type: String,\n    },\n    lastName: {\n      type: String,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  relations: {\n    photos: {\n      type: 'one-to-many',\n      target: 'Photo', // the name of the PhotoSchema\n    },\n  },\n});\n"),e.qZA()(),e.TgZ(428,"blockquote",43)(429,"strong"),e._uU(430,"Warning"),e.qZA(),e._uU(431," If you provide the "),e.TgZ(432,"code"),e._uU(433,"target"),e.qZA(),e._uU(434," option, the "),e.TgZ(435,"code"),e._uU(436,"name"),e.qZA(),e._uU(437," option value has to be the same as the name of the target class.\nIf you do not provide the "),e.TgZ(438,"code"),e._uU(439,"target"),e.qZA(),e._uU(440," you can use any name.\n"),e.qZA(),e.TgZ(441,"p"),e._uU(442,"Nest allows you to use an "),e.TgZ(443,"code"),e._uU(444,"EntitySchema"),e.qZA(),e._uU(445," instance wherever an "),e.TgZ(446,"code"),e._uU(447,"Entity"),e.qZA(),e._uU(448," is expected, for example:"),e.qZA(),e.TgZ(449,"pre")(450,"code",22),e._uU(451,"\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserSchema } from './user.schema';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserSchema])],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(452,"h4",44)(453,"span"),e._uU(454,"Transactions"),e.qZA()(),e.TgZ(455,"p"),e._uU(456,"A database transaction symbolizes a unit of work performed within a database management system against a database, and treated in a coherent and reliable way independent of other transactions. A transaction generally represents any change in a database ("),e.TgZ(457,"a",45),e._uU(458,"learn more"),e.qZA(),e._uU(459,")."),e.qZA(),e.TgZ(460,"p"),e._uU(461,"There are many different strategies to handle "),e.TgZ(462,"a",46),e._uU(463,"TypeORM transactions"),e.qZA(),e._uU(464,". We recommend using the "),e.TgZ(465,"code"),e._uU(466,"QueryRunner"),e.qZA(),e._uU(467," class because it gives full control over the transaction."),e.qZA(),e.TgZ(468,"p"),e._uU(469,"First, we need to inject the "),e.TgZ(470,"code"),e._uU(471,"DataSource"),e.qZA(),e._uU(472," object into a class in the normal way:"),e.qZA(),e.TgZ(473,"pre")(474,"code",22),e._uU(475,"\n@Injectable()\nexport class UsersService {\n  constructor(private dataSource: DataSource) {}\n}\n"),e.qZA()(),e.TgZ(476,"blockquote",25)(477,"strong"),e._uU(478,"Hint"),e.qZA(),e._uU(479," The "),e.TgZ(480,"code"),e._uU(481,"DataSource"),e.qZA(),e._uU(482," class is imported from the "),e.TgZ(483,"code"),e._uU(484,"typeorm"),e.qZA(),e._uU(485," package.\n"),e.qZA(),e.TgZ(486,"p"),e._uU(487,"Now, we can use this object to create a transaction."),e.qZA(),e.TgZ(488,"pre")(489,"code",22),e._uU(490,"\nasync createMany(users: User[]) {\n  const queryRunner = this.dataSource.createQueryRunner();\n\n  await queryRunner.connect();\n  await queryRunner.startTransaction();\n  try {\n    await queryRunner.manager.save(users[0]);\n    await queryRunner.manager.save(users[1]);\n\n    await queryRunner.commitTransaction();\n  } catch (err) {\n    // since we have errors lets rollback the changes we made\n    await queryRunner.rollbackTransaction();\n  } finally {\n    // you need to release a queryRunner which was manually instantiated\n    await queryRunner.release();\n  }\n}\n"),e.qZA()(),e.TgZ(491,"blockquote",25)(492,"strong"),e._uU(493,"Hint"),e.qZA(),e._uU(494," Note that the "),e.TgZ(495,"code"),e._uU(496,"dataSource"),e.qZA(),e._uU(497," is used only to create the "),e.TgZ(498,"code"),e._uU(499,"QueryRunner"),e.qZA(),e._uU(500,". However, to test this class would require mocking the entire "),e.TgZ(501,"code"),e._uU(502,"DataSource"),e.qZA(),e._uU(503," object (which exposes several methods). Thus, we recommend using a helper factory class (e.g., "),e.TgZ(504,"code"),e._uU(505,"QueryRunnerFactory"),e.qZA(),e._uU(506,") and defining an interface with a limited set of methods required to maintain transactions. This technique makes mocking these methods pretty straightforward.\n"),e.qZA(),e.TgZ(507,"p"),e._uU(508,"Alternatively, you can use the callback-style approach with the "),e.TgZ(509,"code"),e._uU(510,"transaction"),e.qZA(),e._uU(511," method of the "),e.TgZ(512,"code"),e._uU(513,"DataSource"),e.qZA(),e._uU(514," object ("),e.TgZ(515,"a",47),e._uU(516,"read more"),e.qZA(),e._uU(517,")."),e.qZA(),e.TgZ(518,"pre")(519,"code",22),e._uU(520,"\nasync createMany(users: User[]) {\n  await this.dataSource.transaction(async manager => {\n    await manager.save(users[0]);\n    await manager.save(users[1]);\n  });\n}\n"),e.qZA()(),e.TgZ(521,"p"),e._uU(522,"Using decorators to control the transaction ("),e.TgZ(523,"code"),e._uU(524,"@Transaction()"),e.qZA(),e._uU(525," and "),e.TgZ(526,"code"),e._uU(527,"@TransactionManager()"),e.qZA(),e._uU(528,") is not recommended."),e.qZA(),e.TgZ(529,"p"),e._UZ(530,"app-banner-shop"),e.qZA(),e.TgZ(531,"h4",48)(532,"span"),e._uU(533,"Subscribers"),e.qZA()(),e.TgZ(534,"p"),e._uU(535,"With TypeORM "),e.TgZ(536,"a",49),e._uU(537,"subscribers"),e.qZA(),e._uU(538,", you can listen to specific entity events."),e.qZA(),e.TgZ(539,"pre")(540,"code",22),e._uU(541,"\nimport {\n  DataSource,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n} from 'typeorm';\nimport { User } from './user.entity';\n\n@EventSubscriber()\nexport class UserSubscriber implements EntitySubscriberInterface<User> {\n  constructor(dataSource: DataSource) {\n    dataSource.subscribers.push(this);\n  }\n\n  listenTo() {\n    return User;\n  }\n\n  beforeInsert(event: InsertEvent<User>) {\n    console.log(`BEFORE USER INSERTED: `, event.entity);\n  }\n}\n"),e.qZA()(),e.TgZ(542,"blockquote",50)(543,"strong"),e._uU(544,"Warning"),e.qZA(),e._uU(545," Event subscribers can not be "),e.TgZ(546,"a",51),e._uU(547,"request-scoped"),e.qZA(),e._uU(548,".\n"),e.qZA(),e.TgZ(549,"p"),e._uU(550,"Now, add the "),e.TgZ(551,"code"),e._uU(552,"UserSubscriber"),e.qZA(),e._uU(553," class to the "),e.TgZ(554,"code"),e._uU(555,"providers"),e.qZA(),e._uU(556," array:"),e.qZA(),e.TgZ(557,"pre")(558,"code",22),e._uU(559,"\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { UserSubscriber } from './user.subscriber';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService, UserSubscriber],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(560,"blockquote",25)(561,"strong"),e._uU(562,"Hint"),e.qZA(),e._uU(563," Learn more about entity subscribers "),e.TgZ(564,"a",49),e._uU(565,"here"),e.qZA(),e._uU(566,".\n"),e.qZA(),e.TgZ(567,"h4",52)(568,"span"),e._uU(569,"Migrations"),e.qZA()(),e.TgZ(570,"p")(571,"a",53),e._uU(572,"Migrations"),e.qZA(),e._uU(573," provide a way to incrementally update the database schema to keep it in sync with the application's data model while preserving existing data in the database. To generate, run, and revert migrations, TypeORM provides a dedicated "),e.TgZ(574,"a",54),e._uU(575,"CLI"),e.qZA(),e._uU(576,"."),e.qZA(),e.TgZ(577,"p"),e._uU(578,"Migration classes are separate from the Nest application source code. Their lifecycle is maintained by the TypeORM CLI. Therefore, you are not able to leverage dependency injection and other Nest specific features with migrations. To learn more about migrations, follow the guide in the "),e.TgZ(579,"a",54),e._uU(580,"TypeORM documentation"),e.qZA(),e._uU(581,"."),e.qZA(),e.TgZ(582,"h4",55)(583,"span"),e._uU(584,"Multiple databases"),e.qZA()(),e.TgZ(585,"p"),e._uU(586,"Some projects require multiple database connections. This can also be achieved with this module. To work with multiple connections, first create the connections. In this case, data source naming becomes "),e.TgZ(587,"strong"),e._uU(588,"mandatory"),e.qZA(),e._uU(589,"."),e.qZA(),e.TgZ(590,"p"),e._uU(591,"Suppose you have an "),e.TgZ(592,"code"),e._uU(593,"Album"),e.qZA(),e._uU(594," entity stored in its own database."),e.qZA(),e.TgZ(595,"pre")(596,"code",22),e._uU(597,"\nconst defaultOptions = {\n  type: 'postgres',\n  port: 5432,\n  username: 'user',\n  password: 'password',\n  database: 'db',\n  synchronize: true,\n};\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...defaultOptions,\n      host: 'user_db_host',\n      entities: [User],\n    }),\n    TypeOrmModule.forRoot({\n      ...defaultOptions,\n      name: 'albumsConnection',\n      host: 'album_db_host',\n      entities: [Album],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(598,"blockquote",23)(599,"strong"),e._uU(600,"Notice"),e.qZA(),e._uU(601," If you don't set the "),e.TgZ(602,"code"),e._uU(603,"name"),e.qZA(),e._uU(604," for a data source, its name is set to "),e.TgZ(605,"code"),e._uU(606,"default"),e.qZA(),e._uU(607,". Please note that you shouldn't have multiple connections without a name, or with the same name, otherwise they will get overridden.\n"),e.qZA(),e.TgZ(608,"blockquote",23)(609,"strong"),e._uU(610,"Notice"),e.qZA(),e._uU(611," If you are using "),e.TgZ(612,"code"),e._uU(613,"TypeOrmModule.forRootAsync"),e.qZA(),e._uU(614,", you have to set the data source name outside "),e.TgZ(615,"code"),e._uU(616,"useFactory"),e.qZA(),e._uU(617,". For example:\n"),e.TgZ(618,"pre")(619,"code",22),e._uU(620,"\nTypeOrmModule.forRootAsync({\n  name: 'albumsConnection',\n  useFactory: ...,\n  inject: ...,\n}),\n"),e.qZA()(),e.TgZ(621,"p"),e._uU(622,"See "),e.TgZ(623,"a",56),e._uU(624,"this issue"),e.qZA(),e._uU(625," for more details."),e.qZA()(),e.TgZ(626,"p"),e._uU(627,"At this point, you have "),e.TgZ(628,"code"),e._uU(629,"User"),e.qZA(),e._uU(630," and "),e.TgZ(631,"code"),e._uU(632,"Album"),e.qZA(),e._uU(633," entities registered with their own data source. With this setup, you have to tell the "),e.TgZ(634,"code"),e._uU(635,"TypeOrmModule.forFeature()"),e.qZA(),e._uU(636," method and the "),e.TgZ(637,"code"),e._uU(638,"@InjectRepository()"),e.qZA(),e._uU(639," decorator which data source should be used. If you do not pass any data source name, the "),e.TgZ(640,"code"),e._uU(641,"default"),e.qZA(),e._uU(642," data source is used."),e.qZA(),e.TgZ(643,"pre")(644,"code",22),e._uU(645,"\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    TypeOrmModule.forFeature([Album], 'albumsConnection'),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(646,"p"),e._uU(647,"You can also inject the "),e.TgZ(648,"code"),e._uU(649,"DataSource"),e.qZA(),e._uU(650," or "),e.TgZ(651,"code"),e._uU(652,"EntityManager"),e.qZA(),e._uU(653," for a given data source:"),e.qZA(),e.TgZ(654,"pre")(655,"code",22),e._uU(656,"\n@Injectable()\nexport class AlbumsService {\n  constructor(\n    @InjectConnection('albumsConnection')\n    private dataSource: DataSource,\n    @InjectEntityManager('albumsConnection')\n    private entityManager: EntityManager,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(657,"p"),e._uU(658,"It's also possible to inject any "),e.TgZ(659,"code"),e._uU(660,"DataSource"),e.qZA(),e._uU(661," to the providers:"),e.qZA(),e.TgZ(662,"pre")(663,"code",22),e._uU(664,"\n@Module({\n  providers: [\n    {\n      provide: AlbumsService,\n      useFactory: (albumsConnection: DataSource) => {\n        return new AlbumsService(albumsConnection);\n      },\n      inject: [getDataSourceToken('albumsConnection')],\n    },\n  ],\n})\nexport class AlbumsModule {}\n"),e.qZA()(),e.TgZ(665,"h4",57)(666,"span"),e._uU(667,"Testing"),e.qZA()(),e.TgZ(668,"p"),e._uU(669,"When it comes to unit testing an application, we usually want to avoid making a database connection, keeping our test suites independent and their execution process as fast as possible. But our classes might depend on repositories that are pulled from the data source (connection) instance. How do we handle that? The solution is to create mock repositories. In order to achieve that, we set up "),e.TgZ(670,"a",58),e._uU(671,"custom providers"),e.qZA(),e._uU(672,". Each registered repository is automatically represented by an "),e.TgZ(673,"code"),e._uU(674,"<EntityName>Repository"),e.qZA(),e._uU(675," token, where "),e.TgZ(676,"code"),e._uU(677,"EntityName"),e.qZA(),e._uU(678," is the name of your entity class."),e.qZA(),e.TgZ(679,"p"),e._uU(680,"The "),e.TgZ(681,"code"),e._uU(682,"@nestjs/typeorm"),e.qZA(),e._uU(683," package exposes the "),e.TgZ(684,"code"),e._uU(685,"getRepositoryToken()"),e.qZA(),e._uU(686," function which returns a prepared token based on a given entity."),e.qZA(),e.TgZ(687,"pre")(688,"code",22),e._uU(689,"\n@Module({\n  providers: [\n    UsersService,\n    {\n      provide: getRepositoryToken(User),\n      useValue: mockRepository,\n    },\n  ],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(690,"p"),e._uU(691,"Now a substitute "),e.TgZ(692,"code"),e._uU(693,"mockRepository"),e.qZA(),e._uU(694," will be used as the "),e.TgZ(695,"code"),e._uU(696,"UsersRepository"),e.qZA(),e._uU(697,". Whenever any class asks for "),e.TgZ(698,"code"),e._uU(699,"UsersRepository"),e.qZA(),e._uU(700," using an "),e.TgZ(701,"code"),e._uU(702,"@InjectRepository()"),e.qZA(),e._uU(703," decorator, Nest will use the registered "),e.TgZ(704,"code"),e._uU(705,"mockRepository"),e.qZA(),e._uU(706," object."),e.qZA(),e.TgZ(707,"h4",59)(708,"span"),e._uU(709,"Async configuration"),e.qZA()(),e.TgZ(710,"p"),e._uU(711,"You may want to pass your repository module options asynchronously instead of statically. In this case, use the "),e.TgZ(712,"code"),e._uU(713,"forRootAsync()"),e.qZA(),e._uU(714," method, which provides several ways to deal with async configuration."),e.qZA(),e.TgZ(715,"p"),e._uU(716,"One approach is to use a factory function:"),e.qZA(),e.TgZ(717,"pre")(718,"code",22),e._uU(719,"\nTypeOrmModule.forRootAsync({\n  useFactory: () => ({\n    type: 'mysql',\n    host: 'localhost',\n    port: 3306,\n    username: 'root',\n    password: 'root',\n    database: 'test',\n    entities: [],\n    synchronize: true,\n  }),\n});\n"),e.qZA()(),e.TgZ(720,"p"),e._uU(721,"Our factory behaves like any other "),e.TgZ(722,"a",60),e._uU(723,"asynchronous provider"),e.qZA(),e._uU(724," (e.g., it can be "),e.TgZ(725,"code"),e._uU(726,"async"),e.qZA(),e._uU(727," and it's able to inject dependencies through "),e.TgZ(728,"code"),e._uU(729,"inject"),e.qZA(),e._uU(730,")."),e.qZA(),e.TgZ(731,"pre")(732,"code",22),e._uU(733,"\nTypeOrmModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: (configService: ConfigService) => ({\n    type: 'mysql',\n    host: configService.get('HOST'),\n    port: +configService.get('PORT'),\n    username: configService.get('USERNAME'),\n    password: configService.get('PASSWORD'),\n    database: configService.get('DATABASE'),\n    entities: [],\n    synchronize: true,\n  }),\n  inject: [ConfigService],\n});\n"),e.qZA()(),e.TgZ(734,"p"),e._uU(735,"Alternatively, you can use the "),e.TgZ(736,"code"),e._uU(737,"useClass"),e.qZA(),e._uU(738," syntax:"),e.qZA(),e.TgZ(739,"pre")(740,"code",22),e._uU(741,"\nTypeOrmModule.forRootAsync({\n  useClass: TypeOrmConfigService,\n});\n"),e.qZA()(),e.TgZ(742,"p"),e._uU(743,"The construction above will instantiate "),e.TgZ(744,"code"),e._uU(745,"TypeOrmConfigService"),e.qZA(),e._uU(746," inside "),e.TgZ(747,"code"),e._uU(748,"TypeOrmModule"),e.qZA(),e._uU(749," and use it to provide an options object by calling "),e.TgZ(750,"code"),e._uU(751,"createTypeOrmOptions()"),e.qZA(),e._uU(752,". Note that this means that the "),e.TgZ(753,"code"),e._uU(754,"TypeOrmConfigService"),e.qZA(),e._uU(755," has to implement the "),e.TgZ(756,"code"),e._uU(757,"TypeOrmOptionsFactory"),e.qZA(),e._uU(758," interface, as shown below:"),e.qZA(),e.TgZ(759,"pre")(760,"code",22),e._uU(761,"\n@Injectable()\nclass TypeOrmConfigService implements TypeOrmOptionsFactory {\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      entities: [],\n      synchronize: true,\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(762,"p"),e._uU(763,"In order to prevent the creation of "),e.TgZ(764,"code"),e._uU(765,"TypeOrmConfigService"),e.qZA(),e._uU(766," inside "),e.TgZ(767,"code"),e._uU(768,"TypeOrmModule"),e.qZA(),e._uU(769," and use a provider imported from a different module, you can use the "),e.TgZ(770,"code"),e._uU(771,"useExisting"),e.qZA(),e._uU(772," syntax."),e.qZA(),e.TgZ(773,"pre")(774,"code",22),e._uU(775,"\nTypeOrmModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n"),e.qZA()(),e.TgZ(776,"p"),e._uU(777,"This construction works the same as "),e.TgZ(778,"code"),e._uU(779,"useClass"),e.qZA(),e._uU(780," with one critical difference - "),e.TgZ(781,"code"),e._uU(782,"TypeOrmModule"),e.qZA(),e._uU(783," will lookup imported modules to reuse an existing "),e.TgZ(784,"code"),e._uU(785,"ConfigService"),e.qZA(),e._uU(786," instead of instantiating a new one."),e.qZA(),e.TgZ(787,"blockquote",25)(788,"strong"),e._uU(789,"Hint"),e.qZA(),e._uU(790," Make sure that the "),e.TgZ(791,"code"),e._uU(792,"name"),e.qZA(),e._uU(793," property is defined at the same level as the "),e.TgZ(794,"code"),e._uU(795,"useFactory"),e.qZA(),e._uU(796,", "),e.TgZ(797,"code"),e._uU(798,"useClass"),e.qZA(),e._uU(799,", or "),e.TgZ(800,"code"),e._uU(801,"useValue"),e.qZA(),e._uU(802," property. This will allow Nest to properly register the data source under the appropriate injection token.\n"),e.qZA(),e.TgZ(803,"h4",61)(804,"span"),e._uU(805,"Custom DataSource Factory"),e.qZA()(),e.TgZ(806,"p"),e._uU(807,"In conjunction with async configuration using "),e.TgZ(808,"code"),e._uU(809,"useFactory"),e.qZA(),e._uU(810,", "),e.TgZ(811,"code"),e._uU(812,"useClass"),e.qZA(),e._uU(813,", or "),e.TgZ(814,"code"),e._uU(815,"useExisting"),e.qZA(),e._uU(816,", you can optionally specify a "),e.TgZ(817,"code"),e._uU(818,"dataSourceFactory"),e.qZA(),e._uU(819," function which will allow you to provide your own TypeORM data source rather than allowing "),e.TgZ(820,"code"),e._uU(821,"TypeOrmModule"),e.qZA(),e._uU(822," to create the data source."),e.qZA(),e.TgZ(823,"p")(824,"code"),e._uU(825,"dataSourceFactory"),e.qZA(),e._uU(826," receives the TypeORM "),e.TgZ(827,"code"),e._uU(828,"DataSourceOptions"),e.qZA(),e._uU(829," configured during async configuration using "),e.TgZ(830,"code"),e._uU(831,"useFactory"),e.qZA(),e._uU(832,", "),e.TgZ(833,"code"),e._uU(834,"useClass"),e.qZA(),e._uU(835,", or "),e.TgZ(836,"code"),e._uU(837,"useExisting"),e.qZA(),e._uU(838," and returns a "),e.TgZ(839,"code"),e._uU(840,"Promise"),e.qZA(),e._uU(841," that resolves a TypeORM "),e.TgZ(842,"code"),e._uU(843,"DataSource"),e.qZA(),e._uU(844,"."),e.qZA(),e.TgZ(845,"pre")(846,"code",22),e._uU(847,"\nTypeOrmModule.forRootAsync({\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  // Use useFactory, useClass, or useExisting\n  // to configure the DataSourceOptions.\n  useFactory: (configService: ConfigService) => ({\n    type: 'mysql',\n    host: configService.get('HOST'),\n    port: +configService.get('PORT'),\n    username: configService.get('USERNAME'),\n    password: configService.get('PASSWORD'),\n    database: configService.get('DATABASE'),\n    entities: [],\n    synchronize: true,\n  }),\n  // dataSource receives the configured DataSourceOptions\n  // and returns a Promise<DataSource>.\n  dataSourceFactory: async (options) => {\n    const dataSource = await new DataSource(options).initialize();\n    return dataSource;\n  },\n});\n"),e.qZA()(),e.TgZ(848,"blockquote",25)(849,"strong"),e._uU(850,"Hint"),e.qZA(),e._uU(851," The "),e.TgZ(852,"code"),e._uU(853,"DataSource"),e.qZA(),e._uU(854," class is imported from the "),e.TgZ(855,"code"),e._uU(856,"typeorm"),e.qZA(),e._uU(857," package.\n"),e.qZA(),e.TgZ(858,"h4",62)(859,"span"),e._uU(860,"Example"),e.qZA()(),e.TgZ(861,"p"),e._uU(862,"A working example is available "),e.TgZ(863,"a",63),e._uU(864,"here"),e.qZA(),e._uU(865,"."),e.qZA(),e.TgZ(866,"p"),e._UZ(867,"app-banner-enterprise"),e.qZA(),e.TgZ(868,"h3",64),e._uU(869,"Sequelize Integration"),e.qZA(),e.TgZ(870,"p"),e._uU(871,"An alternative to using TypeORM is to use the "),e.TgZ(872,"a",9),e._uU(873,"Sequelize"),e.qZA(),e._uU(874," ORM with the "),e.TgZ(875,"code"),e._uU(876,"@nestjs/sequelize"),e.qZA(),e._uU(877," package. In addition, we leverage the "),e.TgZ(878,"a",65),e._uU(879,"sequelize-typescript"),e.qZA(),e._uU(880," package which provides a set of additional decorators to declaratively define entities."),e.qZA(),e.TgZ(881,"p"),e._uU(882,"To begin using it, we first install the required dependencies. In this chapter, we'll demonstrate using the popular "),e.TgZ(883,"a",18),e._uU(884,"MySQL"),e.qZA(),e._uU(885," Relational DBMS, but Sequelize provides support for many relational databases, such as PostgreSQL, MySQL, Microsoft SQL Server, SQLite, and MariaDB. The procedure we walk through in this chapter will be the same for any database supported by Sequelize. You'll simply need to install the associated client API libraries for your selected database."),e.qZA(),e.TgZ(886,"pre")(887,"code",19),e._uU(888,"\n$ npm install --save @nestjs/sequelize sequelize sequelize-typescript mysql2\n$ npm install --save-dev @types/sequelize\n"),e.qZA()(),e.TgZ(889,"p"),e._uU(890,"Once the installation process is complete, we can import the "),e.TgZ(891,"code"),e._uU(892,"SequelizeModule"),e.qZA(),e._uU(893," into the root "),e.TgZ(894,"code"),e._uU(895,"AppModule"),e.qZA(),e._uU(896,"."),e.qZA(),e.TgZ(897,"span",20),e._uU(898),e.ALo(899,"extension"),e._UZ(900,"app-tabs",null,66),e.qZA(),e.TgZ(902,"pre")(903,"code",22),e._uU(904,"\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      models: [],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(905,"p"),e._uU(906,"The "),e.TgZ(907,"code"),e._uU(908,"forRoot()"),e.qZA(),e._uU(909," method supports all the configuration properties exposed by the Sequelize constructor ("),e.TgZ(910,"a",67),e._uU(911,"read more"),e.qZA(),e._uU(912,"). In addition, there are several extra configuration properties described below."),e.qZA(),e.TgZ(913,"table")(914,"tr")(915,"td")(916,"code"),e._uU(917,"retryAttempts"),e.qZA()(),e.TgZ(918,"td"),e._uU(919,"Number of attempts to connect to the database (default: "),e.TgZ(920,"code"),e._uU(921,"10"),e.qZA(),e._uU(922,")"),e.qZA()(),e.TgZ(923,"tr")(924,"td")(925,"code"),e._uU(926,"retryDelay"),e.qZA()(),e.TgZ(927,"td"),e._uU(928,"Delay between connection retry attempts (ms) (default: "),e.TgZ(929,"code"),e._uU(930,"3000"),e.qZA(),e._uU(931,")"),e.qZA()(),e.TgZ(932,"tr")(933,"td")(934,"code"),e._uU(935,"autoLoadModels"),e.qZA()(),e.TgZ(936,"td"),e._uU(937,"If "),e.TgZ(938,"code"),e._uU(939,"true"),e.qZA(),e._uU(940,", models will be loaded automatically (default: "),e.TgZ(941,"code"),e._uU(942,"false"),e.qZA(),e._uU(943,")"),e.qZA()(),e.TgZ(944,"tr")(945,"td")(946,"code"),e._uU(947,"keepConnectionAlive"),e.qZA()(),e.TgZ(948,"td"),e._uU(949,"If "),e.TgZ(950,"code"),e._uU(951,"true"),e.qZA(),e._uU(952,", connection will not be closed on the application shutdown (default: "),e.TgZ(953,"code"),e._uU(954,"false"),e.qZA(),e._uU(955,")"),e.qZA()(),e.TgZ(956,"tr")(957,"td")(958,"code"),e._uU(959,"synchronize"),e.qZA()(),e.TgZ(960,"td"),e._uU(961,"If "),e.TgZ(962,"code"),e._uU(963,"true"),e.qZA(),e._uU(964,", automatically loaded models will be synchronized (default: "),e.TgZ(965,"code"),e._uU(966,"true"),e.qZA(),e._uU(967,")"),e.qZA()()(),e.TgZ(968,"p"),e._uU(969,"Once this is done, the "),e.TgZ(970,"code"),e._uU(971,"Sequelize"),e.qZA(),e._uU(972," object will be available to inject across the entire project (without needing to import any modules), for example:"),e.qZA(),e.TgZ(973,"span",20),e._uU(974),e.ALo(975,"extension"),e._UZ(976,"app-tabs",null,68),e.qZA(),e.TgZ(978,"pre")(979,"code",22),e._uU(980,"\nimport { Injectable } from '@nestjs/common';\nimport { Sequelize } from 'sequelize-typescript';\n\n@Injectable()\nexport class AppService {\n  constructor(private sequelize: Sequelize) {}\n}\n"),e.qZA()(),e.TgZ(981,"pre")(982,"code",22),e._uU(983,"\nimport { Injectable } from '@nestjs/common';\nimport { Sequelize } from 'sequelize-typescript';\n\n@Dependencies(Sequelize)\n@Injectable()\nexport class AppService {\n  constructor(sequelize) {\n    this.sequelize = sequelize;\n  }\n}\n"),e.qZA()(),e.TgZ(984,"h4",69)(985,"span"),e._uU(986,"Models"),e.qZA()(),e.TgZ(987,"p"),e._uU(988,"Sequelize implements the Active Record pattern. With this pattern, you use model classes directly to interact with the database. To continue the example, we need at least one model. Let's define the "),e.TgZ(989,"code"),e._uU(990,"User"),e.qZA(),e._uU(991," model."),e.qZA(),e.TgZ(992,"span",20),e._uU(993),e.ALo(994,"extension"),e._UZ(995,"app-tabs",null,70),e.qZA(),e.TgZ(997,"pre")(998,"code",22),e._uU(999,"\nimport { Column, Model, Table } from 'sequelize-typescript';\n\n@Table\nexport class User extends Model {\n  @Column\n  firstName: string;\n\n  @Column\n  lastName: string;\n\n  @Column({ defaultValue: true })\n  isActive: boolean;\n}\n"),e.qZA()(),e.TgZ(1e3,"blockquote",25)(1001,"strong"),e._uU(1002,"Hint"),e.qZA(),e._uU(1003," Learn more about the available decorators "),e.TgZ(1004,"a",71),e._uU(1005,"here"),e.qZA(),e._uU(1006,".\n"),e.qZA(),e.TgZ(1007,"p"),e._uU(1008,"The "),e.TgZ(1009,"code"),e._uU(1010,"User"),e.qZA(),e._uU(1011," model file sits in the "),e.TgZ(1012,"code"),e._uU(1013,"users"),e.qZA(),e._uU(1014," directory. This directory contains all files related to the "),e.TgZ(1015,"code"),e._uU(1016,"UsersModule"),e.qZA(),e._uU(1017,". You can decide where to keep your model files, however, we recommend creating them near their "),e.TgZ(1018,"strong"),e._uU(1019,"domain"),e.qZA(),e._uU(1020,", in the corresponding module directory."),e.qZA(),e.TgZ(1021,"p"),e._uU(1022,"To begin using the "),e.TgZ(1023,"code"),e._uU(1024,"User"),e.qZA(),e._uU(1025," model, we need to let Sequelize know about it by inserting it into the "),e.TgZ(1026,"code"),e._uU(1027,"models"),e.qZA(),e._uU(1028," array in the module "),e.TgZ(1029,"code"),e._uU(1030,"forRoot()"),e.qZA(),e._uU(1031," method options:"),e.qZA(),e.TgZ(1032,"span",20),e._uU(1033),e.ALo(1034,"extension"),e._UZ(1035,"app-tabs",null,72),e.qZA(),e.TgZ(1037,"pre")(1038,"code",22),e._uU(1039,"\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { User } from './users/user.model';\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      models: [User],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(1040,"p"),e._uU(1041,"Next, let's look at the "),e.TgZ(1042,"code"),e._uU(1043,"UsersModule"),e.qZA(),e._uU(1044,":"),e.qZA(),e.TgZ(1045,"span",20),e._uU(1046),e.ALo(1047,"extension"),e._UZ(1048,"app-tabs",null,73),e.qZA(),e.TgZ(1050,"pre")(1051,"code",22),e._uU(1052,"\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { User } from './user.model';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([User])],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(1053,"p"),e._uU(1054,"This module uses the "),e.TgZ(1055,"code"),e._uU(1056,"forFeature()"),e.qZA(),e._uU(1057," method to define which models are registered in the current scope. With that in place, we can inject the "),e.TgZ(1058,"code"),e._uU(1059,"UserModel"),e.qZA(),e._uU(1060," into the "),e.TgZ(1061,"code"),e._uU(1062,"UsersService"),e.qZA(),e._uU(1063," using the "),e.TgZ(1064,"code"),e._uU(1065,"@InjectModel()"),e.qZA(),e._uU(1066," decorator:"),e.qZA(),e.TgZ(1067,"span",20),e._uU(1068),e.ALo(1069,"extension"),e._UZ(1070,"app-tabs",null,74),e.qZA(),e.TgZ(1072,"pre")(1073,"code",22),e._uU(1074,"\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { User } from './user.model';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User)\n    private userModel: typeof User,\n  ) {}\n\n  async findAll(): Promise<User[]> {\n    return this.userModel.findAll();\n  }\n\n  findOne(id: string): Promise<User> {\n    return this.userModel.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async remove(id: string): Promise<void> {\n    const user = await this.findOne(id);\n    await user.destroy();\n  }\n}\n"),e.qZA()(),e.TgZ(1075,"pre")(1076,"code",22),e._uU(1077,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { getModelToken } from '@nestjs/sequelize';\nimport { User } from './user.model';\n\n@Injectable()\n@Dependencies(getModelToken(User))\nexport class UsersService {\n  constructor(usersRepository) {\n    this.usersRepository = usersRepository;\n  }\n\n  async findAll() {\n    return this.userModel.findAll();\n  }\n\n  findOne(id) {\n    return this.userModel.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async remove(id) {\n    const user = await this.findOne(id);\n    await user.destroy();\n  }\n}\n"),e.qZA()(),e.TgZ(1078,"blockquote",23)(1079,"strong"),e._uU(1080,"Notice"),e.qZA(),e._uU(1081," Don't forget to import the "),e.TgZ(1082,"code"),e._uU(1083,"UsersModule"),e.qZA(),e._uU(1084," into the root "),e.TgZ(1085,"code"),e._uU(1086,"AppModule"),e.qZA(),e._uU(1087,".\n"),e.qZA(),e.TgZ(1088,"p"),e._uU(1089,"If you want to use the repository outside of the module which imports "),e.TgZ(1090,"code"),e._uU(1091,"SequelizeModule.forFeature"),e.qZA(),e._uU(1092,", you'll need to re-export the providers generated by it.\nYou can do this by exporting the whole module, like this:"),e.qZA(),e.TgZ(1093,"span",20),e._uU(1094),e.ALo(1095,"extension"),e._UZ(1096,"app-tabs",null,75),e.qZA(),e.TgZ(1098,"pre")(1099,"code",22),e._uU(1100,"\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { User } from './user.entity';\n\n@Module({\n  imports: [SequelizeModule.forFeature([User])],\n  exports: [SequelizeModule]\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(1101,"p"),e._uU(1102,"Now if we import "),e.TgZ(1103,"code"),e._uU(1104,"UsersModule"),e.qZA(),e._uU(1105," in "),e.TgZ(1106,"code"),e._uU(1107,"UserHttpModule"),e.qZA(),e._uU(1108,", we can use "),e.TgZ(1109,"code"),e._uU(1110,"@InjectModel(User)"),e.qZA(),e._uU(1111," in the providers of the latter module."),e.qZA(),e.TgZ(1112,"span",20),e._uU(1113),e.ALo(1114,"extension"),e._UZ(1115,"app-tabs",null,76),e.qZA(),e.TgZ(1117,"pre")(1118,"code",22),e._uU(1119,"\nimport { Module } from '@nestjs/common';\nimport { UsersModule } from './users.module';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  imports: [UsersModule],\n  providers: [UsersService],\n  controllers: [UsersController]\n})\nexport class UserHttpModule {}\n"),e.qZA()(),e.TgZ(1120,"h4",77)(1121,"span"),e._uU(1122,"Relations"),e.qZA()(),e.TgZ(1123,"p"),e._uU(1124,"Relations are associations established between two or more tables. Relations are based on common fields from each table, often involving primary and foreign keys."),e.qZA(),e.TgZ(1125,"p"),e._uU(1126,"There are three types of relations:"),e.qZA(),e.TgZ(1127,"table")(1128,"tr")(1129,"td")(1130,"code"),e._uU(1131,"One-to-one"),e.qZA()(),e.TgZ(1132,"td"),e._uU(1133,"Every row in the primary table has one and only one associated row in the foreign table"),e.qZA()(),e.TgZ(1134,"tr")(1135,"td")(1136,"code"),e._uU(1137,"One-to-many / Many-to-one"),e.qZA()(),e.TgZ(1138,"td"),e._uU(1139,"Every row in the primary table has one or more related rows in the foreign table"),e.qZA()(),e.TgZ(1140,"tr")(1141,"td")(1142,"code"),e._uU(1143,"Many-to-many"),e.qZA()(),e.TgZ(1144,"td"),e._uU(1145,"Every row in the primary table has many related rows in the foreign table, and every record in the foreign table has many related rows in the primary table"),e.qZA()()(),e.TgZ(1146,"p"),e._uU(1147,"To define relations in entities, use the corresponding "),e.TgZ(1148,"strong"),e._uU(1149,"decorators"),e.qZA(),e._uU(1150,". For example, to define that each "),e.TgZ(1151,"code"),e._uU(1152,"User"),e.qZA(),e._uU(1153," can have multiple photos, use the "),e.TgZ(1154,"code"),e._uU(1155,"@HasMany()"),e.qZA(),e._uU(1156," decorator."),e.qZA(),e.TgZ(1157,"span",20),e._uU(1158),e.ALo(1159,"extension"),e._UZ(1160,"app-tabs",null,78),e.qZA(),e.TgZ(1162,"pre")(1163,"code",22),e._uU(1164,"\nimport { Column, Model, Table, HasMany } from 'sequelize-typescript';\nimport { Photo } from '../photos/photo.model';\n\n@Table\nexport class User extends Model {\n  @Column\n  firstName: string;\n\n  @Column\n  lastName: string;\n\n  @Column({ defaultValue: true })\n  isActive: boolean;\n\n  @HasMany(() => Photo)\n  photos: Photo[];\n}\n"),e.qZA()(),e.TgZ(1165,"blockquote",25)(1166,"strong"),e._uU(1167,"Hint"),e.qZA(),e._uU(1168," To learn more about associations in Sequelize, read "),e.TgZ(1169,"a",79),e._uU(1170,"this"),e.qZA(),e._uU(1171," chapter.\n"),e.qZA(),e.TgZ(1172,"h4",80)(1173,"span"),e._uU(1174,"Auto-load models"),e.qZA()(),e.TgZ(1175,"p"),e._uU(1176,"Manually adding models to the "),e.TgZ(1177,"code"),e._uU(1178,"models"),e.qZA(),e._uU(1179," array of the connection options can be tedious. In addition, referencing models from the root module breaks application domain boundaries and causes leaking implementation details to other parts of the application. To solve this issue, automatically load models by setting both "),e.TgZ(1180,"code"),e._uU(1181,"autoLoadModels"),e.qZA(),e._uU(1182," and "),e.TgZ(1183,"code"),e._uU(1184,"synchronize"),e.qZA(),e._uU(1185," properties of the configuration object (passed into the "),e.TgZ(1186,"code"),e._uU(1187,"forRoot()"),e.qZA(),e._uU(1188," method) to "),e.TgZ(1189,"code"),e._uU(1190,"true"),e.qZA(),e._uU(1191,", as shown below:"),e.qZA(),e.TgZ(1192,"span",20),e._uU(1193),e.ALo(1194,"extension"),e._UZ(1195,"app-tabs",null,81),e.qZA(),e.TgZ(1197,"pre")(1198,"code",22),e._uU(1199,"\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      ...\n      autoLoadModels: true,\n      synchronize: true,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(1200,"p"),e._uU(1201,"With that option specified, every model registered through the "),e.TgZ(1202,"code"),e._uU(1203,"forFeature()"),e.qZA(),e._uU(1204," method will be automatically added to the "),e.TgZ(1205,"code"),e._uU(1206,"models"),e.qZA(),e._uU(1207," array of the configuration object."),e.qZA(),e.TgZ(1208,"blockquote",23)(1209,"strong"),e._uU(1210,"Warning"),e.qZA(),e._uU(1211," Note that models that aren't registered through the "),e.TgZ(1212,"code"),e._uU(1213,"forFeature()"),e.qZA(),e._uU(1214," method, but are only referenced from the model (via an association), won't be included.\n"),e.qZA(),e.TgZ(1215,"h4",82)(1216,"span"),e._uU(1217,"Transactions"),e.qZA()(),e.TgZ(1218,"p"),e._uU(1219,"A database transaction symbolizes a unit of work performed within a database management system against a database, and treated in a coherent and reliable way independent of other transactions. A transaction generally represents any change in a database ("),e.TgZ(1220,"a",45),e._uU(1221,"learn more"),e.qZA(),e._uU(1222,")."),e.qZA(),e.TgZ(1223,"p"),e._uU(1224,"There are many different strategies to handle "),e.TgZ(1225,"a",83),e._uU(1226,"Sequelize transactions"),e.qZA(),e._uU(1227,". Below is a sample implementation of a managed transaction (auto-callback)."),e.qZA(),e.TgZ(1228,"p"),e._uU(1229,"First, we need to inject the "),e.TgZ(1230,"code"),e._uU(1231,"Sequelize"),e.qZA(),e._uU(1232," object into a class in the normal way:"),e.qZA(),e.TgZ(1233,"pre")(1234,"code",22),e._uU(1235,"\n@Injectable()\nexport class UsersService {\n  constructor(private sequelize: Sequelize) {}\n}\n"),e.qZA()(),e.TgZ(1236,"blockquote",25)(1237,"strong"),e._uU(1238,"Hint"),e.qZA(),e._uU(1239," The "),e.TgZ(1240,"code"),e._uU(1241,"Sequelize"),e.qZA(),e._uU(1242," class is imported from the "),e.TgZ(1243,"code"),e._uU(1244,"sequelize-typescript"),e.qZA(),e._uU(1245," package.\n"),e.qZA(),e.TgZ(1246,"p"),e._uU(1247,"Now, we can use this object to create a transaction."),e.qZA(),e.TgZ(1248,"pre")(1249,"code",22),e._uU(1250,"\nasync createMany() {\n  try {\n    await this.sequelize.transaction(async t => {\n      const transactionHost = { transaction: t };\n\n      await this.userModel.create(\n          { firstName: 'Abraham', lastName: 'Lincoln' },\n          transactionHost,\n      );\n      await this.userModel.create(\n          { firstName: 'John', lastName: 'Boothe' },\n          transactionHost,\n      );\n    });\n  } catch (err) {\n    // Transaction has been rolled back\n    // err is whatever rejected the promise chain returned to the transaction callback\n  }\n}\n"),e.qZA()(),e.TgZ(1251,"blockquote",25)(1252,"strong"),e._uU(1253,"Hint"),e.qZA(),e._uU(1254," Note that the "),e.TgZ(1255,"code"),e._uU(1256,"Sequelize"),e.qZA(),e._uU(1257," instance is used only to start the transaction. However, to test this class would require mocking the entire "),e.TgZ(1258,"code"),e._uU(1259,"Sequelize"),e.qZA(),e._uU(1260," object (which exposes several methods). Thus, we recommend using a helper factory class (e.g., "),e.TgZ(1261,"code"),e._uU(1262,"TransactionRunner"),e.qZA(),e._uU(1263,") and defining an interface with a limited set of methods required to maintain transactions. This technique makes mocking these methods pretty straightforward.\n"),e.qZA(),e.TgZ(1264,"h4",84)(1265,"span"),e._uU(1266,"Migrations"),e.qZA()(),e.TgZ(1267,"p")(1268,"a",85),e._uU(1269,"Migrations"),e.qZA(),e._uU(1270," provide a way to incrementally update the database schema to keep it in sync with the application's data model while preserving existing data in the database. To generate, run, and revert migrations, Sequelize provides a dedicated "),e.TgZ(1271,"a",86),e._uU(1272,"CLI"),e.qZA(),e._uU(1273,"."),e.qZA(),e.TgZ(1274,"p"),e._uU(1275,"Migration classes are separate from the Nest application source code. Their lifecycle is maintained by the Sequelize CLI. Therefore, you are not able to leverage dependency injection and other Nest specific features with migrations. To learn more about migrations, follow the guide in the "),e.TgZ(1276,"a",86),e._uU(1277,"Sequelize documentation"),e.qZA(),e._uU(1278,"."),e.qZA(),e.TgZ(1279,"p"),e._UZ(1280,"app-banner-courses"),e.qZA(),e.TgZ(1281,"h4",87)(1282,"span"),e._uU(1283,"Multiple databases"),e.qZA()(),e.TgZ(1284,"p"),e._uU(1285,"Some projects require multiple database connections. This can also be achieved with this module. To work with multiple connections, first create the connections. In this case, connection naming becomes "),e.TgZ(1286,"strong"),e._uU(1287,"mandatory"),e.qZA(),e._uU(1288,"."),e.qZA(),e.TgZ(1289,"p"),e._uU(1290,"Suppose you have an "),e.TgZ(1291,"code"),e._uU(1292,"Album"),e.qZA(),e._uU(1293," entity stored in its own database."),e.qZA(),e.TgZ(1294,"pre")(1295,"code",22),e._uU(1296,"\nconst defaultOptions = {\n  dialect: 'postgres',\n  port: 5432,\n  username: 'user',\n  password: 'password',\n  database: 'db',\n  synchronize: true,\n};\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      ...defaultOptions,\n      host: 'user_db_host',\n      models: [User],\n    }),\n    SequelizeModule.forRoot({\n      ...defaultOptions,\n      name: 'albumsConnection',\n      host: 'album_db_host',\n      models: [Album],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(1297,"blockquote",23)(1298,"strong"),e._uU(1299,"Notice"),e.qZA(),e._uU(1300," If you don't set the "),e.TgZ(1301,"code"),e._uU(1302,"name"),e.qZA(),e._uU(1303," for a connection, its name is set to "),e.TgZ(1304,"code"),e._uU(1305,"default"),e.qZA(),e._uU(1306,". Please note that you shouldn't have multiple connections without a name, or with the same name, otherwise they will get overridden.\n"),e.qZA(),e.TgZ(1307,"p"),e._uU(1308,"At this point, you have "),e.TgZ(1309,"code"),e._uU(1310,"User"),e.qZA(),e._uU(1311," and "),e.TgZ(1312,"code"),e._uU(1313,"Album"),e.qZA(),e._uU(1314," models registered with their own connection. With this setup, you have to tell the "),e.TgZ(1315,"code"),e._uU(1316,"SequelizeModule.forFeature()"),e.qZA(),e._uU(1317," method and the "),e.TgZ(1318,"code"),e._uU(1319,"@InjectModel()"),e.qZA(),e._uU(1320," decorator which connection should be used. If you do not pass any connection name, the "),e.TgZ(1321,"code"),e._uU(1322,"default"),e.qZA(),e._uU(1323," connection is used."),e.qZA(),e.TgZ(1324,"pre")(1325,"code",22),e._uU(1326,"\n@Module({\n  imports: [\n    SequelizeModule.forFeature([User]),\n    SequelizeModule.forFeature([Album], 'albumsConnection'),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(1327,"p"),e._uU(1328,"You can also inject the "),e.TgZ(1329,"code"),e._uU(1330,"Sequelize"),e.qZA(),e._uU(1331," instance for a given connection:"),e.qZA(),e.TgZ(1332,"pre")(1333,"code",22),e._uU(1334,"\n@Injectable()\nexport class AlbumsService {\n  constructor(\n    @InjectConnection('albumsConnection')\n    private sequelize: Sequelize,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(1335,"p"),e._uU(1336,"It's also possible to inject any "),e.TgZ(1337,"code"),e._uU(1338,"Sequelize"),e.qZA(),e._uU(1339," instance to the providers:"),e.qZA(),e.TgZ(1340,"pre")(1341,"code",22),e._uU(1342,"\n@Module({\n  providers: [\n    {\n      provide: AlbumsService,\n      useFactory: (albumsSequelize: Sequelize) => {\n        return new AlbumsService(albumsSequelize);\n      },\n      inject: [getConnectionToken('albumsConnection')],\n    },\n  ],\n})\nexport class AlbumsModule {}\n"),e.qZA()(),e.TgZ(1343,"h4",88)(1344,"span"),e._uU(1345,"Testing"),e.qZA()(),e.TgZ(1346,"p"),e._uU(1347,"When it comes to unit testing an application, we usually want to avoid making a database connection, keeping our test suites independent and their execution process as fast as possible. But our classes might depend on models that are pulled from the connection instance. How do we handle that? The solution is to create mock models. In order to achieve that, we set up "),e.TgZ(1348,"a",58),e._uU(1349,"custom providers"),e.qZA(),e._uU(1350,". Each registered model is automatically represented by a "),e.TgZ(1351,"code"),e._uU(1352,"<ModelName>Model"),e.qZA(),e._uU(1353," token, where "),e.TgZ(1354,"code"),e._uU(1355,"ModelName"),e.qZA(),e._uU(1356," is the name of your model class."),e.qZA(),e.TgZ(1357,"p"),e._uU(1358,"The "),e.TgZ(1359,"code"),e._uU(1360,"@nestjs/sequelize"),e.qZA(),e._uU(1361," package exposes the "),e.TgZ(1362,"code"),e._uU(1363,"getModelToken()"),e.qZA(),e._uU(1364," function which returns a prepared token based on a given model."),e.qZA(),e.TgZ(1365,"pre")(1366,"code",22),e._uU(1367,"\n@Module({\n  providers: [\n    UsersService,\n    {\n      provide: getModelToken(User),\n      useValue: mockModel,\n    },\n  ],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(1368,"p"),e._uU(1369,"Now a substitute "),e.TgZ(1370,"code"),e._uU(1371,"mockModel"),e.qZA(),e._uU(1372," will be used as the "),e.TgZ(1373,"code"),e._uU(1374,"UserModel"),e.qZA(),e._uU(1375,". Whenever any class asks for "),e.TgZ(1376,"code"),e._uU(1377,"UserModel"),e.qZA(),e._uU(1378," using an "),e.TgZ(1379,"code"),e._uU(1380,"@InjectModel()"),e.qZA(),e._uU(1381," decorator, Nest will use the registered "),e.TgZ(1382,"code"),e._uU(1383,"mockModel"),e.qZA(),e._uU(1384," object."),e.qZA(),e.TgZ(1385,"h4",89)(1386,"span"),e._uU(1387,"Async configuration"),e.qZA()(),e.TgZ(1388,"p"),e._uU(1389,"You may want to pass your "),e.TgZ(1390,"code"),e._uU(1391,"SequelizeModule"),e.qZA(),e._uU(1392," options asynchronously instead of statically. In this case, use the "),e.TgZ(1393,"code"),e._uU(1394,"forRootAsync()"),e.qZA(),e._uU(1395," method, which provides several ways to deal with async configuration."),e.qZA(),e.TgZ(1396,"p"),e._uU(1397,"One approach is to use a factory function:"),e.qZA(),e.TgZ(1398,"pre")(1399,"code",22),e._uU(1400,"\nSequelizeModule.forRootAsync({\n  useFactory: () => ({\n    dialect: 'mysql',\n    host: 'localhost',\n    port: 3306,\n    username: 'root',\n    password: 'root',\n    database: 'test',\n    models: [],\n  }),\n});\n"),e.qZA()(),e.TgZ(1401,"p"),e._uU(1402,"Our factory behaves like any other "),e.TgZ(1403,"a",60),e._uU(1404,"asynchronous provider"),e.qZA(),e._uU(1405," (e.g., it can be "),e.TgZ(1406,"code"),e._uU(1407,"async"),e.qZA(),e._uU(1408," and it's able to inject dependencies through "),e.TgZ(1409,"code"),e._uU(1410,"inject"),e.qZA(),e._uU(1411,")."),e.qZA(),e.TgZ(1412,"pre")(1413,"code",22),e._uU(1414,"\nSequelizeModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: (configService: ConfigService) => ({\n    dialect: 'mysql',\n    host: configService.get('HOST'),\n    port: +configService.get('PORT'),\n    username: configService.get('USERNAME'),\n    password: configService.get('PASSWORD'),\n    database: configService.get('DATABASE'),\n    models: [],\n  }),\n  inject: [ConfigService],\n});\n"),e.qZA()(),e.TgZ(1415,"p"),e._uU(1416,"Alternatively, you can use the "),e.TgZ(1417,"code"),e._uU(1418,"useClass"),e.qZA(),e._uU(1419," syntax:"),e.qZA(),e.TgZ(1420,"pre")(1421,"code",22),e._uU(1422,"\nSequelizeModule.forRootAsync({\n  useClass: SequelizeConfigService,\n});\n"),e.qZA()(),e.TgZ(1423,"p"),e._uU(1424,"The construction above will instantiate "),e.TgZ(1425,"code"),e._uU(1426,"SequelizeConfigService"),e.qZA(),e._uU(1427," inside "),e.TgZ(1428,"code"),e._uU(1429,"SequelizeModule"),e.qZA(),e._uU(1430," and use it to provide an options object by calling "),e.TgZ(1431,"code"),e._uU(1432,"createSequelizeOptions()"),e.qZA(),e._uU(1433,". Note that this means that the "),e.TgZ(1434,"code"),e._uU(1435,"SequelizeConfigService"),e.qZA(),e._uU(1436," has to implement the "),e.TgZ(1437,"code"),e._uU(1438,"SequelizeOptionsFactory"),e.qZA(),e._uU(1439," interface, as shown below:"),e.qZA(),e.TgZ(1440,"pre")(1441,"code",22),e._uU(1442,"\n@Injectable()\nclass SequelizeConfigService implements SequelizeOptionsFactory {\n  createSequelizeOptions(): SequelizeModuleOptions {\n    return {\n      dialect: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      models: [],\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(1443,"p"),e._uU(1444,"In order to prevent the creation of "),e.TgZ(1445,"code"),e._uU(1446,"SequelizeConfigService"),e.qZA(),e._uU(1447," inside "),e.TgZ(1448,"code"),e._uU(1449,"SequelizeModule"),e.qZA(),e._uU(1450," and use a provider imported from a different module, you can use the "),e.TgZ(1451,"code"),e._uU(1452,"useExisting"),e.qZA(),e._uU(1453," syntax."),e.qZA(),e.TgZ(1454,"pre")(1455,"code",22),e._uU(1456,"\nSequelizeModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n"),e.qZA()(),e.TgZ(1457,"p"),e._uU(1458,"This construction works the same as "),e.TgZ(1459,"code"),e._uU(1460,"useClass"),e.qZA(),e._uU(1461," with one critical difference - "),e.TgZ(1462,"code"),e._uU(1463,"SequelizeModule"),e.qZA(),e._uU(1464," will lookup imported modules to reuse an existing "),e.TgZ(1465,"code"),e._uU(1466,"ConfigService"),e.qZA(),e._uU(1467," instead of instantiating a new one."),e.qZA(),e.TgZ(1468,"h4",90)(1469,"span"),e._uU(1470,"Example"),e.qZA()(),e.TgZ(1471,"p"),e._uU(1472,"A working example is available "),e.TgZ(1473,"a",91),e._uU(1474,"here"),e.qZA(),e._uU(1475,"."),e.qZA()()),2&n){const a=e.MAs(88),u=e.MAs(160),l=e.MAs(186),c=e.MAs(226),g=e.MAs(239),Z=e.MAs(261),_=e.MAs(287),m=e.MAs(306),A=e.MAs(363),T=e.MAs(395),q=e.MAs(901),f=e.MAs(977),P=e.MAs(996),L=e.MAs(1036),D=e.MAs(1049),v=e.MAs(1071),z=e.MAs(1097),H=e.MAs(1116),J=e.MAs(1161),B=e.MAs(1196);e.xp6(85),e.hij(" ",e.xi3(86,36,"app.module",a.isJsActive),"\n"),e.xp6(72),e.hij(" ",e.xi3(158,39,"app.module",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(19),e.hij(" ",e.xi3(184,42,"user.entity",l.isJsActive),"\n"),e.xp6(40),e.hij(" ",e.xi3(224,45,"app.module",c.isJsActive),"\n"),e.xp6(13),e.hij(" ",e.xi3(237,48,"users.module",g.isJsActive),"\n"),e.xp6(22),e.hij(" ",e.xi3(259,51,"users.service",Z.isJsActive),"\n"),e.xp6(4),e.ekj("hide",Z.isJsActive),e.xp6(3),e.ekj("hide",!Z.isJsActive),e.xp6(19),e.hij(" ",e.xi3(285,54,"users.module",_.isJsActive),"\n"),e.xp6(19),e.hij(" ",e.xi3(304,57,"users-http.module",m.isJsActive),"\n"),e.xp6(57),e.hij(" ",e.xi3(361,60,"user.entity",A.isJsActive),"\n"),e.xp6(32),e.hij(" ",e.xi3(393,63,"app.module",T.isJsActive),"\n"),e.xp6(506),e.hij(" ",e.xi3(899,66,"app.module",q.isJsActive),"\n"),e.xp6(76),e.hij(" ",e.xi3(975,69,"app.service",f.isJsActive),"\n"),e.xp6(4),e.ekj("hide",f.isJsActive),e.xp6(3),e.ekj("hide",!f.isJsActive),e.xp6(12),e.hij(" ",e.xi3(994,72,"user.model",P.isJsActive),"\n"),e.xp6(40),e.hij(" ",e.xi3(1034,75,"app.module",L.isJsActive),"\n"),e.xp6(13),e.hij(" ",e.xi3(1047,78,"users.module",D.isJsActive),"\n"),e.xp6(22),e.hij(" ",e.xi3(1069,81,"users.service",v.isJsActive),"\n"),e.xp6(4),e.ekj("hide",v.isJsActive),e.xp6(3),e.ekj("hide",!v.isJsActive),e.xp6(19),e.hij(" ",e.xi3(1095,84,"users.module",z.isJsActive),"\n"),e.xp6(19),e.hij(" ",e.xi3(1114,87,"users-http.module",H.isJsActive),"\n"),e.xp6(45),e.hij(" ",e.xi3(1159,90,"user.entity",J.isJsActive),"\n"),e.xp6(35),e.hij(" ",e.xi3(1194,93,"app.module",B.isJsActive),"\n")}},dependencies:[p.n,i.U,y.f,b.V,j.f,h.yS,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"Database"}},{path:"mongodb",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-mongo"]],features:[e.qOj],decls:602,vars:44,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/mongo.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","mongo"],["rel","nofollow","target","_blank","href","https://www.mongodb.com/"],["rel","nofollow","target","_blank","href","https://github.com/typeorm/typeorm"],["routerLink","/techniques/database"],["rel","nofollow","target","_blank","href","https://mongoosejs.com"],["rel","nofollow","target","_blank","href","https://github.com/Automattic/mongoose"],[1,"language-bash"],[1,"filename"],["appb54e5f531e1fcd4847287739b196a87559b8dd04",""],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/connections.html"],["appAnchor","","id","model-injection"],["rel","nofollow","target","_blank","href","http://mongoosejs.com/docs/guide.html"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/models.html"],["app6d723706c249b97d9c2929da2656a061876a0f37",""],[1,"info"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/guide.html#options"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/schematypes.html"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/schematypes.html#schematype-options"],["appa799b7a0e2d20218860c73d7bd921211d1491142",""],["appfebdda0ad5727061f39b6da995481d7dbb71fc77",""],["appAnchor","","id","connection"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/api.html#Connection"],["appAnchor","","id","multiple-databases"],["appb871b89a50c84bc23bb87de0f2d02f4f03a64b0a",""],[1,"warning"],["appAnchor","","id","hooks-middleware"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/middleware.html"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory"],["appAnchor","","id","plugins"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/plugins.html"],["app113d0c0a5e1e4de723328195854a7d7867fbd190",""],["appAnchor","","id","discriminators"],["rel","nofollow","target","_blank","href","https://mongoosejs.com/docs/discriminators.html"],["appd59fe443ddfe9417fe0046a19cd2b864bb5eec0b",""],["appdd2cf8d66126216f5c7341b95535f25dfbfca06a",""],["app0a095d06910873a86fcdc953c1f1a70f741839b1",""],["appc70e2517be59fc9b89c97aad1ed35e8aa0f27aee",""],["appAnchor","","id","testing"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers#di-fundamentals"],["routerLink","/fundamentals/custom-providers"],["appAnchor","","id","async-configuration"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/06-mongoose"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Mongo"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest supports two methods for integrating with the "),e.TgZ(9,"a",6),e._uU(10,"MongoDB"),e.qZA(),e._uU(11," database. You can either use the built-in "),e.TgZ(12,"a",7),e._uU(13,"TypeORM"),e.qZA(),e._uU(14," module described "),e.TgZ(15,"a",8),e._uU(16,"here"),e.qZA(),e._uU(17,", which has a connector for MongoDB, or use "),e.TgZ(18,"a",9),e._uU(19,"Mongoose"),e.qZA(),e._uU(20,", the most popular MongoDB object modeling tool. In this chapter we'll describe the latter, using the dedicated "),e.TgZ(21,"code"),e._uU(22,"@nestjs/mongoose"),e.qZA(),e._uU(23," package."),e.qZA(),e.TgZ(24,"p"),e._uU(25,"Start by installing the "),e.TgZ(26,"a",10),e._uU(27,"required dependencies"),e.qZA(),e._uU(28,":"),e.qZA(),e.TgZ(29,"pre")(30,"code",11),e._uU(31,"\n$ npm install --save @nestjs/mongoose mongoose\n"),e.qZA()(),e.TgZ(32,"p"),e._uU(33,"Once the installation process is complete, we can import the "),e.TgZ(34,"code"),e._uU(35,"MongooseModule"),e.qZA(),e._uU(36," into the root "),e.TgZ(37,"code"),e._uU(38,"AppModule"),e.qZA(),e._uU(39,"."),e.qZA(),e.TgZ(40,"span",12),e._uU(41),e.ALo(42,"extension"),e._UZ(43,"app-tabs",null,13),e.qZA(),e.TgZ(45,"pre")(46,"code",14),e._uU(47,"\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [MongooseModule.forRoot('mongodb://localhost/nest')],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(48,"p"),e._uU(49,"The "),e.TgZ(50,"code"),e._uU(51,"forRoot()"),e.qZA(),e._uU(52," method accepts the same configuration object as "),e.TgZ(53,"code"),e._uU(54,"mongoose.connect()"),e.qZA(),e._uU(55," from the Mongoose package, as described "),e.TgZ(56,"a",15),e._uU(57,"here"),e.qZA(),e._uU(58,"."),e.qZA(),e.TgZ(59,"h4",16)(60,"span"),e._uU(61,"Model injection"),e.qZA()(),e.TgZ(62,"p"),e._uU(63,"With Mongoose, everything is derived from a "),e.TgZ(64,"a",17),e._uU(65,"Schema"),e.qZA(),e._uU(66,". Each schema maps to a MongoDB collection and defines the shape of the documents within that collection. Schemas are used to define "),e.TgZ(67,"a",18),e._uU(68,"Models"),e.qZA(),e._uU(69,". Models are responsible for creating and reading documents from the underlying MongoDB database."),e.qZA(),e.TgZ(70,"p"),e._uU(71,"Schemas can be created with NestJS decorators, or with Mongoose itself manually. Using decorators to create schemas greatly reduces boilerplate and improves overall code readability."),e.qZA(),e.TgZ(72,"p"),e._uU(73,"Let's define the "),e.TgZ(74,"code"),e._uU(75,"CatSchema"),e.qZA(),e._uU(76,":"),e.qZA(),e.TgZ(77,"span",12),e._uU(78),e.ALo(79,"extension"),e._UZ(80,"app-tabs",null,19),e.qZA(),e.TgZ(82,"pre")(83,"code",14),e._uU(84,"\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type CatDocument = Cat & Document;\n\n@Schema()\nexport class Cat {\n  @Prop()\n  name: string;\n\n  @Prop()\n  age: number;\n\n  @Prop()\n  breed: string;\n}\n\nexport const CatSchema = SchemaFactory.createForClass(Cat);\n"),e.qZA()(),e.TgZ(85,"blockquote",20)(86,"strong"),e._uU(87,"Hint"),e.qZA(),e._uU(88," Note you can also generate a raw schema definition using the "),e.TgZ(89,"code"),e._uU(90,"DefinitionsFactory"),e.qZA(),e._uU(91," class (from the "),e.TgZ(92,"code"),e._uU(93,"nestjs/mongoose"),e.qZA(),e._uU(94,"). This allows you to manually modify the schema definition generated based on the metadata you provided. This is useful for certain edge-cases where it may be hard to represent everything with decorators.\n"),e.qZA(),e.TgZ(95,"p"),e._uU(96,"The "),e.TgZ(97,"code"),e._uU(98,"@Schema()"),e.qZA(),e._uU(99," decorator marks a class as a schema definition. It maps our "),e.TgZ(100,"code"),e._uU(101,"Cat"),e.qZA(),e._uU(102," class to a MongoDB collection of the same name, but with an additional \u201cs\u201d at the end - so the final mongo collection name will be "),e.TgZ(103,"code"),e._uU(104,"cats"),e.qZA(),e._uU(105,". This decorator accepts a single optional argument which is a schema options object. Think of it as the object you would normally pass as a second argument of the "),e.TgZ(106,"code"),e._uU(107,"mongoose.Schema"),e.qZA(),e._uU(108," class' constructor (e.g., "),e.TgZ(109,"code"),e._uU(110,"new mongoose.Schema(_, options)"),e.qZA(),e._uU(111,")). To learn more about available schema options, see "),e.TgZ(112,"a",21),e._uU(113,"this"),e.qZA(),e._uU(114," chapter."),e.qZA(),e.TgZ(115,"p"),e._uU(116,"The "),e.TgZ(117,"code"),e._uU(118,"@Prop()"),e.qZA(),e._uU(119," decorator defines a property in the document. For example, in the schema definition above, we defined three properties: "),e.TgZ(120,"code"),e._uU(121,"name"),e.qZA(),e._uU(122,", "),e.TgZ(123,"code"),e._uU(124,"age"),e.qZA(),e._uU(125,", and "),e.TgZ(126,"code"),e._uU(127,"breed"),e.qZA(),e._uU(128,". The "),e.TgZ(129,"a",22),e._uU(130,"schema types"),e.qZA(),e._uU(131," for these properties are automatically inferred thanks to TypeScript metadata (and reflection) capabilities. However, in more complex scenarios in which types cannot be implicitly reflected (for example, arrays or nested object structures), types must be indicated explicitly, as follows:"),e.qZA(),e.TgZ(132,"pre")(133,"code",14),e._uU(134,"\n@Prop([String])\ntags: string[];\n"),e.qZA()(),e.TgZ(135,"p"),e._uU(136,"Alternatively, the "),e.TgZ(137,"code"),e._uU(138,"@Prop()"),e.qZA(),e._uU(139," decorator accepts an options object argument ("),e.TgZ(140,"a",23),e._uU(141,"read more"),e.qZA(),e._uU(142," about the available options). With this, you can indicate whether a property is required or not, specify a default value, or mark it as immutable. For example:"),e.qZA(),e.TgZ(143,"pre")(144,"code",14),e._uU(145,"\n@Prop({ required: true })\nname: string;\n"),e.qZA()(),e.TgZ(146,"p"),e._uU(147,"In case you want to specify relation to another model, later for populating, you can use "),e.TgZ(148,"code"),e._uU(149,"@Prop()"),e.qZA(),e._uU(150," decorator as well. For example, if "),e.TgZ(151,"code"),e._uU(152,"Cat"),e.qZA(),e._uU(153," has "),e.TgZ(154,"code"),e._uU(155,"Owner"),e.qZA(),e._uU(156," which is stored in a different collection called "),e.TgZ(157,"code"),e._uU(158,"owners"),e.qZA(),e._uU(159,", the property should have type and ref. For example:"),e.qZA(),e.TgZ(160,"pre")(161,"code",14),e._uU(162,"\nimport * as mongoose from 'mongoose';\nimport { Owner } from '../owners/schemas/owner.schema';\n\n// inside the class definition\n@Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Owner' })\nowner: Owner;\n"),e.qZA()(),e.TgZ(163,"p"),e._uU(164,"In case there are multiple owners, your property configuration should look as follows:"),e.qZA(),e.TgZ(165,"pre")(166,"code",14),e._uU(167,"\n@Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Owner' }] })\nowner: Owner[];\n"),e.qZA()(),e.TgZ(168,"p"),e._uU(169,"Finally, the "),e.TgZ(170,"strong"),e._uU(171,"raw"),e.qZA(),e._uU(172," schema definition can also be passed to the decorator. This is useful when, for example, a property represents a nested object which is not defined as a class. For this, use the "),e.TgZ(173,"code"),e._uU(174,"raw()"),e.qZA(),e._uU(175," function from the "),e.TgZ(176,"code"),e._uU(177,"@nestjs/mongoose"),e.qZA(),e._uU(178," package, as follows:"),e.qZA(),e.TgZ(179,"pre")(180,"code",14),e._uU(181,"\n@Prop(raw({\n  firstName: { type: String },\n  lastName: { type: String }\n}))\ndetails: Record<string, any>;\n"),e.qZA()(),e.TgZ(182,"p"),e._uU(183,"Alternatively, if you prefer "),e.TgZ(184,"strong"),e._uU(185,"not using decorators"),e.qZA(),e._uU(186,", you can define a schema manually. For example:"),e.qZA(),e.TgZ(187,"pre")(188,"code",14),e._uU(189,"\nexport const CatSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  breed: String,\n});\n"),e.qZA()(),e.TgZ(190,"p"),e._uU(191,"The "),e.TgZ(192,"code"),e._uU(193,"cat.schema"),e.qZA(),e._uU(194," file resides in a folder in the "),e.TgZ(195,"code"),e._uU(196,"cats"),e.qZA(),e._uU(197," directory, where we also define the "),e.TgZ(198,"code"),e._uU(199,"CatsModule"),e.qZA(),e._uU(200,". While you can store schema files wherever you prefer, we recommend storing them near their related "),e.TgZ(201,"strong"),e._uU(202,"domain"),e.qZA(),e._uU(203," objects, in the appropriate module directory."),e.qZA(),e.TgZ(204,"p"),e._uU(205,"Let's look at the "),e.TgZ(206,"code"),e._uU(207,"CatsModule"),e.qZA(),e._uU(208,":"),e.qZA(),e.TgZ(209,"span",12),e._uU(210),e.ALo(211,"extension"),e._UZ(212,"app-tabs",null,24),e.qZA(),e.TgZ(214,"pre")(215,"code",14),e._uU(216,"\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { Cat, CatSchema } from './schemas/cat.schema';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }])],\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n"),e.qZA()(),e.TgZ(217,"p"),e._uU(218,"The "),e.TgZ(219,"code"),e._uU(220,"MongooseModule"),e.qZA(),e._uU(221," provides the "),e.TgZ(222,"code"),e._uU(223,"forFeature()"),e.qZA(),e._uU(224," method to configure the module, including defining which models should be registered in the current scope. If you also want to use the models in another module, add MongooseModule to the "),e.TgZ(225,"code"),e._uU(226,"exports"),e.qZA(),e._uU(227," section of "),e.TgZ(228,"code"),e._uU(229,"CatsModule"),e.qZA(),e._uU(230," and import "),e.TgZ(231,"code"),e._uU(232,"CatsModule"),e.qZA(),e._uU(233," in the other module."),e.qZA(),e.TgZ(234,"p"),e._uU(235,"Once you've registered the schema, you can inject a "),e.TgZ(236,"code"),e._uU(237,"Cat"),e.qZA(),e._uU(238," model into the "),e.TgZ(239,"code"),e._uU(240,"CatsService"),e.qZA(),e._uU(241," using the "),e.TgZ(242,"code"),e._uU(243,"@InjectModel()"),e.qZA(),e._uU(244," decorator:"),e.qZA(),e.TgZ(245,"span",12),e._uU(246),e.ALo(247,"extension"),e._UZ(248,"app-tabs",null,25),e.qZA(),e.TgZ(250,"pre")(251,"code",14),e._uU(252,"\nimport { Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Cat, CatDocument } from './schemas/cat.schema';\nimport { CreateCatDto } from './dto/create-cat.dto';\n\n@Injectable()\nexport class CatsService {\n  constructor(@InjectModel(Cat.name) private catModel: Model<CatDocument>) {}\n\n  async create(createCatDto: CreateCatDto): Promise<Cat> {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll(): Promise<Cat[]> {\n    return this.catModel.find().exec();\n  }\n}\n"),e.qZA()(),e.TgZ(253,"pre")(254,"code",14),e._uU(255,"\nimport { Model } from 'mongoose';\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { Cat } from './schemas/cat.schema';\n\n@Injectable()\n@Dependencies(getModelToken(Cat.name))\nexport class CatsService {\n  constructor(catModel) {\n    this.catModel = catModel;\n  }\n\n  async create(createCatDto) {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll() {\n    return this.catModel.find().exec();\n  }\n}\n"),e.qZA()(),e.TgZ(256,"h4",26)(257,"span"),e._uU(258,"Connection"),e.qZA()(),e.TgZ(259,"p"),e._uU(260,"At times you may need to access the native "),e.TgZ(261,"a",27),e._uU(262,"Mongoose Connection"),e.qZA(),e._uU(263," object. For example, you may want to make native API calls on the connection object. You can inject the Mongoose Connection by using the "),e.TgZ(264,"code"),e._uU(265,"@InjectConnection()"),e.qZA(),e._uU(266," decorator as follows:"),e.qZA(),e.TgZ(267,"pre")(268,"code",14),e._uU(269,"\nimport { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/mongoose';\nimport { Connection } from 'mongoose';\n\n@Injectable()\nexport class CatsService {\n  constructor(@InjectConnection() private connection: Connection) {}\n}\n"),e.qZA()(),e.TgZ(270,"h4",28)(271,"span"),e._uU(272,"Multiple databases"),e.qZA()(),e.TgZ(273,"p"),e._uU(274,"Some projects require multiple database connections. This can also be achieved with this module. To work with multiple connections, first create the connections. In this case, connection naming becomes "),e.TgZ(275,"strong"),e._uU(276,"mandatory"),e.qZA(),e._uU(277,"."),e.qZA(),e.TgZ(278,"span",12),e._uU(279),e.ALo(280,"extension"),e._UZ(281,"app-tabs",null,29),e.qZA(),e.TgZ(283,"pre")(284,"code",14),e._uU(285,"\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost/test', {\n      connectionName: 'cats',\n    }),\n    MongooseModule.forRoot('mongodb://localhost/users', {\n      connectionName: 'users',\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(286,"blockquote",30)(287,"strong"),e._uU(288,"Notice"),e.qZA(),e._uU(289," Please note that you shouldn't have multiple connections without a name, or with the same name, otherwise they will get overridden.\n"),e.qZA(),e.TgZ(290,"p"),e._uU(291,"With this setup, you have to tell the "),e.TgZ(292,"code"),e._uU(293,"MongooseModule.forFeature()"),e.qZA(),e._uU(294," function which connection should be used."),e.qZA(),e.TgZ(295,"pre")(296,"code",14),e._uU(297,"\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }], 'cats'),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(298,"p"),e._uU(299,"You can also inject the "),e.TgZ(300,"code"),e._uU(301,"Connection"),e.qZA(),e._uU(302," for a given connection:"),e.qZA(),e.TgZ(303,"pre")(304,"code",14),e._uU(305,"\nimport { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/mongoose';\nimport { Connection } from 'mongoose';\n\n@Injectable()\nexport class CatsService {\n  constructor(@InjectConnection('cats') private connection: Connection) {}\n}\n"),e.qZA()(),e.TgZ(306,"p"),e._uU(307,"To inject a given "),e.TgZ(308,"code"),e._uU(309,"Connection"),e.qZA(),e._uU(310," to a custom provider (for example, factory provider), use the "),e.TgZ(311,"code"),e._uU(312,"getConnectionToken()"),e.qZA(),e._uU(313," function passing the name of the connection as an argument."),e.qZA(),e.TgZ(314,"pre")(315,"code",14),e._uU(316,"\n{\n  provide: CatsService,\n  useFactory: (catsConnection: Connection) => {\n    return new CatsService(catsConnection);\n  },\n  inject: [getConnectionToken('cats')],\n}\n"),e.qZA()(),e.TgZ(317,"h4",31)(318,"span"),e._uU(319,"Hooks (middleware)"),e.qZA()(),e.TgZ(320,"p"),e._uU(321,"Middleware (also called pre and post hooks) are functions which are passed control during execution of asynchronous functions. Middleware is specified on the schema level and is useful for writing plugins ("),e.TgZ(322,"a",32),e._uU(323,"source"),e.qZA(),e._uU(324,"). Calling "),e.TgZ(325,"code"),e._uU(326,"pre()"),e.qZA(),e._uU(327," or "),e.TgZ(328,"code"),e._uU(329,"post()"),e.qZA(),e._uU(330," after compiling a model does not work in Mongoose. To register a hook "),e.TgZ(331,"strong"),e._uU(332,"before"),e.qZA(),e._uU(333," model registration, use the "),e.TgZ(334,"code"),e._uU(335,"forFeatureAsync()"),e.qZA(),e._uU(336," method of the "),e.TgZ(337,"code"),e._uU(338,"MongooseModule"),e.qZA(),e._uU(339," along with a factory provider (i.e., "),e.TgZ(340,"code"),e._uU(341,"useFactory"),e.qZA(),e._uU(342,"). With this technique, you can access a schema object, then use the "),e.TgZ(343,"code"),e._uU(344,"pre()"),e.qZA(),e._uU(345," or "),e.TgZ(346,"code"),e._uU(347,"post()"),e.qZA(),e._uU(348," method to register a hook on that schema. See example below:"),e.qZA(),e.TgZ(349,"pre")(350,"code",14),e._uU(351,"\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Cat.name,\n        useFactory: () => {\n          const schema = CatsSchema;\n          schema.pre('save', function () {\n            console.log('Hello from pre save');\n          });\n          return schema;\n        },\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(352,"p"),e._uU(353,"Like other "),e.TgZ(354,"a",33),e._uU(355,"factory providers"),e.qZA(),e._uU(356,", our factory function can be "),e.TgZ(357,"code"),e._uU(358,"async"),e.qZA(),e._uU(359," and can inject dependencies through "),e.TgZ(360,"code"),e._uU(361,"inject"),e.qZA(),e._uU(362,"."),e.qZA(),e.TgZ(363,"pre")(364,"code",14),e._uU(365,"\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Cat.name,\n        imports: [ConfigModule],\n        useFactory: (configService: ConfigService) => {\n          const schema = CatsSchema;\n          schema.pre('save', function() {\n            console.log(\n              `${configService.get('APP_NAME')}: Hello from pre save`,\n            ),\n          });\n          return schema;\n        },\n        inject: [ConfigService],\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(366,"h4",34)(367,"span"),e._uU(368,"Plugins"),e.qZA()(),e.TgZ(369,"p"),e._uU(370,"To register a "),e.TgZ(371,"a",35),e._uU(372,"plugin"),e.qZA(),e._uU(373," for a given schema, use the "),e.TgZ(374,"code"),e._uU(375,"forFeatureAsync()"),e.qZA(),e._uU(376," method."),e.qZA(),e.TgZ(377,"pre")(378,"code",14),e._uU(379,"\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Cat.name,\n        useFactory: () => {\n          const schema = CatsSchema;\n          schema.plugin(require('mongoose-autopopulate'));\n          return schema;\n        },\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(380,"p"),e._uU(381,"To register a plugin for all schemas at once, call the "),e.TgZ(382,"code"),e._uU(383,".plugin()"),e.qZA(),e._uU(384," method of the "),e.TgZ(385,"code"),e._uU(386,"Connection"),e.qZA(),e._uU(387," object. You should access the connection before models are created; to do this, use the "),e.TgZ(388,"code"),e._uU(389,"connectionFactory"),e.qZA(),e._uU(390,":"),e.qZA(),e.TgZ(391,"span",12),e._uU(392),e.ALo(393,"extension"),e._UZ(394,"app-tabs",null,36),e.qZA(),e.TgZ(396,"pre")(397,"code",14),e._uU(398,"\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost/test', {\n      connectionFactory: (connection) => {\n        connection.plugin(require('mongoose-autopopulate'));\n        return connection;\n      }\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(399,"h4",37)(400,"span"),e._uU(401,"Discriminators"),e.qZA()(),e.TgZ(402,"p")(403,"a",38),e._uU(404,"Discriminators"),e.qZA(),e._uU(405," are a schema inheritance mechanism. They enable you to have multiple models with overlapping schemas on top of the same underlying MongoDB collection."),e.qZA(),e.TgZ(406,"p"),e._uU(407,"Suppose you wanted to track different types of events in a single collection. Every event will have a timestamp."),e.qZA(),e.TgZ(408,"span",12),e._uU(409),e.ALo(410,"extension"),e._UZ(411,"app-tabs",null,39),e.qZA(),e.TgZ(413,"pre")(414,"code",14),e._uU(415,"\n@Schema({ discriminatorKey: 'kind' })\nexport class Event {\n  @Prop({\n    type: String,\n    required: true,\n    enum: [ClickedLinkEvent.name, SignUpEvent.name],\n  })\n  kind: string;\n\n  @Prop({ type: Date, required: true })\n  time: Date;\n}\n\nexport const EventSchema = SchemaFactory.createForClass(Event);\n"),e.qZA()(),e.TgZ(416,"blockquote",20)(417,"strong"),e._uU(418,"Hint"),e.qZA(),e._uU(419,' The way mongoose tells the difference between the different discriminator models is by the "discriminator key", which is '),e.TgZ(420,"code"),e._uU(421,"__t"),e.qZA(),e._uU(422," by default. Mongoose adds a String path called "),e.TgZ(423,"code"),e._uU(424,"__t"),e.qZA(),e._uU(425," to your schemas that it uses to track which discriminator this document is an instance of.\nYou may also use the "),e.TgZ(426,"code"),e._uU(427,"discriminatorKey"),e.qZA(),e._uU(428," option to define the path for discrimination.\n"),e.qZA(),e.TgZ(429,"p")(430,"code"),e._uU(431,"SignedUpEvent"),e.qZA(),e._uU(432," and "),e.TgZ(433,"code"),e._uU(434,"ClickedLinkEvent"),e.qZA(),e._uU(435," instances will be stored in the same collection as generic events."),e.qZA(),e.TgZ(436,"p"),e._uU(437,"Now, let's define the "),e.TgZ(438,"code"),e._uU(439,"ClickedLinkEvent"),e.qZA(),e._uU(440," class, as follows:"),e.qZA(),e.TgZ(441,"span",12),e._uU(442),e.ALo(443,"extension"),e._UZ(444,"app-tabs",null,40),e.qZA(),e.TgZ(446,"pre")(447,"code",14),e._uU(448,"\n@Schema()\nexport class ClickedLinkEvent {\n  kind: string;\n  time: Date;\n\n  @Prop({ type: String, required: true })\n  url: string;\n}\n\nexport const ClickedLinkEventSchema = SchemaFactory.createForClass(ClickedLinkEvent);\n"),e.qZA()(),e.TgZ(449,"p"),e._uU(450,"And "),e.TgZ(451,"code"),e._uU(452,"SignUpEvent"),e.qZA(),e._uU(453," class:"),e.qZA(),e.TgZ(454,"span",12),e._uU(455),e.ALo(456,"extension"),e._UZ(457,"app-tabs",null,41),e.qZA(),e.TgZ(459,"pre")(460,"code",14),e._uU(461,"\n@Schema()\nexport class SignUpEvent {\n  kind: string;\n  time: Date;\n\n  @Prop({ type: String, required: true })\n  user: string;\n}\n\nexport const SignUpEventSchema = SchemaFactory.createForClass(SignUpEvent);\n"),e.qZA()(),e.TgZ(462,"p"),e._uU(463,"With this in place, use the "),e.TgZ(464,"code"),e._uU(465,"discriminators"),e.qZA(),e._uU(466," option to register a discriminator for a given schema. It works on both "),e.TgZ(467,"code"),e._uU(468,"MongooseModule.forFeature"),e.qZA(),e._uU(469," and "),e.TgZ(470,"code"),e._uU(471,"MongooseModule.forFeatureAsync"),e.qZA(),e._uU(472,":"),e.qZA(),e.TgZ(473,"span",12),e._uU(474),e.ALo(475,"extension"),e._UZ(476,"app-tabs",null,42),e.qZA(),e.TgZ(478,"pre")(479,"code",14),e._uU(480,"\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Event.name,\n        schema: EventSchema,\n        discriminators: [\n          { name: ClickedLinkEvent.name, schema: ClickedLinkEventSchema },\n          { name: SignUpEvent.name, schema: SignUpEventSchema },\n        ],\n      },\n    ]),\n  ]\n})\nexport class EventsModule {}\n"),e.qZA()(),e.TgZ(481,"h4",43)(482,"span"),e._uU(483,"Testing"),e.qZA()(),e.TgZ(484,"p"),e._uU(485,"When unit testing an application, we usually want to avoid any database connection, making our test suites simpler to set up and faster to execute. But our classes might depend on models that are pulled from the connection instance. How do we resolve these classes? The solution is to create mock models."),e.qZA(),e.TgZ(486,"p"),e._uU(487,"To make this easier, the "),e.TgZ(488,"code"),e._uU(489,"@nestjs/mongoose"),e.qZA(),e._uU(490," package exposes a "),e.TgZ(491,"code"),e._uU(492,"getModelToken()"),e.qZA(),e._uU(493," function that returns a prepared "),e.TgZ(494,"a",44),e._uU(495,"injection token"),e.qZA(),e._uU(496," based on a token name. Using this token, you can easily provide a mock implementation using any of the standard "),e.TgZ(497,"a",45),e._uU(498,"custom provider"),e.qZA(),e._uU(499," techniques, including "),e.TgZ(500,"code"),e._uU(501,"useClass"),e.qZA(),e._uU(502,", "),e.TgZ(503,"code"),e._uU(504,"useValue"),e.qZA(),e._uU(505,", and "),e.TgZ(506,"code"),e._uU(507,"useFactory"),e.qZA(),e._uU(508,". For example:"),e.qZA(),e.TgZ(509,"pre")(510,"code",14),e._uU(511,"\n@Module({\n  providers: [\n    CatsService,\n    {\n      provide: getModelToken(Cat.name),\n      useValue: catModel,\n    },\n  ],\n})\nexport class CatsModule {}\n"),e.qZA()(),e.TgZ(512,"p"),e._uU(513,"In this example, a hardcoded "),e.TgZ(514,"code"),e._uU(515,"catModel"),e.qZA(),e._uU(516," (object instance) will be provided whenever any consumer injects a "),e.TgZ(517,"code"),e._uU(518,"Model<Cat>"),e.qZA(),e._uU(519," using an "),e.TgZ(520,"code"),e._uU(521,"@InjectModel()"),e.qZA(),e._uU(522," decorator."),e.qZA(),e.TgZ(523,"p"),e._UZ(524,"app-banner-courses"),e.qZA(),e.TgZ(525,"h4",46)(526,"span"),e._uU(527,"Async configuration"),e.qZA()(),e.TgZ(528,"p"),e._uU(529,"When you need to pass module options asynchronously instead of statically, use the "),e.TgZ(530,"code"),e._uU(531,"forRootAsync()"),e.qZA(),e._uU(532," method. As with most dynamic modules, Nest provides several techniques to deal with async configuration."),e.qZA(),e.TgZ(533,"p"),e._uU(534,"One technique is to use a factory function:"),e.qZA(),e.TgZ(535,"pre")(536,"code",14),e._uU(537,"\nMongooseModule.forRootAsync({\n  useFactory: () => ({\n    uri: 'mongodb://localhost/nest',\n  }),\n});\n"),e.qZA()(),e.TgZ(538,"p"),e._uU(539,"Like other "),e.TgZ(540,"a",33),e._uU(541,"factory providers"),e.qZA(),e._uU(542,", our factory function can be "),e.TgZ(543,"code"),e._uU(544,"async"),e.qZA(),e._uU(545," and can inject dependencies through "),e.TgZ(546,"code"),e._uU(547,"inject"),e.qZA(),e._uU(548,"."),e.qZA(),e.TgZ(549,"pre")(550,"code",14),e._uU(551,"\nMongooseModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    uri: configService.get<string>('MONGODB_URI'),\n  }),\n  inject: [ConfigService],\n});\n"),e.qZA()(),e.TgZ(552,"p"),e._uU(553,"Alternatively, you can configure the "),e.TgZ(554,"code"),e._uU(555,"MongooseModule"),e.qZA(),e._uU(556," using a class instead of a factory, as shown below:"),e.qZA(),e.TgZ(557,"pre")(558,"code",14),e._uU(559,"\nMongooseModule.forRootAsync({\n  useClass: MongooseConfigService,\n});\n"),e.qZA()(),e.TgZ(560,"p"),e._uU(561,"The construction above instantiates "),e.TgZ(562,"code"),e._uU(563,"MongooseConfigService"),e.qZA(),e._uU(564," inside "),e.TgZ(565,"code"),e._uU(566,"MongooseModule"),e.qZA(),e._uU(567,", using it to create the required options object. Note that in this example, the "),e.TgZ(568,"code"),e._uU(569,"MongooseConfigService"),e.qZA(),e._uU(570," has to implement the "),e.TgZ(571,"code"),e._uU(572,"MongooseOptionsFactory"),e.qZA(),e._uU(573," interface, as shown below. The "),e.TgZ(574,"code"),e._uU(575,"MongooseModule"),e.qZA(),e._uU(576," will call the "),e.TgZ(577,"code"),e._uU(578,"createMongooseOptions()"),e.qZA(),e._uU(579," method on the instantiated object of the supplied class."),e.qZA(),e.TgZ(580,"pre")(581,"code",14),e._uU(582,"\n@Injectable()\nexport class MongooseConfigService implements MongooseOptionsFactory {\n  createMongooseOptions(): MongooseModuleOptions {\n    return {\n      uri: 'mongodb://localhost/nest',\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(583,"p"),e._uU(584,"If you want to reuse an existing options provider instead of creating a private copy inside the "),e.TgZ(585,"code"),e._uU(586,"MongooseModule"),e.qZA(),e._uU(587,", use the "),e.TgZ(588,"code"),e._uU(589,"useExisting"),e.qZA(),e._uU(590," syntax."),e.qZA(),e.TgZ(591,"pre")(592,"code",14),e._uU(593,"\nMongooseModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n"),e.qZA()(),e.TgZ(594,"h4",47)(595,"span"),e._uU(596,"Example"),e.qZA()(),e.TgZ(597,"p"),e._uU(598,"A working example is available "),e.TgZ(599,"a",48),e._uU(600,"here"),e.qZA(),e._uU(601,"."),e.qZA()()),2&n){const a=e.MAs(44),u=e.MAs(81),l=e.MAs(213),c=e.MAs(249),g=e.MAs(282),Z=e.MAs(395),_=e.MAs(412),m=e.MAs(445),A=e.MAs(458),T=e.MAs(477);e.xp6(41),e.hij(" ",e.xi3(42,14,"app.module",a.isJsActive),"\n"),e.xp6(37),e.hij(" ",e.xi3(79,17,"schemas/cat.schema",u.isJsActive),"\n"),e.xp6(132),e.hij(" ",e.xi3(211,20,"cats.module",l.isJsActive),"\n"),e.xp6(36),e.hij(" ",e.xi3(247,23,"cats.service",c.isJsActive),"\n"),e.xp6(4),e.ekj("hide",c.isJsActive),e.xp6(3),e.ekj("hide",!c.isJsActive),e.xp6(26),e.hij(" ",e.xi3(280,26,"app.module",g.isJsActive),"\n"),e.xp6(113),e.hij(" ",e.xi3(393,29,"app.module",Z.isJsActive),"\n"),e.xp6(17),e.hij(" ",e.xi3(410,32,"event.schema",_.isJsActive),"\n"),e.xp6(33),e.hij(" ",e.xi3(443,35,"click-link-event.schema",m.isJsActive),"\n"),e.xp6(13),e.hij(" ",e.xi3(456,38,"sign-up-event.schema",A.isJsActive),"\n"),e.xp6(19),e.hij(" ",e.xi3(475,41,"event.module",T.isJsActive),"\n")}},dependencies:[p.n,i.U,y.f,h.yS,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"MongoDB"}},{path:"file-upload",component:R,data:{title:"File upload"}},{path:"streaming-files",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-streaming-files"]],features:[e.qOj],decls:90,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/streaming-files.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","streaming-files"],[1,"info"],[1,"language-ts"],["appAnchor","","id","streamable-file-class"],["appAnchor","","id","cross-platform-support"],["appAnchor","","id","example"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Streaming files"),e.qZA(),e.TgZ(7,"blockquote",6)(8,"strong"),e._uU(9,"Note"),e.qZA(),e._uU(10," This chapter shows how you can stream files from your "),e.TgZ(11,"strong"),e._uU(12,"HTTP application"),e.qZA(),e._uU(13,". The examples presented below do not apply to GraphQL or Microservice applications.\n"),e.qZA(),e.TgZ(14,"p"),e._uU(15,"There may be times where you would like to send back a file from your REST API to the client. To do this with Nest, normally you'd do the following:"),e.qZA(),e.TgZ(16,"pre")(17,"code",7),e._uU(18,"\n@Controller('file')\nexport class FileController {\n  @Get()\n  getFile(@Res() res: Response) {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    file.pipe(res);\n  }\n}\n"),e.qZA()(),e.TgZ(19,"p"),e._uU(20,"But in doing so you end up losing access to your post-controller interceptor logic. To handle this, you can return a "),e.TgZ(21,"code"),e._uU(22,"StreamableFile"),e.qZA(),e._uU(23," instance and under the hood, the framework will take care of piping the response."),e.qZA(),e.TgZ(24,"h4",8)(25,"span"),e._uU(26,"Streamable File class"),e.qZA()(),e.TgZ(27,"p"),e._uU(28,"A "),e.TgZ(29,"code"),e._uU(30,"StreamableFile"),e.qZA(),e._uU(31," is a class that holds onto the stream that is to be returned. To create a new "),e.TgZ(32,"code"),e._uU(33,"StreamableFile"),e.qZA(),e._uU(34,", you can pass either a "),e.TgZ(35,"code"),e._uU(36,"Buffer"),e.qZA(),e._uU(37," or a "),e.TgZ(38,"code"),e._uU(39,"Stream"),e.qZA(),e._uU(40," to the "),e.TgZ(41,"code"),e._uU(42,"StreamableFile"),e.qZA(),e._uU(43," constructor."),e.qZA(),e.TgZ(44,"blockquote",6)(45,"strong"),e._uU(46,"hint"),e.qZA(),e._uU(47," The "),e.TgZ(48,"code"),e._uU(49,"StreamableFile"),e.qZA(),e._uU(50," class can be imported from "),e.TgZ(51,"code"),e._uU(52,"@nestjs/common"),e.qZA(),e._uU(53,".\n"),e.qZA(),e.TgZ(54,"h4",9)(55,"span"),e._uU(56,"Cross-platform support"),e.qZA()(),e.TgZ(57,"p"),e._uU(58,"Fastify, by default, can support sending files without needing to call "),e.TgZ(59,"code"),e._uU(60,"stream.pipe(res)"),e.qZA(),e._uU(61,", so you don't need to use the "),e.TgZ(62,"code"),e._uU(63,"StreamableFile"),e.qZA(),e._uU(64," class at all. However, Nest supports the use of "),e.TgZ(65,"code"),e._uU(66,"StreamableFile"),e.qZA(),e._uU(67," in both platform types, so if you end up switching between Express and Fastify there's no need to worry about compatibility between the two engines."),e.qZA(),e.TgZ(68,"h4",10)(69,"span"),e._uU(70,"Example"),e.qZA()(),e.TgZ(71,"p"),e._uU(72,"You can find a simple example of returning the "),e.TgZ(73,"code"),e._uU(74,"package.json"),e.qZA(),e._uU(75," as a file instead of a JSON below, but the idea extends out naturally to images, documents, and any other file type."),e.qZA(),e.TgZ(76,"pre")(77,"code",7),e._uU(78,"\nimport { Controller, Get, StreamableFile } from '@nestjs/common';\nimport { createReadStream } from 'fs';\nimport { join } from 'path';\n\n@Controller('file')\nexport class FileController {\n  @Get()\n  getFile(): StreamableFile {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    return new StreamableFile(file);\n  }\n}\n"),e.qZA()(),e.TgZ(79,"p"),e._uU(80,"The default content type is "),e.TgZ(81,"code"),e._uU(82,"application/octet-stream"),e.qZA(),e._uU(83,", if you need to customize the response you can use the "),e.TgZ(84,"code"),e._uU(85,"res.set"),e.qZA(),e._uU(86," method."),e.qZA(),e.TgZ(87,"pre")(88,"code",7),e._uU(89,"\nimport { Controller, Get, StreamableFile, Response } from '@nestjs/common';\nimport { createReadStream } from 'fs';\nimport { join } from 'path';\n\n@Controller('file')\nexport class FileController {\n  @Get()\n  getFile(@Response({ passthrough: true }) res): StreamableFile {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    res.set({\n      'Content-Type': 'application/json',\n      'Content-Disposition': 'attachment; filename=\"package.json\"',\n    });\n    return new StreamableFile(file);\n  }\n}\n"),e.qZA()()())},dependencies:[i.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"Streaming Files"}},{path:"logger",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-logger"]],features:[e.qOj],decls:447,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/logger.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","logger"],["rel","nofollow","target","_blank","href","https://github.com/winstonjs/winston"],["appAnchor","","id","basic-customization"],[1,"language-typescript"],[1,"info"],["appAnchor","","id","custom-implementation"],["href","techniques/logger#dependency-injection"],["appAnchor","","id","extend-built-in-logger"],["href","techniques/logger#using-the-logger-for-application-logging"],["href","techniques/logger#custom-logger-implementation"],["appAnchor","","id","dependency-injection"],["href","techniques/logger#injecting-a-custom-logger"],["appAnchor","","id","using-the-logger-for-application-logging"],[1,"language-bash"],["appAnchor","","id","injecting-a-custom-logger"],["routerLink","/fundamentals/injection-scopes"],["appAnchor","","id","use-external-logger"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Logger"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest comes with a built-in text-based logger which is used during application bootstrapping and several other circumstances such as displaying caught exceptions (i.e., system logging). This functionality is provided via the "),e.TgZ(9,"code"),e._uU(10,"Logger"),e.qZA(),e._uU(11," class in the "),e.TgZ(12,"code"),e._uU(13,"@nestjs/common"),e.qZA(),e._uU(14," package. You can fully control the behavior of the logging system, including any of the following:"),e.qZA(),e.TgZ(15,"ul")(16,"li"),e._uU(17,"disable logging entirely"),e.qZA(),e.TgZ(18,"li"),e._uU(19,"specify the log level of detail (e.g., display errors, warnings, debug information, etc.)"),e.qZA(),e.TgZ(20,"li"),e._uU(21,"override timestamp in the default logger (e.g., use ISO8601 standard as date format)"),e.qZA(),e.TgZ(22,"li"),e._uU(23,"completely override the default logger"),e.qZA(),e.TgZ(24,"li"),e._uU(25,"customize the default logger by extending it"),e.qZA(),e.TgZ(26,"li"),e._uU(27,"make use of dependency injection to simplify composing and testing your application"),e.qZA()(),e.TgZ(28,"p"),e._uU(29,"You can also make use of the built-in logger, or create your own custom implementation, to log your own application-level events and messages."),e.qZA(),e.TgZ(30,"p"),e._uU(31,"For more advanced logging functionality, you can make use of any Node.js logging package, such as "),e.TgZ(32,"a",6),e._uU(33,"Winston"),e.qZA(),e._uU(34,", to implement a completely custom, production grade logging system."),e.qZA(),e.TgZ(35,"h4",7)(36,"span"),e._uU(37,"Basic customization"),e.qZA()(),e.TgZ(38,"p"),e._uU(39,"To disable logging, set the "),e.TgZ(40,"code"),e._uU(41,"logger"),e.qZA(),e._uU(42," property to "),e.TgZ(43,"code"),e._uU(44,"false"),e.qZA(),e._uU(45," in the (optional) Nest application options object passed as the second argument to the "),e.TgZ(46,"code"),e._uU(47,"NestFactory.create()"),e.qZA(),e._uU(48," method."),e.qZA(),e.TgZ(49,"pre")(50,"code",8),e._uU(51,"\nconst app = await NestFactory.create(AppModule, {\n  logger: false,\n});\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(52,"p"),e._uU(53,"To enable specific logging levels, set the "),e.TgZ(54,"code"),e._uU(55,"logger"),e.qZA(),e._uU(56," property to an array of strings specifying the log levels to display, as follows:"),e.qZA(),e.TgZ(57,"pre")(58,"code",8),e._uU(59,"\nconst app = await NestFactory.create(AppModule, {\n  logger: ['error', 'warn'],\n});\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(60,"p"),e._uU(61,"Values in the array can be any combination of "),e.TgZ(62,"code"),e._uU(63,"'log'"),e.qZA(),e._uU(64,", "),e.TgZ(65,"code"),e._uU(66,"'error'"),e.qZA(),e._uU(67,", "),e.TgZ(68,"code"),e._uU(69,"'warn'"),e.qZA(),e._uU(70,", "),e.TgZ(71,"code"),e._uU(72,"'debug'"),e.qZA(),e._uU(73,", and "),e.TgZ(74,"code"),e._uU(75,"'verbose'"),e.qZA(),e._uU(76,"."),e.qZA(),e.TgZ(77,"blockquote",9)(78,"strong"),e._uU(79,"Hint"),e.qZA(),e._uU(80," To disable color in the default logger's messages, set the "),e.TgZ(81,"code"),e._uU(82,"NO_COLOR"),e.qZA(),e._uU(83," environment variable to some non-empty string.\n"),e.qZA(),e.TgZ(84,"h4",10)(85,"span"),e._uU(86,"Custom implementation"),e.qZA()(),e.TgZ(87,"p"),e._uU(88,"You can provide a custom logger implementation to be used by Nest for system logging by setting the value of the "),e.TgZ(89,"code"),e._uU(90,"logger"),e.qZA(),e._uU(91," property to an object that fulfills the "),e.TgZ(92,"code"),e._uU(93,"LoggerService"),e.qZA(),e._uU(94," interface. For example, you can tell Nest to use the built-in global JavaScript "),e.TgZ(95,"code"),e._uU(96,"console"),e.qZA(),e._uU(97," object (which implements the "),e.TgZ(98,"code"),e._uU(99,"LoggerService"),e.qZA(),e._uU(100," interface), as follows:"),e.qZA(),e.TgZ(101,"pre")(102,"code",8),e._uU(103,"\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(104,"p"),e._uU(105,"Implementing your own custom logger is straightforward. Simply implement each of the methods of the "),e.TgZ(106,"code"),e._uU(107,"LoggerService"),e.qZA(),e._uU(108," interface as shown below."),e.qZA(),e.TgZ(109,"pre")(110,"code",8),e._uU(111,"\nimport { LoggerService } from '@nestjs/common';\n\nexport class MyLogger implements LoggerService {\n  /**\n   * Write a 'log' level log.\n   */\n  log(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write an 'error' level log.\n   */\n  error(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write a 'warn' level log.\n   */\n  warn(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write a 'debug' level log.\n   */\n  debug?(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write a 'verbose' level log.\n   */\n  verbose?(message: any, ...optionalParams: any[]) {}\n}\n"),e.qZA()(),e.TgZ(112,"p"),e._uU(113,"You can then supply an instance of "),e.TgZ(114,"code"),e._uU(115,"MyLogger"),e.qZA(),e._uU(116," via the "),e.TgZ(117,"code"),e._uU(118,"logger"),e.qZA(),e._uU(119," property of the Nest application options object."),e.qZA(),e.TgZ(120,"pre")(121,"code",8),e._uU(122,"\nconst app = await NestFactory.create(AppModule, {\n  logger: new MyLogger(),\n});\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(123,"p"),e._uU(124,"This technique, while simple, doesn't utilize dependency injection for the "),e.TgZ(125,"code"),e._uU(126,"MyLogger"),e.qZA(),e._uU(127," class. This can pose some challenges, particularly for testing, and limit the reusability of "),e.TgZ(128,"code"),e._uU(129,"MyLogger"),e.qZA(),e._uU(130,". For a better solution, see the "),e.TgZ(131,"a",11),e._uU(132,"Dependency Injection"),e.qZA(),e._uU(133," section below."),e.qZA(),e.TgZ(134,"h4",12)(135,"span"),e._uU(136,"Extend built-in logger"),e.qZA()(),e.TgZ(137,"p"),e._uU(138,"Rather than writing a logger from scratch, you may be able to meet your needs by extending the built-in "),e.TgZ(139,"code"),e._uU(140,"ConsoleLogger"),e.qZA(),e._uU(141," class and overriding selected behavior of the default implementation."),e.qZA(),e.TgZ(142,"pre")(143,"code",8),e._uU(144,"\nimport { ConsoleLogger } from '@nestjs/common';\n\nexport class MyLogger extends ConsoleLogger {\n  error(message: any, stack?: string, context?: string) {\n    // add your tailored logic here\n    super.error(...arguments);\n  }\n}\n"),e.qZA()(),e.TgZ(145,"p"),e._uU(146,"You can use such an extended logger in your feature modules as described in the "),e.TgZ(147,"a",13),e._uU(148,"Using the logger for application logging"),e.qZA(),e._uU(149," section below."),e.qZA(),e.TgZ(150,"p"),e._uU(151,"You can tell Nest to use your extended logger for system logging by passing an instance of it via the "),e.TgZ(152,"code"),e._uU(153,"logger"),e.qZA(),e._uU(154," property of the application options object (as shown in the "),e.TgZ(155,"a",14),e._uU(156,"Custom implementation"),e.qZA(),e._uU(157," section above), or by using the technique shown in the "),e.TgZ(158,"a",11),e._uU(159,"Dependency Injection"),e.qZA(),e._uU(160," section below. If you do so, you should take care to call "),e.TgZ(161,"code"),e._uU(162,"super"),e.qZA(),e._uU(163,", as shown in the sample code above, to delegate the specific log method call to the parent (built-in) class so that Nest can rely on the built-in features it expects."),e.qZA(),e.TgZ(164,"p"),e._UZ(165,"app-banner-courses"),e.qZA(),e.TgZ(166,"h4",15)(167,"span"),e._uU(168,"Dependency injection"),e.qZA()(),e.TgZ(169,"p"),e._uU(170,"For more advanced logging functionality, you'll want to take advantage of dependency injection. For example, you may want to inject a "),e.TgZ(171,"code"),e._uU(172,"ConfigService"),e.qZA(),e._uU(173," into your logger to customize it, and in turn inject your custom logger into other controllers and/or providers. To enable dependency injection for your custom logger, create a class that implements "),e.TgZ(174,"code"),e._uU(175,"LoggerService"),e.qZA(),e._uU(176," and register that class as a provider in some module. For example, you can"),e.qZA(),e.TgZ(177,"ol")(178,"li"),e._uU(179,"Define a "),e.TgZ(180,"code"),e._uU(181,"MyLogger"),e.qZA(),e._uU(182," class that either extends the built-in "),e.TgZ(183,"code"),e._uU(184,"ConsoleLogger"),e.qZA(),e._uU(185," or completely overrides it, as shown in previous sections. Be sure to implement the "),e.TgZ(186,"code"),e._uU(187,"LoggerService"),e.qZA(),e._uU(188," interface."),e.qZA(),e.TgZ(189,"li"),e._uU(190,"Create a "),e.TgZ(191,"code"),e._uU(192,"LoggerModule"),e.qZA(),e._uU(193," as shown below, and provide "),e.TgZ(194,"code"),e._uU(195,"MyLogger"),e.qZA(),e._uU(196," from that module."),e.qZA()(),e.TgZ(197,"pre")(198,"code",8),e._uU(199,"\nimport { Module } from '@nestjs/common';\nimport { MyLogger } from './my-logger.service';\n\n@Module({\n  providers: [MyLogger],\n  exports: [MyLogger],\n})\nexport class LoggerModule {}\n"),e.qZA()(),e.TgZ(200,"p"),e._uU(201,"With this construct, you are now providing your custom logger for use by any other module. Because your "),e.TgZ(202,"code"),e._uU(203,"MyLogger"),e.qZA(),e._uU(204," class is part of a module, it can use dependency injection (for example, to inject a "),e.TgZ(205,"code"),e._uU(206,"ConfigService"),e.qZA(),e._uU(207,"). There's one more technique needed to provide this custom logger for use by Nest for system logging (e.g., for bootstrapping and error handling)."),e.qZA(),e.TgZ(208,"p"),e._uU(209,"Because application instantiation ("),e.TgZ(210,"code"),e._uU(211,"NestFactory.create()"),e.qZA(),e._uU(212,") happens outside the context of any module, it doesn't participate in the normal Dependency Injection phase of initialization. So we must ensure that at least one application module imports the "),e.TgZ(213,"code"),e._uU(214,"LoggerModule"),e.qZA(),e._uU(215," to trigger Nest to instantiate a singleton instance of our "),e.TgZ(216,"code"),e._uU(217,"MyLogger"),e.qZA(),e._uU(218," class."),e.qZA(),e.TgZ(219,"p"),e._uU(220,"We can then instruct Nest to use the same singleton instance of "),e.TgZ(221,"code"),e._uU(222,"MyLogger"),e.qZA(),e._uU(223," with the following construction:"),e.qZA(),e.TgZ(224,"pre")(225,"code",8),e._uU(226,"\nconst app = await NestFactory.create(ApplicationModule, {\n  bufferLogs: true,\n});\napp.useLogger(app.get(MyLogger));\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(227,"blockquote",9)(228,"strong"),e._uU(229,"Note"),e.qZA(),e._uU(230," In the example above, we set the "),e.TgZ(231,"code"),e._uU(232,"bufferLogs"),e.qZA(),e._uU(233," to "),e.TgZ(234,"code"),e._uU(235,"true"),e.qZA(),e._uU(236," to make sure all logs will be buffered until a custom logger is attached ("),e.TgZ(237,"code"),e._uU(238,"MyLogger"),e.qZA(),e._uU(239," in this case) and the application initialisation process either completes or fails. If the initialisation process fails, Nest will fallback to the original "),e.TgZ(240,"code"),e._uU(241,"ConsoleLogger"),e.qZA(),e._uU(242," to print out any reported error messages. Also, you can set the "),e.TgZ(243,"code"),e._uU(244,"autoFlushLogs"),e.qZA(),e._uU(245," to "),e.TgZ(246,"code"),e._uU(247,"false"),e.qZA(),e._uU(248," (default "),e.TgZ(249,"code"),e._uU(250,"true"),e.qZA(),e._uU(251,") to manually flush logs (using the "),e.TgZ(252,"code"),e._uU(253,"Logger#flush()"),e.qZA(),e._uU(254," method).\n"),e.qZA(),e.TgZ(255,"p"),e._uU(256,"Here we use the "),e.TgZ(257,"code"),e._uU(258,"get()"),e.qZA(),e._uU(259," method on the "),e.TgZ(260,"code"),e._uU(261,"NestApplication"),e.qZA(),e._uU(262," instance to retrieve the singleton instance of the "),e.TgZ(263,"code"),e._uU(264,"MyLogger"),e.qZA(),e._uU(265,' object. This technique is essentially a way to "inject" an instance of a logger for use by Nest. The '),e.TgZ(266,"code"),e._uU(267,"app.get()"),e.qZA(),e._uU(268," call retrieves the singleton instance of "),e.TgZ(269,"code"),e._uU(270,"MyLogger"),e.qZA(),e._uU(271,", and depends on that instance being first injected in another module, as described above."),e.qZA(),e.TgZ(272,"p"),e._uU(273,"You can also inject this "),e.TgZ(274,"code"),e._uU(275,"MyLogger"),e.qZA(),e._uU(276," provider in your feature classes, thus ensuring consistent logging behavior across both Nest system logging and application logging. See "),e.TgZ(277,"a",13),e._uU(278,"Using the logger for application logging"),e.qZA(),e._uU(279," and "),e.TgZ(280,"a",16),e._uU(281,"Injecting a custom logger"),e.qZA(),e._uU(282," below for more information."),e.qZA(),e.TgZ(283,"h4",17)(284,"span"),e._uU(285,"Using the logger for application logging"),e.qZA()(),e.TgZ(286,"p"),e._uU(287,"We can combine several of the techniques above to provide consistent behavior and formatting across both Nest system logging and our own application event/message logging."),e.qZA(),e.TgZ(288,"p"),e._uU(289,"A good practice is to instantiate "),e.TgZ(290,"code"),e._uU(291,"Logger"),e.qZA(),e._uU(292," class from "),e.TgZ(293,"code"),e._uU(294,"@nestjs/common"),e.qZA(),e._uU(295," in each of our services. We can supply our service name as the "),e.TgZ(296,"code"),e._uU(297,"context"),e.qZA(),e._uU(298," argument in the "),e.TgZ(299,"code"),e._uU(300,"Logger"),e.qZA(),e._uU(301," constructor, like so:"),e.qZA(),e.TgZ(302,"pre")(303,"code",8),e._uU(304,"\nimport { Logger, Injectable } from '@nestjs/common';\n\n@Injectable()\nclass MyService {\n  private readonly logger = new Logger(MyService.name);\n\n  doSomething() {\n    this.logger.log('Doing something...');\n  }\n}\n"),e.qZA()(),e.TgZ(305,"p"),e._uU(306,"In the default logger implementation, "),e.TgZ(307,"code"),e._uU(308,"context"),e.qZA(),e._uU(309," is printed in the square brackets, like "),e.TgZ(310,"code"),e._uU(311,"NestFactory"),e.qZA(),e._uU(312," in the example below:"),e.qZA(),e.TgZ(313,"pre")(314,"code",18),e._uU(315,"\n[Nest] 19096   - 12/08/2019, 7:12:59 AM   [NestFactory] Starting Nest application...\n"),e.qZA()(),e.TgZ(316,"p"),e._uU(317,"If we supply a custom logger via "),e.TgZ(318,"code"),e._uU(319,"app.useLogger()"),e.qZA(),e._uU(320,", it will actually be used by Nest internally. That means that our code remains implementation agnostic, while we can easily substitute the default logger for our custom one by calling "),e.TgZ(321,"code"),e._uU(322,"app.useLogger()"),e.qZA(),e._uU(323,"."),e.qZA(),e.TgZ(324,"p"),e._uU(325,"That way if we follow the steps from the previous section and call "),e.TgZ(326,"code"),e._uU(327,"app.useLogger(app.get(MyLogger))"),e.qZA(),e._uU(328,", the following calls to "),e.TgZ(329,"code"),e._uU(330,"this.logger.log()"),e.qZA(),e._uU(331," from "),e.TgZ(332,"code"),e._uU(333,"MyService"),e.qZA(),e._uU(334," would result in calls to method "),e.TgZ(335,"code"),e._uU(336,"log"),e.qZA(),e._uU(337," from "),e.TgZ(338,"code"),e._uU(339,"MyLogger"),e.qZA(),e._uU(340," instance."),e.qZA(),e.TgZ(341,"p"),e._uU(342,"This should be suitable for most cases. But if you need more customization (like adding and calling custom methods), move to the next section."),e.qZA(),e.TgZ(343,"h4",19)(344,"span"),e._uU(345,"Injecting a custom logger"),e.qZA()(),e.TgZ(346,"p"),e._uU(347,"To start, extend the built-in logger with code like the following. We supply the "),e.TgZ(348,"code"),e._uU(349,"scope"),e.qZA(),e._uU(350," option as configuration metadata for the "),e.TgZ(351,"code"),e._uU(352,"ConsoleLogger"),e.qZA(),e._uU(353," class, specifying a "),e.TgZ(354,"a",20),e._uU(355,"transient"),e.qZA(),e._uU(356," scope, to ensure that we'll have a unique instance of the "),e.TgZ(357,"code"),e._uU(358,"MyLogger"),e.qZA(),e._uU(359," in each feature module. In this example, we do not extend the individual "),e.TgZ(360,"code"),e._uU(361,"ConsoleLogger"),e.qZA(),e._uU(362," methods (like "),e.TgZ(363,"code"),e._uU(364,"log()"),e.qZA(),e._uU(365,", "),e.TgZ(366,"code"),e._uU(367,"warn()"),e.qZA(),e._uU(368,", etc.), though you may choose to do so."),e.qZA(),e.TgZ(369,"pre")(370,"code",8),e._uU(371,"\nimport { Injectable, Scope, ConsoleLogger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class MyLogger extends ConsoleLogger {\n  customLog() {\n    this.log('Please feed the cat!');\n  }\n}\n"),e.qZA()(),e.TgZ(372,"p"),e._uU(373,"Next, create a "),e.TgZ(374,"code"),e._uU(375,"LoggerModule"),e.qZA(),e._uU(376," with a construction like this:"),e.qZA(),e.TgZ(377,"pre")(378,"code",8),e._uU(379,"\nimport { Module } from '@nestjs/common';\nimport { MyLogger } from './my-logger.service';\n\n@Module({\n  providers: [MyLogger],\n  exports: [MyLogger],\n})\nexport class LoggerModule {}\n"),e.qZA()(),e.TgZ(380,"p"),e._uU(381,"Next, import the "),e.TgZ(382,"code"),e._uU(383,"LoggerModule"),e.qZA(),e._uU(384," into your feature module. Since we extended default "),e.TgZ(385,"code"),e._uU(386,"Logger"),e.qZA(),e._uU(387," we have the convenience of using "),e.TgZ(388,"code"),e._uU(389,"setContext"),e.qZA(),e._uU(390," method. So we can start using the context-aware custom logger, like this:"),e.qZA(),e.TgZ(391,"pre")(392,"code",8),e._uU(393,"\nimport { Injectable } from '@nestjs/common';\nimport { MyLogger } from './my-logger.service';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  constructor(private myLogger: MyLogger) {\n    // Due to transient scope, CatsService has its own unique instance of MyLogger,\n    // so setting context here will not affect other instances in other services\n    this.myLogger.setContext('CatsService');\n  }\n\n  findAll(): Cat[] {\n    // You can call all the default methods\n    this.myLogger.warn('About to return cats!');\n    // And your custom methods\n    this.myLogger.customLog();\n    return this.cats;\n  }\n}\n"),e.qZA()(),e.TgZ(394,"p"),e._uU(395,"Finally, instruct Nest to use an instance of the custom logger in your "),e.TgZ(396,"code"),e._uU(397,"main.ts"),e.qZA(),e._uU(398," file as shown below. Of course in this example, we haven't actually customized the logger behavior (by extending the "),e.TgZ(399,"code"),e._uU(400,"Logger"),e.qZA(),e._uU(401," methods like "),e.TgZ(402,"code"),e._uU(403,"log()"),e.qZA(),e._uU(404,", "),e.TgZ(405,"code"),e._uU(406,"warn()"),e.qZA(),e._uU(407,", etc.), so this step isn't actually needed. But it "),e.TgZ(408,"strong"),e._uU(409,"would"),e.qZA(),e._uU(410," be needed if you added custom logic to those methods and wanted Nest to use the same implementation."),e.qZA(),e.TgZ(411,"pre")(412,"code",8),e._uU(413,"\nconst app = await NestFactory.create(ApplicationModule, {\n  bufferLogs: true,\n});\napp.useLogger(new MyLogger());\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(414,"blockquote",9)(415,"strong"),e._uU(416,"Hint"),e.qZA(),e._uU(417," Alternatively, instead of setting "),e.TgZ(418,"code"),e._uU(419,"bufferLogs"),e.qZA(),e._uU(420," to "),e.TgZ(421,"code"),e._uU(422,"true"),e.qZA(),e._uU(423,", you could temporarily disable the logger with "),e.TgZ(424,"code"),e._uU(425,"logger: false"),e.qZA(),e._uU(426," instruction. Be mindful that if you supply "),e.TgZ(427,"code"),e._uU(428,"logger: false"),e.qZA(),e._uU(429," to "),e.TgZ(430,"code"),e._uU(431,"NestFactory.create"),e.qZA(),e._uU(432,", nothing will be logged until you call "),e.TgZ(433,"code"),e._uU(434,"useLogger"),e.qZA(),e._uU(435,", so you may miss some important initialization errors. If you don't mind that some of your initial messages will be logged with the default logger, you can just omit the "),e.TgZ(436,"code"),e._uU(437,"logger: false"),e.qZA(),e._uU(438," option.\n"),e.qZA(),e.TgZ(439,"h4",21)(440,"span"),e._uU(441,"Use external logger"),e.qZA()(),e.TgZ(442,"p"),e._uU(443,"Production applications often have specific logging requirements, including advanced filtering, formatting and centralized logging. Nest's built-in logger is used for monitoring Nest system behavior, and can also be useful for basic formatted text logging in your feature modules while in development, but production applications often take advantage of dedicated logging modules like "),e.TgZ(444,"a",6),e._uU(445,"Winston"),e.qZA(),e._uU(446,". As with any standard Node.js application, you can take full advantage of such modules in Nest."),e.qZA()())},dependencies:[i.U,y.f,h.yS],encapsulation:2,changeDetection:0}),t})(),data:{title:"Logger"}},{path:"performance",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-performance"]],features:[e.qOj],decls:110,vars:4,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/performance.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","performance-fastify"],["rel","nofollow","target","_blank","href","https://expressjs.com/"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify"],[1,"info"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","adapter"],[1,"filename"],["appb5df66ed45a4ccdce2e00dabcc4e003e826477be",""],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://www.fastify.io/docs/latest/Guides/Getting-Started/#your-first-server"],["appAnchor","","id","platform-specific-packages"],["appAnchor","","id","redirect-response"],["appAnchor","","id","fastify-options"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/10-fastify"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Performance (Fastify)"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"By default, Nest makes use of the "),e.TgZ(9,"a",6),e._uU(10,"Express"),e.qZA(),e._uU(11," framework. As mentioned earlier, Nest also provides compatibility with other libraries such as, for example, "),e.TgZ(12,"a",7),e._uU(13,"Fastify"),e.qZA(),e._uU(14,". Nest achieves this framework independence by implementing a framework adapter whose primary function is to proxy middleware and handlers to appropriate library-specific implementations."),e.qZA(),e.TgZ(15,"blockquote",8)(16,"strong"),e._uU(17,"Hint"),e.qZA(),e._uU(18," Note that in order for a framework adapter to be implemented, the target library has to provide similar request/response pipeline processing as found in Express.\n"),e.qZA(),e.TgZ(19,"p")(20,"a",7),e._uU(21,"Fastify"),e.qZA(),e._uU(22," provides a good alternative framework for Nest because it solves design issues in a similar manner to Express. However, fastify is much "),e.TgZ(23,"strong"),e._uU(24,"faster"),e.qZA(),e._uU(25," than Express, achieving almost two times better benchmarks results. A fair question is why does Nest use Express as the default HTTP provider? The reason is that Express is widely-used, well-known, and has an enormous set of compatible middleware, which is available to Nest users out-of-the-box."),e.qZA(),e.TgZ(26,"p"),e._uU(27,"But since Nest provides framework-independence, you can easily migrate between them. Fastify can be a better choice when you place high value on very fast performance. To utilize Fastify, simply choose the built-in "),e.TgZ(28,"code"),e._uU(29,"FastifyAdapter"),e.qZA(),e._uU(30," as shown in this chapter."),e.qZA(),e.TgZ(31,"h4",9)(32,"span"),e._uU(33,"Installation"),e.qZA()(),e.TgZ(34,"p"),e._uU(35,"First, we need to install the required package:"),e.qZA(),e.TgZ(36,"pre")(37,"code",10),e._uU(38,"\n$ npm i --save @nestjs/platform-fastify\n"),e.qZA()(),e.TgZ(39,"h4",11)(40,"span"),e._uU(41,"Adapter"),e.qZA()(),e.TgZ(42,"p"),e._uU(43,"Once the Fastify platform is installed, we can use the "),e.TgZ(44,"code"),e._uU(45,"FastifyAdapter"),e.qZA(),e._uU(46,"."),e.qZA(),e.TgZ(47,"span",12),e._uU(48),e.ALo(49,"extension"),e._UZ(50,"app-tabs",null,13),e.qZA(),e.TgZ(52,"pre")(53,"code",14),e._uU(54,"\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter()\n  );\n  await app.listen(3000);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(55,"p"),e._uU(56,"By default, Fastify listens only on the "),e.TgZ(57,"code"),e._uU(58,"localhost 127.0.0.1"),e.qZA(),e._uU(59," interface ("),e.TgZ(60,"a",15),e._uU(61,"read more"),e.qZA(),e._uU(62,"). If you want to accept connections on other hosts, you should specify "),e.TgZ(63,"code"),e._uU(64,"'0.0.0.0'"),e.qZA(),e._uU(65," in the "),e.TgZ(66,"code"),e._uU(67,"listen()"),e.qZA(),e._uU(68," call:"),e.qZA(),e.TgZ(69,"pre")(70,"code",14),e._uU(71,"\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n  await app.listen(3000, '0.0.0.0');\n}\n"),e.qZA()(),e.TgZ(72,"h4",16)(73,"span"),e._uU(74,"Platform specific packages"),e.qZA()(),e.TgZ(75,"p"),e._uU(76,"Keep in mind that when you use the "),e.TgZ(77,"code"),e._uU(78,"FastifyAdapter"),e.qZA(),e._uU(79,", Nest uses Fastify as the "),e.TgZ(80,"strong"),e._uU(81,"HTTP provider"),e.qZA(),e._uU(82,". This means that each recipe that relies on Express may no longer work. You should, instead, use Fastify equivalent packages."),e.qZA(),e.TgZ(83,"h4",17)(84,"span"),e._uU(85,"Redirect response"),e.qZA()(),e.TgZ(86,"p"),e._uU(87,"Fastify handles redirect responses slightly differently than Express. To do a proper redirect with Fastify, return both the status code and the URL, as follows:"),e.qZA(),e.TgZ(88,"pre")(89,"code",14),e._uU(90,"\n@Get()\nindex(@Res() res) {\n  res.status(302).redirect('/login');\n}\n"),e.qZA()(),e.TgZ(91,"h4",18)(92,"span"),e._uU(93,"Fastify options"),e.qZA()(),e.TgZ(94,"p"),e._uU(95,"You can pass options into the Fastify constructor through the "),e.TgZ(96,"code"),e._uU(97,"FastifyAdapter"),e.qZA(),e._uU(98," constructor. For example:"),e.qZA(),e.TgZ(99,"pre")(100,"code",14),e._uU(101,"\nnew FastifyAdapter({ logger: true });\n"),e.qZA()(),e.TgZ(102,"h4",19)(103,"span"),e._uU(104,"Example"),e.qZA()(),e.TgZ(105,"p"),e._uU(106,"A working example is available "),e.TgZ(107,"a",20),e._uU(108,"here"),e.qZA(),e._uU(109,"."),e.qZA()()),2&n){const a=e.MAs(51);e.xp6(48),e.hij(" ",e.xi3(49,1,"main",a.isJsActive),"\n")}},dependencies:[p.n,i.U,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"Performance (Fastify)"}},{path:"http-module",component:F,data:{title:"HTTP module"}},{path:"configuration",component:S,data:{title:"Configuration"}},{path:"security",redirectTo:"/security/helmet"},{path:"cookies",component:E,data:{title:"Cookies"}},{path:"task-scheduling",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-task-scheduling"]],features:[e.qOj],decls:606,vars:4,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/task-scheduling.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","task-scheduling"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Cron"],["rel","nofollow","target","_blank","href","https://github.com/kelektiv/node-cron"],["appAnchor","","id","installation"],[1,"language-bash"],[1,"filename"],["app5a201c48dcefb197f7a7f6291aaa34d41ae22c4a",""],[1,"language-typescript"],["href","techniques/task-scheduling#declarative-cron-jobs"],["href","techniques/task-scheduling#declarative-timeouts"],["href","techniques/task-scheduling#declarative-intervals"],["appAnchor","","id","declarative-cron-jobs"],["rel","nofollow","target","_blank","href","http://crontab.org/"],[1,"language-javascript"],[1,"info"],["href","http://momentjs.com/timezone/"],["href","/techniques/task-scheduling#dynamic-schedule-module-api"],["appAnchor","","id","declarative-intervals"],["href","techniques/task-scheduling#dynamic-intervals"],["appAnchor","","id","declarative-timeouts"],["href","techniques/task-scheduling#dynamic-timeouts"],["appAnchor","","id","dynamic-schedule-module-api"],["appAnchor","","id","dynamic-cron-jobs"],[1,"warning"],["appAnchor","","id","dynamic-intervals"],["appAnchor","","id","dynamic-timeouts"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/27-scheduling"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Task Scheduling"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Task scheduling allows you to schedule arbitrary code (methods/functions) to execute at a fixed date/time, at recurring intervals, or once after a specified interval. In the Linux world, this is often handled by packages like "),e.TgZ(9,"a",6),e._uU(10,"cron"),e.qZA(),e._uU(11," at the OS level. For Node.js apps, there are several packages that emulate cron-like functionality. Nest provides the "),e.TgZ(12,"code"),e._uU(13,"@nestjs/schedule"),e.qZA(),e._uU(14," package, which integrates with the popular Node.js "),e.TgZ(15,"a",7),e._uU(16,"node-cron"),e.qZA(),e._uU(17," package. We'll cover this package in the current chapter."),e.qZA(),e.TgZ(18,"h4",8)(19,"span"),e._uU(20,"Installation"),e.qZA()(),e.TgZ(21,"p"),e._uU(22,"To begin using it, we first install the required dependencies."),e.qZA(),e.TgZ(23,"pre")(24,"code",9),e._uU(25,"\n$ npm install --save @nestjs/schedule\n$ npm install --save-dev @types/cron\n"),e.qZA()(),e.TgZ(26,"p"),e._uU(27,"To activate job scheduling, import the "),e.TgZ(28,"code"),e._uU(29,"ScheduleModule"),e.qZA(),e._uU(30," into the root "),e.TgZ(31,"code"),e._uU(32,"AppModule"),e.qZA(),e._uU(33," and run the "),e.TgZ(34,"code"),e._uU(35,"forRoot()"),e.qZA(),e._uU(36," static method as shown below:"),e.qZA(),e.TgZ(37,"span",10),e._uU(38),e.ALo(39,"extension"),e._UZ(40,"app-tabs",null,11),e.qZA(),e.TgZ(42,"pre")(43,"code",12),e._uU(44,"\nimport { Module } from '@nestjs/common';\nimport { ScheduleModule } from '@nestjs/schedule';\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot()\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(45,"p"),e._uU(46,"The "),e.TgZ(47,"code"),e._uU(48,".forRoot()"),e.qZA(),e._uU(49," call initializes the scheduler and registers any declarative "),e.TgZ(50,"a",13),e._uU(51,"cron jobs"),e.qZA(),e._uU(52,", "),e.TgZ(53,"a",14),e._uU(54,"timeouts"),e.qZA(),e._uU(55," and "),e.TgZ(56,"a",15),e._uU(57,"intervals"),e.qZA(),e._uU(58," that exist within your app. Registration occurs when the "),e.TgZ(59,"code"),e._uU(60,"onApplicationBootstrap"),e.qZA(),e._uU(61," lifecycle hook occurs, ensuring that all modules have loaded and declared any scheduled jobs."),e.qZA(),e.TgZ(62,"h4",16)(63,"span"),e._uU(64,"Declarative cron jobs"),e.qZA()(),e.TgZ(65,"p"),e._uU(66,"A cron job schedules an arbitrary function (method call) to run automatically. Cron jobs can run:"),e.qZA(),e.TgZ(67,"ul")(68,"li"),e._uU(69,"Once, at a specified date/time."),e.qZA(),e.TgZ(70,"li"),e._uU(71,"On a recurring basis; recurring jobs can run at a specified instant within a specified interval (for example, once per hour, once per week, once every 5 minutes)"),e.qZA()(),e.TgZ(72,"p"),e._uU(73,"Declare a cron job with the "),e.TgZ(74,"code"),e._uU(75,"@Cron()"),e.qZA(),e._uU(76," decorator preceding the method definition containing the code to be executed, as follows:"),e.qZA(),e.TgZ(77,"pre")(78,"code",12),e._uU(79,"\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\n\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  @Cron('45 * * * * *')\n  handleCron() {\n    this.logger.debug('Called when the current second is 45');\n  }\n}\n"),e.qZA()(),e.TgZ(80,"p"),e._uU(81,"In this example, the "),e.TgZ(82,"code"),e._uU(83,"handleCron()"),e.qZA(),e._uU(84," method will be called each time the current second is "),e.TgZ(85,"code"),e._uU(86,"45"),e.qZA(),e._uU(87,". In other words, the method will be run once per minute, at the 45 second mark."),e.qZA(),e.TgZ(88,"p"),e._uU(89,"The "),e.TgZ(90,"code"),e._uU(91,"@Cron()"),e.qZA(),e._uU(92," decorator supports all standard "),e.TgZ(93,"a",17),e._uU(94,"cron patterns"),e.qZA(),e._uU(95,":"),e.qZA(),e.TgZ(96,"ul")(97,"li"),e._uU(98,"Asterisk (e.g. "),e.TgZ(99,"code"),e._uU(100,"*"),e.qZA(),e._uU(101,")"),e.qZA(),e.TgZ(102,"li"),e._uU(103,"Ranges (e.g. "),e.TgZ(104,"code"),e._uU(105,"1-3,5"),e.qZA(),e._uU(106,")"),e.qZA(),e.TgZ(107,"li"),e._uU(108,"Steps (e.g. "),e.TgZ(109,"code"),e._uU(110,"*/2"),e.qZA(),e._uU(111,")"),e.qZA()(),e.TgZ(112,"p"),e._uU(113,"In the example above, we passed "),e.TgZ(114,"code"),e._uU(115,"45 * * * * *"),e.qZA(),e._uU(116," to the decorator. The following key shows how each position in the cron pattern string is interpreted:"),e.qZA(),e.TgZ(117,"pre",18)(118,"code",18),e._uU(119,"\n* * * * * *\n| | | | | |\n| | | | | day of week\n| | | | months\n| | | day of month\n| | hours\n| minutes\nseconds (optional)\n"),e.qZA()(),e.TgZ(120,"p"),e._uU(121,"Some sample cron patterns are:"),e.qZA(),e.TgZ(122,"table")(123,"tbody")(124,"tr")(125,"td")(126,"code"),e._uU(127,"* * * * * *"),e.qZA()(),e.TgZ(128,"td"),e._uU(129,"every second"),e.qZA()(),e.TgZ(130,"tr")(131,"td")(132,"code"),e._uU(133,"45 * * * * *"),e.qZA()(),e.TgZ(134,"td"),e._uU(135,"every minute, on the 45th second"),e.qZA()(),e.TgZ(136,"tr")(137,"td")(138,"code"),e._uU(139,"0 10 * * * *"),e.qZA()(),e.TgZ(140,"td"),e._uU(141,"every hour, at the start of the 10th minute"),e.qZA()(),e.TgZ(142,"tr")(143,"td")(144,"code"),e._uU(145,"0 */30 9-17 * * *"),e.qZA()(),e.TgZ(146,"td"),e._uU(147,"every 30 minutes between 9am and 5pm"),e.qZA()(),e.TgZ(148,"tr")(149,"td")(150,"code"),e._uU(151,"0 30 11 * * 1-5"),e.qZA()(),e.TgZ(152,"td"),e._uU(153,"Monday to Friday at 11:30am"),e.qZA()()()(),e.TgZ(154,"p"),e._uU(155,"The "),e.TgZ(156,"code"),e._uU(157,"@nestjs/schedule"),e.qZA(),e._uU(158," package provides a convenience enum with commonly used cron patterns. You can use this enum as follows:"),e.qZA(),e.TgZ(159,"pre")(160,"code",12),e._uU(161,"\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  @Cron(CronExpression.EVERY_30_SECONDS)\n  handleCron() {\n    this.logger.debug('Called every 30 seconds');\n  }\n}\n"),e.qZA()(),e.TgZ(162,"p"),e._uU(163,"In this example, the "),e.TgZ(164,"code"),e._uU(165,"handleCron()"),e.qZA(),e._uU(166," method will be called every "),e.TgZ(167,"code"),e._uU(168,"30"),e.qZA(),e._uU(169," seconds."),e.qZA(),e.TgZ(170,"p"),e._uU(171,"Alternatively, you can supply a JavaScript "),e.TgZ(172,"code"),e._uU(173,"Date"),e.qZA(),e._uU(174," object to the "),e.TgZ(175,"code"),e._uU(176,"@Cron()"),e.qZA(),e._uU(177," decorator. Doing so causes the job to execute exactly once, at the specified date."),e.qZA(),e.TgZ(178,"blockquote",19)(179,"strong"),e._uU(180,"Hint"),e.qZA(),e._uU(181," Use JavaScript date arithmetic to schedule jobs relative to the current date. For example, "),e.TgZ(182,"code"),e._uU(183,"@Cron(new Date(Date.now() + 10 * 1000))"),e.qZA(),e._uU(184," to schedule a job to run 10 seconds after the app starts.\n"),e.qZA(),e.TgZ(185,"p"),e._uU(186,"Also, you can supply additional options as the second parameter to the "),e.TgZ(187,"code"),e._uU(188,"@Cron()"),e.qZA(),e._uU(189," decorator."),e.qZA(),e.TgZ(190,"table")(191,"tbody")(192,"tr")(193,"td")(194,"code"),e._uU(195,"name"),e.qZA()(),e.TgZ(196,"td"),e._uU(197," Useful to access and control a cron job after it's been declared. "),e.qZA()(),e.TgZ(198,"tr")(199,"td")(200,"code"),e._uU(201,"timeZone"),e.qZA()(),e.TgZ(202,"td"),e._uU(203," Specify the timezone for the execution. This will modify the actual time relative to your timezone. If the timezone is invalid, an error is thrown. You can check all timezones available at "),e.TgZ(204,"a",20),e._uU(205,"Moment Timezone"),e.qZA(),e._uU(206," website. "),e.qZA()(),e.TgZ(207,"tr")(208,"td")(209,"code"),e._uU(210,"utcOffset"),e.qZA()(),e.TgZ(211,"td"),e._uU(212," This allows you to specify the offset of your timezone rather than using the "),e.TgZ(213,"code"),e._uU(214,"timeZone"),e.qZA(),e._uU(215," param. "),e.qZA()()()(),e.TgZ(216,"pre")(217,"code",12),e._uU(218,"\nimport { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Injectable()\nexport class NotificationService {\n  @Cron('* * 0 * * *', {\n    name: 'notifications',\n    timeZone: 'Europe/Paris',\n  })\n  triggerNotifications() {}\n}\n"),e.qZA()(),e.TgZ(219,"p"),e._uU(220,"You can access and control a cron job after it's been declared, or dynamically create a cron job (where its cron pattern is defined at runtime) with the "),e.TgZ(221,"a",21),e._uU(222,"Dynamic API"),e.qZA(),e._uU(223,". To access a declarative cron job via the API, you must associate the job with a name by passing the "),e.TgZ(224,"code"),e._uU(225,"name"),e.qZA(),e._uU(226," property in an optional options object as the second argument of the decorator."),e.qZA(),e.TgZ(227,"h4",22)(228,"span"),e._uU(229,"Declarative intervals"),e.qZA()(),e.TgZ(230,"p"),e._uU(231,"To declare that a method should run at a (recurring) specified interval, prefix the method definition with the "),e.TgZ(232,"code"),e._uU(233,"@Interval()"),e.qZA(),e._uU(234," decorator. Pass the interval value, as a number in milliseconds, to the decorator as shown below:"),e.qZA(),e.TgZ(235,"pre")(236,"code",12),e._uU(237,"\n@Interval(10000)\nhandleInterval() {\n  this.logger.debug('Called every 10 seconds');\n}\n"),e.qZA()(),e.TgZ(238,"blockquote",19)(239,"strong"),e._uU(240,"Hint"),e.qZA(),e._uU(241," This mechanism uses the JavaScript "),e.TgZ(242,"code"),e._uU(243,"setInterval()"),e.qZA(),e._uU(244," function under the hood. You can also utilize a cron job to schedule recurring jobs.\n"),e.qZA(),e.TgZ(245,"p"),e._uU(246,"If you want to control your declarative interval from outside the declaring class via the "),e.TgZ(247,"a",21),e._uU(248,"Dynamic API"),e.qZA(),e._uU(249,", associate the interval with a name using the following construction:"),e.qZA(),e.TgZ(250,"pre")(251,"code",12),e._uU(252,"\n@Interval('notifications', 2500)\nhandleInterval() {}\n"),e.qZA()(),e.TgZ(253,"p"),e._uU(254,"The "),e.TgZ(255,"a",23),e._uU(256,"Dynamic API"),e.qZA(),e._uU(257," also enables "),e.TgZ(258,"strong"),e._uU(259,"creating"),e.qZA(),e._uU(260," dynamic intervals, where the interval's properties are defined at runtime, and "),e.TgZ(261,"strong"),e._uU(262,"listing and deleting"),e.qZA(),e._uU(263," them."),e.qZA(),e.TgZ(264,"p"),e._UZ(265,"app-banner-enterprise"),e.qZA(),e.TgZ(266,"h4",24)(267,"span"),e._uU(268,"Declarative timeouts"),e.qZA()(),e.TgZ(269,"p"),e._uU(270,"To declare that a method should run (once) at a specified timeout, prefix the method definition with the "),e.TgZ(271,"code"),e._uU(272,"@Timeout()"),e.qZA(),e._uU(273," decorator. Pass the relative time offset (in milliseconds), from application startup, to the decorator as shown below:"),e.qZA(),e.TgZ(274,"pre")(275,"code",12),e._uU(276,"\n@Timeout(5000)\nhandleTimeout() {\n  this.logger.debug('Called once after 5 seconds');\n}\n"),e.qZA()(),e.TgZ(277,"blockquote",19)(278,"strong"),e._uU(279,"Hint"),e.qZA(),e._uU(280," This mechanism uses the JavaScript "),e.TgZ(281,"code"),e._uU(282,"setTimeout()"),e.qZA(),e._uU(283," function under the hood.\n"),e.qZA(),e.TgZ(284,"p"),e._uU(285,"If you want to control your declarative timeout from outside the declaring class via the "),e.TgZ(286,"a",21),e._uU(287,"Dynamic API"),e.qZA(),e._uU(288,", associate the timeout with a name using the following construction:"),e.qZA(),e.TgZ(289,"pre")(290,"code",12),e._uU(291,"\n@Timeout('notifications', 2500)\nhandleTimeout() {}\n"),e.qZA()(),e.TgZ(292,"p"),e._uU(293,"The "),e.TgZ(294,"a",25),e._uU(295,"Dynamic API"),e.qZA(),e._uU(296," also enables "),e.TgZ(297,"strong"),e._uU(298,"creating"),e.qZA(),e._uU(299," dynamic timeouts, where the timeout's properties are defined at runtime, and "),e.TgZ(300,"strong"),e._uU(301,"listing and deleting"),e.qZA(),e._uU(302," them."),e.qZA(),e.TgZ(303,"h4",26)(304,"span"),e._uU(305,"Dynamic schedule module API"),e.qZA()(),e.TgZ(306,"p"),e._uU(307,"The "),e.TgZ(308,"code"),e._uU(309,"@nestjs/schedule"),e.qZA(),e._uU(310," module provides a dynamic API that enables managing declarative "),e.TgZ(311,"a",13),e._uU(312,"cron jobs"),e.qZA(),e._uU(313,", "),e.TgZ(314,"a",14),e._uU(315,"timeouts"),e.qZA(),e._uU(316," and "),e.TgZ(317,"a",15),e._uU(318,"intervals"),e.qZA(),e._uU(319,". The API also enables creating and managing "),e.TgZ(320,"strong"),e._uU(321,"dynamic"),e.qZA(),e._uU(322," cron jobs, timeouts and intervals, where the properties are defined at runtime."),e.qZA(),e.TgZ(323,"h4",27)(324,"span"),e._uU(325,"Dynamic cron jobs"),e.qZA()(),e.TgZ(326,"p"),e._uU(327,"Obtain a reference to a "),e.TgZ(328,"code"),e._uU(329,"CronJob"),e.qZA(),e._uU(330," instance by name from anywhere in your code using the "),e.TgZ(331,"code"),e._uU(332,"SchedulerRegistry"),e.qZA(),e._uU(333," API. First, inject "),e.TgZ(334,"code"),e._uU(335,"SchedulerRegistry"),e.qZA(),e._uU(336," using standard constructor injection:"),e.qZA(),e.TgZ(337,"pre")(338,"code",12),e._uU(339,"\nconstructor(private schedulerRegistry: SchedulerRegistry) {}\n"),e.qZA()(),e.TgZ(340,"blockquote",19)(341,"strong"),e._uU(342,"Hint"),e.qZA(),e._uU(343," Import the "),e.TgZ(344,"code"),e._uU(345,"SchedulerRegistry"),e.qZA(),e._uU(346," from the "),e.TgZ(347,"code"),e._uU(348,"@nestjs/schedule"),e.qZA(),e._uU(349," package.\n"),e.qZA(),e.TgZ(350,"p"),e._uU(351,"Then use it in a class as follows. Assume a cron job was created with the following declaration:"),e.qZA(),e.TgZ(352,"pre")(353,"code",12),e._uU(354,"\n@Cron('* * 8 * * *', {\n  name: 'notifications',\n})\ntriggerNotifications() {}\n"),e.qZA()(),e.TgZ(355,"p"),e._uU(356,"Access this job using the following:"),e.qZA(),e.TgZ(357,"pre")(358,"code",12),e._uU(359,"\nconst job = this.schedulerRegistry.getCronJob('notifications');\n\njob.stop();\nconsole.log(job.lastDate());\n"),e.qZA()(),e.TgZ(360,"p"),e._uU(361,"The "),e.TgZ(362,"code"),e._uU(363,"getCronJob()"),e.qZA(),e._uU(364," method returns the named cron job. The returned "),e.TgZ(365,"code"),e._uU(366,"CronJob"),e.qZA(),e._uU(367," object has the following methods:"),e.qZA(),e.TgZ(368,"ul")(369,"li")(370,"code"),e._uU(371,"stop()"),e.qZA(),e._uU(372," - stops a job that is scheduled to run."),e.qZA(),e.TgZ(373,"li")(374,"code"),e._uU(375,"start()"),e.qZA(),e._uU(376," - restarts a job that has been stopped."),e.qZA(),e.TgZ(377,"li")(378,"code"),e._uU(379,"setTime(time: CronTime)"),e.qZA(),e._uU(380," - stops a job, sets a new time for it, and then starts it"),e.qZA(),e.TgZ(381,"li")(382,"code"),e._uU(383,"lastDate()"),e.qZA(),e._uU(384," - returns a string representation of the last date a job executed"),e.qZA(),e.TgZ(385,"li")(386,"code"),e._uU(387,"nextDates(count: number)"),e.qZA(),e._uU(388," - returns an array (size "),e.TgZ(389,"code"),e._uU(390,"count"),e.qZA(),e._uU(391,") of "),e.TgZ(392,"code"),e._uU(393,"moment"),e.qZA(),e._uU(394," objects representing upcoming job execution dates."),e.qZA()(),e.TgZ(395,"blockquote",19)(396,"strong"),e._uU(397,"Hint"),e.qZA(),e._uU(398," Use "),e.TgZ(399,"code"),e._uU(400,"toDate()"),e.qZA(),e._uU(401," on "),e.TgZ(402,"code"),e._uU(403,"moment"),e.qZA(),e._uU(404," objects to render them in human readable form.\n"),e.qZA(),e.TgZ(405,"p")(406,"strong"),e._uU(407,"Create"),e.qZA(),e._uU(408," a new cron job dynamically using the "),e.TgZ(409,"code"),e._uU(410,"SchedulerRegistry.addCronJob()"),e.qZA(),e._uU(411," method, as follows:"),e.qZA(),e.TgZ(412,"pre")(413,"code",12),e._uU(414,"\naddCronJob(name: string, seconds: string) {\n  const job = new CronJob(`${seconds} * * * * *`, () => {\n    this.logger.warn(`time (${seconds}) for job ${name} to run!`);\n  });\n\n  this.schedulerRegistry.addCronJob(name, job);\n  job.start();\n\n  this.logger.warn(\n    `job ${name} added for each minute at ${seconds} seconds!`,\n  );\n}\n"),e.qZA()(),e.TgZ(415,"p"),e._uU(416,"In this code, we use the "),e.TgZ(417,"code"),e._uU(418,"CronJob"),e.qZA(),e._uU(419," object from the "),e.TgZ(420,"code"),e._uU(421,"cron"),e.qZA(),e._uU(422," package to create the cron job. The "),e.TgZ(423,"code"),e._uU(424,"CronJob"),e.qZA(),e._uU(425," constructor takes a cron pattern (just like the "),e.TgZ(426,"code"),e._uU(427,"@Cron()"),e.qZA(),e.TgZ(428,"a",13),e._uU(429,"decorator"),e.qZA(),e._uU(430,") as its first argument, and a callback to be executed when the cron timer fires as its second argument. The "),e.TgZ(431,"code"),e._uU(432,"SchedulerRegistry.addCronJob()"),e.qZA(),e._uU(433," method takes two arguments: a name for the "),e.TgZ(434,"code"),e._uU(435,"CronJob"),e.qZA(),e._uU(436,", and the "),e.TgZ(437,"code"),e._uU(438,"CronJob"),e.qZA(),e._uU(439," object itself."),e.qZA(),e.TgZ(440,"blockquote",28)(441,"strong"),e._uU(442,"Warning"),e.qZA(),e._uU(443," Remember to inject the "),e.TgZ(444,"code"),e._uU(445,"SchedulerRegistry"),e.qZA(),e._uU(446," before accessing it. Import "),e.TgZ(447,"code"),e._uU(448,"CronJob"),e.qZA(),e._uU(449," from the "),e.TgZ(450,"code"),e._uU(451,"cron"),e.qZA(),e._uU(452," package.\n"),e.qZA(),e.TgZ(453,"p")(454,"strong"),e._uU(455,"Delete"),e.qZA(),e._uU(456," a named cron job using the "),e.TgZ(457,"code"),e._uU(458,"SchedulerRegistry.deleteCronJob()"),e.qZA(),e._uU(459," method, as follows:"),e.qZA(),e.TgZ(460,"pre")(461,"code",12),e._uU(462,"\ndeleteCron(name: string) {\n  this.schedulerRegistry.deleteCronJob(name);\n  this.logger.warn(`job ${name} deleted!`);\n}\n"),e.qZA()(),e.TgZ(463,"p")(464,"strong"),e._uU(465,"List"),e.qZA(),e._uU(466," all cron jobs using the "),e.TgZ(467,"code"),e._uU(468,"SchedulerRegistry.getCronJobs()"),e.qZA(),e._uU(469," method as follows:"),e.qZA(),e.TgZ(470,"pre")(471,"code",12),e._uU(472,"\ngetCrons() {\n  const jobs = this.schedulerRegistry.getCronJobs();\n  jobs.forEach((value, key, map) => {\n    let next;\n    try {\n      next = value.nextDates().toDate();\n    } catch (e) {\n      next = 'error: next fire date is in the past!';\n    }\n    this.logger.log(`job: ${key} -> next: ${next}`);\n  });\n}\n"),e.qZA()(),e.TgZ(473,"p"),e._uU(474,"The "),e.TgZ(475,"code"),e._uU(476,"getCronJobs()"),e.qZA(),e._uU(477," method returns a "),e.TgZ(478,"code"),e._uU(479,"map"),e.qZA(),e._uU(480,". In this code, we iterate over the map and attempt to access the "),e.TgZ(481,"code"),e._uU(482,"nextDates()"),e.qZA(),e._uU(483," method of each "),e.TgZ(484,"code"),e._uU(485,"CronJob"),e.qZA(),e._uU(486,". In the "),e.TgZ(487,"code"),e._uU(488,"CronJob"),e.qZA(),e._uU(489," API, if a job has already fired and has no future firing dates, it throws an exception."),e.qZA(),e.TgZ(490,"h4",29)(491,"span"),e._uU(492,"Dynamic intervals"),e.qZA()(),e.TgZ(493,"p"),e._uU(494,"Obtain a reference to an interval with the "),e.TgZ(495,"code"),e._uU(496,"SchedulerRegistry.getInterval()"),e.qZA(),e._uU(497," method. As above, inject "),e.TgZ(498,"code"),e._uU(499,"SchedulerRegistry"),e.qZA(),e._uU(500," using standard constructor injection:"),e.qZA(),e.TgZ(501,"pre")(502,"code",12),e._uU(503,"\nconstructor(private schedulerRegistry: SchedulerRegistry) {}\n"),e.qZA()(),e.TgZ(504,"p"),e._uU(505,"And use it as follows:"),e.qZA(),e.TgZ(506,"pre")(507,"code",12),e._uU(508,"\nconst interval = this.schedulerRegistry.getInterval('notifications');\nclearInterval(interval);\n"),e.qZA()(),e.TgZ(509,"p")(510,"strong"),e._uU(511,"Create"),e.qZA(),e._uU(512," a new interval dynamically using the "),e.TgZ(513,"code"),e._uU(514,"SchedulerRegistry.addInterval()"),e.qZA(),e._uU(515," method, as follows:"),e.qZA(),e.TgZ(516,"pre")(517,"code",12),e._uU(518,"\naddInterval(name: string, milliseconds: number) {\n  const callback = () => {\n    this.logger.warn(`Interval ${name} executing at time (${milliseconds})!`);\n  };\n\n  const interval = setInterval(callback, milliseconds);\n  this.schedulerRegistry.addInterval(name, interval);\n}\n"),e.qZA()(),e.TgZ(519,"p"),e._uU(520,"In this code, we create a standard JavaScript interval, then pass it to the "),e.TgZ(521,"code"),e._uU(522,"ScheduleRegistry.addInterval()"),e.qZA(),e._uU(523," method.\nThat method takes two arguments: a name for the interval, and the interval itself."),e.qZA(),e.TgZ(524,"p")(525,"strong"),e._uU(526,"Delete"),e.qZA(),e._uU(527," a named interval using the "),e.TgZ(528,"code"),e._uU(529,"SchedulerRegistry.deleteInterval()"),e.qZA(),e._uU(530," method, as follows:"),e.qZA(),e.TgZ(531,"pre")(532,"code",12),e._uU(533,"\ndeleteInterval(name: string) {\n  this.schedulerRegistry.deleteInterval(name);\n  this.logger.warn(`Interval ${name} deleted!`);\n}\n"),e.qZA()(),e.TgZ(534,"p")(535,"strong"),e._uU(536,"List"),e.qZA(),e._uU(537," all intervals using the "),e.TgZ(538,"code"),e._uU(539,"SchedulerRegistry.getIntervals()"),e.qZA(),e._uU(540," method as follows:"),e.qZA(),e.TgZ(541,"pre")(542,"code",12),e._uU(543,"\ngetIntervals() {\n  const intervals = this.schedulerRegistry.getIntervals();\n  intervals.forEach(key => this.logger.log(`Interval: ${key}`));\n}\n"),e.qZA()(),e.TgZ(544,"h4",30)(545,"span"),e._uU(546,"Dynamic timeouts"),e.qZA()(),e.TgZ(547,"p"),e._uU(548,"Obtain a reference to a timeout with the "),e.TgZ(549,"code"),e._uU(550,"SchedulerRegistry.getTimeout()"),e.qZA(),e._uU(551," method. As above, inject "),e.TgZ(552,"code"),e._uU(553,"SchedulerRegistry"),e.qZA(),e._uU(554," using standard constructor injection:"),e.qZA(),e.TgZ(555,"pre")(556,"code",12),e._uU(557,"\nconstructor(private schedulerRegistry: SchedulerRegistry) {}\n"),e.qZA()(),e.TgZ(558,"p"),e._uU(559,"And use it as follows:"),e.qZA(),e.TgZ(560,"pre")(561,"code",12),e._uU(562,"\nconst timeout = this.schedulerRegistry.getTimeout('notifications');\nclearTimeout(timeout);\n"),e.qZA()(),e.TgZ(563,"p")(564,"strong"),e._uU(565,"Create"),e.qZA(),e._uU(566," a new timeout dynamically using the "),e.TgZ(567,"code"),e._uU(568,"SchedulerRegistry.addTimeout()"),e.qZA(),e._uU(569," method, as follows:"),e.qZA(),e.TgZ(570,"pre")(571,"code",12),e._uU(572,"\naddTimeout(name: string, milliseconds: number) {\n  const callback = () => {\n    this.logger.warn(`Timeout ${name} executing after (${milliseconds})!`);\n  };\n\n  const timeout = setTimeout(callback, milliseconds);\n  this.schedulerRegistry.addTimeout(name, timeout);\n}\n"),e.qZA()(),e.TgZ(573,"p"),e._uU(574,"In this code, we create a standard JavaScript timeout, then pass it to the "),e.TgZ(575,"code"),e._uU(576,"ScheduleRegistry.addTimeout()"),e.qZA(),e._uU(577," method.\nThat method takes two arguments: a name for the timeout, and the timeout itself."),e.qZA(),e.TgZ(578,"p")(579,"strong"),e._uU(580,"Delete"),e.qZA(),e._uU(581," a named timeout using the "),e.TgZ(582,"code"),e._uU(583,"SchedulerRegistry.deleteTimeout()"),e.qZA(),e._uU(584," method, as follows:"),e.qZA(),e.TgZ(585,"pre")(586,"code",12),e._uU(587,"\ndeleteTimeout(name: string) {\n  this.schedulerRegistry.deleteTimeout(name);\n  this.logger.warn(`Timeout ${name} deleted!`);\n}\n"),e.qZA()(),e.TgZ(588,"p")(589,"strong"),e._uU(590,"List"),e.qZA(),e._uU(591," all timeouts using the "),e.TgZ(592,"code"),e._uU(593,"SchedulerRegistry.getTimeouts()"),e.qZA(),e._uU(594," method as follows:"),e.qZA(),e.TgZ(595,"pre")(596,"code",12),e._uU(597,"\ngetTimeouts() {\n  const timeouts = this.schedulerRegistry.getTimeouts();\n  timeouts.forEach(key => this.logger.log(`Timeout: ${key}`));\n}\n"),e.qZA()(),e.TgZ(598,"h4",31)(599,"span"),e._uU(600,"Example"),e.qZA()(),e.TgZ(601,"p"),e._uU(602,"A working example is available "),e.TgZ(603,"a",32),e._uU(604,"here"),e.qZA(),e._uU(605,"."),e.qZA()()),2&n){const a=e.MAs(41);e.xp6(38),e.hij(" ",e.xi3(39,1,"app.module",a.isJsActive),"\n")}},dependencies:[p.n,i.U,b.V,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"Task Scheduling"}},{path:"compression",component:C,data:{title:"Compression"}},{path:"queues",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-queues"]],features:[e.qOj],decls:885,vars:12,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/queues.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","queues"],["rel","nofollow","target","_blank","href","https://github.com/OptimalBits/bull"],["rel","nofollow","target","_blank","href","https://redis.io/"],["href","techniques/queues#producers"],["href","techniques/queues#consumers"],["href","techniques/queues#event-listeners"],["rel","nofollow","target","_blank","href","https://github.com/OptimalBits/bull/blob/master/REFERENCE.md"],["appAnchor","","id","installation"],[1,"language-bash"],[1,"filename"],["app131d73d1c3d067a04397de782d4933bf106c3a41",""],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queue"],["rel","nofollow","target","_blank","href","https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queueadd"],[1,"info"],["appAnchor","","id","named-configurations"],["appAnchor","","id","producers"],["routerLink","/providers"],["appAnchor","","id","named-jobs"],[1,"Warning"],["appAnchor","","id","job-options"],["appAnchor","","id","consumers"],["rel","nofollow","target","_blank","href","https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#job"],["appAnchor","","id","request-scoped-consumers"],["href","/fundamentals/injection-scopes#provider-scope"],["appAnchor","","id","event-listeners"],["rel","nofollow","target","_blank","href","https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#events"],["appAnchor","","id","queue-management"],["appAnchor","","id","separate-processes"],["rel","nofollow","target","_blank","href","https://github.com/OptimalBits/bull#separate-processes"],["app32f6f440f3b7b51d3fd2ec94d7e68c676ff09b8f",""],[1,"language-ts"],["app5f3477ab15fbb3d467e70a9206428c9058aa367f",""],["appAnchor","","id","async-configuration"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/async-providers"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/26-queues"]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Queues"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Queues are a powerful design pattern that help you deal with common application scaling and performance challenges. Some examples of problems that Queues can help you solve are:"),e.qZA(),e.TgZ(9,"ul")(10,"li"),e._uU(11,"Smooth out processing peaks. For example, if users can initiate resource-intensive tasks at arbitrary times, you can add these tasks to a queue instead of performing them synchronously. Then you can have worker processes pull tasks from the queue in a controlled manner. You can easily add new Queue consumers to scale up the back-end task handling as the application scales up."),e.qZA(),e.TgZ(12,"li"),e._uU(13,"Break up monolithic tasks that may otherwise block the Node.js event loop. For example, if a user request requires CPU intensive work like audio transcoding, you can delegate this task to other processes, freeing up user-facing processes to remain responsive."),e.qZA(),e.TgZ(14,"li"),e._uU(15,"Provide a reliable communication channel across various services. For example, you can queue tasks (jobs) in one process or service, and consume them in another. You can be notified (by listening for status events) upon completion, error or other state changes in the job life cycle from any process or service. When Queue producers or consumers fail, their state is preserved and task handling can restart automatically when nodes are restarted."),e.qZA()(),e.TgZ(16,"p"),e._uU(17,"Nest provides the "),e.TgZ(18,"code"),e._uU(19,"@nestjs/bull"),e.qZA(),e._uU(20," package as an abstraction/wrapper on top of "),e.TgZ(21,"a",6),e._uU(22,"Bull"),e.qZA(),e._uU(23,", a popular, well supported, high performance Node.js based Queue system implementation. The package makes it easy to integrate Bull Queues in a Nest-friendly way to your application."),e.qZA(),e.TgZ(24,"p"),e._uU(25,"Bull uses "),e.TgZ(26,"a",7),e._uU(27,"Redis"),e.qZA(),e._uU(28," to persist job data, so you'll need to have Redis installed on your system. Because it is Redis-backed, your Queue architecture can be completely distributed and platform-independent. For example, you can have some Queue "),e.TgZ(29,"a",8),e._uU(30,"producers"),e.qZA(),e._uU(31," and "),e.TgZ(32,"a",9),e._uU(33,"consumers"),e.qZA(),e._uU(34," and "),e.TgZ(35,"a",10),e._uU(36,"listeners"),e.qZA(),e._uU(37," running in Nest on one (or several) nodes, and other producers, consumers and listeners running on other Node.js platforms on other network nodes."),e.qZA(),e.TgZ(38,"p"),e._uU(39,"This chapter covers the "),e.TgZ(40,"code"),e._uU(41,"@nestjs/bull"),e.qZA(),e._uU(42," package. We also recommend reading the "),e.TgZ(43,"a",11),e._uU(44,"Bull documentation"),e.qZA(),e._uU(45," for more background and specific implementation details."),e.qZA(),e.TgZ(46,"h4",12)(47,"span"),e._uU(48,"Installation"),e.qZA()(),e.TgZ(49,"p"),e._uU(50,"To begin using it, we first install the required dependencies."),e.qZA(),e.TgZ(51,"pre")(52,"code",13),e._uU(53,"\n$ npm install --save @nestjs/bull bull\n$ npm install --save-dev @types/bull\n"),e.qZA()(),e.TgZ(54,"p"),e._uU(55,"Once the installation process is complete, we can import the "),e.TgZ(56,"code"),e._uU(57,"BullModule"),e.qZA(),e._uU(58," into the root "),e.TgZ(59,"code"),e._uU(60,"AppModule"),e.qZA(),e._uU(61,"."),e.qZA(),e.TgZ(62,"span",14),e._uU(63),e.ALo(64,"extension"),e._UZ(65,"app-tabs",null,15),e.qZA(),e.TgZ(67,"pre")(68,"code",16),e._uU(69,"\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bull';\n\n@Module({\n  imports: [\n    BullModule.forRoot({\n      redis: {\n        host: 'localhost',\n        port: 6379,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(70,"p"),e._uU(71,"The "),e.TgZ(72,"code"),e._uU(73,"forRoot()"),e.qZA(),e._uU(74," method is used to register a "),e.TgZ(75,"code"),e._uU(76,"bull"),e.qZA(),e._uU(77," package configuration object that will be used by all queues registered in the application (unless specified otherwise). A configuration object consist of the following properties:"),e.qZA(),e.TgZ(78,"ul")(79,"li")(80,"code"),e._uU(81,"limiter: RateLimiter"),e.qZA(),e._uU(82," - Options to control the rate at which the queue's jobs are processed. See "),e.TgZ(83,"a",17),e._uU(84,"RateLimiter"),e.qZA(),e._uU(85," for more information. Optional."),e.qZA(),e.TgZ(86,"li")(87,"code"),e._uU(88,"redis: RedisOpts"),e.qZA(),e._uU(89," - Options to configure the Redis connection. See "),e.TgZ(90,"a",17),e._uU(91,"RedisOpts"),e.qZA(),e._uU(92," for more information. Optional."),e.qZA(),e.TgZ(93,"li")(94,"code"),e._uU(95,"prefix: string"),e.qZA(),e._uU(96," - Prefix for all queue keys. Optional."),e.qZA(),e.TgZ(97,"li")(98,"code"),e._uU(99,"defaultJobOptions: JobOpts"),e.qZA(),e._uU(100," - Options to control the default settings for new jobs. See "),e.TgZ(101,"a",18),e._uU(102,"JobOpts"),e.qZA(),e._uU(103," for more information. Optional."),e.qZA(),e.TgZ(104,"li")(105,"code"),e._uU(106,"settings: AdvancedSettings"),e.qZA(),e._uU(107," - Advanced Queue configuration settings. These should usually not be changed. See "),e.TgZ(108,"a",17),e._uU(109,"AdvancedSettings"),e.qZA(),e._uU(110," for more information. Optional."),e.qZA()(),e.TgZ(111,"p"),e._uU(112,"All the options are optional, providing detailed control over queue behavior. These are passed directly to the Bull "),e.TgZ(113,"code"),e._uU(114,"Queue"),e.qZA(),e._uU(115," constructor. Read more about these options "),e.TgZ(116,"a",17),e._uU(117,"here"),e.qZA(),e._uU(118,"."),e.qZA(),e.TgZ(119,"p"),e._uU(120,"To register a queue, import the "),e.TgZ(121,"code"),e._uU(122,"BullModule.registerQueue()"),e.qZA(),e._uU(123," dynamic module, as follows:"),e.qZA(),e.TgZ(124,"pre")(125,"code",16),e._uU(126,"\nBullModule.registerQueue({\n  name: 'audio',\n});\n"),e.qZA()(),e.TgZ(127,"blockquote",19)(128,"strong"),e._uU(129,"Hint"),e.qZA(),e._uU(130," Create multiple queues by passing multiple comma-separated configuration objects to the "),e.TgZ(131,"code"),e._uU(132,"registerQueue()"),e.qZA(),e._uU(133," method.\n"),e.qZA(),e.TgZ(134,"p"),e._uU(135,"The "),e.TgZ(136,"code"),e._uU(137,"registerQueue()"),e.qZA(),e._uU(138," method is used to instantiate and/or register queues. Queues are shared across modules and processes that connect to the same underlying Redis database with the same credentials. Each queue is unique by its name property. A queue name is used as both an injection token (for injecting the queue into controllers/providers), and as an argument to decorators to associate consumer classes and listeners with queues."),e.qZA(),e.TgZ(139,"p"),e._uU(140,"You can also override some of the pre-configured options for a specific queue, as follows:"),e.qZA(),e.TgZ(141,"pre")(142,"code",16),e._uU(143,"\nBullModule.registerQueue({\n  name: 'audio',\n  redis: {\n    port: 6380,\n  },\n});\n"),e.qZA()(),e.TgZ(144,"p"),e._uU(145,"Since jobs are persisted in Redis, each time a specific named queue is instantiated (e.g., when an app is started/restarted), it attempts to process any old jobs that may exist from a previous unfinished session."),e.qZA(),e.TgZ(146,"p"),e._uU(147,"Each queue can have one or many producers, consumers, and listeners. Consumers retrieve jobs from the queue in a specific order: FIFO (the default), LIFO, or according to priorities. Controlling queue processing order is discussed "),e.TgZ(148,"a",9),e._uU(149,"here"),e.qZA(),e._uU(150,"."),e.qZA(),e.TgZ(151,"p"),e._UZ(152,"app-banner-enterprise"),e.qZA(),e.TgZ(153,"h4",20)(154,"span"),e._uU(155,"Named configurations"),e.qZA()(),e.TgZ(156,"p"),e._uU(157,"If your queues connect to multiple different Redis instances, you can use a technique called "),e.TgZ(158,"strong"),e._uU(159,"named configurations"),e.qZA(),e._uU(160,". This feature allows you to register several configurations under specified keys, which then you can refer to in the queue options."),e.qZA(),e.TgZ(161,"p"),e._uU(162,"For example, assuming that you have an additional Redis instance (apart from the default one) used by a few queues registered in your application, you can register its configuration as follows:"),e.qZA(),e.TgZ(163,"pre")(164,"code",16),e._uU(165,"\nBullModule.forRoot('alternative-config', {\n  redis: {\n    port: 6381,\n  },\n});\n"),e.qZA()(),e.TgZ(166,"p"),e._uU(167,"In the example above, "),e.TgZ(168,"code"),e._uU(169,"'alternative-config'"),e.qZA(),e._uU(170," is just a configuration key (it can be any arbitrary string)."),e.qZA(),e.TgZ(171,"p"),e._uU(172,"With this in place, you can now point to this configuration in the "),e.TgZ(173,"code"),e._uU(174,"registerQueue()"),e.qZA(),e._uU(175," options object:"),e.qZA(),e.TgZ(176,"pre")(177,"code",16),e._uU(178,"\nBullModule.registerQueue({\n  configKey: 'alternative-queue'\n  name: 'video',\n});\n"),e.qZA()(),e.TgZ(179,"h4",21)(180,"span"),e._uU(181,"Producers"),e.qZA()(),e.TgZ(182,"p"),e._uU(183,"Job producers add jobs to queues. Producers are typically application services (Nest "),e.TgZ(184,"a",22),e._uU(185,"providers"),e.qZA(),e._uU(186,"). To add jobs to a queue, first inject the queue into the service as follows:"),e.qZA(),e.TgZ(187,"pre")(188,"code",16),e._uU(189,"\nimport { Injectable } from '@nestjs/common';\nimport { Queue } from 'bull';\nimport { InjectQueue } from '@nestjs/bull';\n\n@Injectable()\nexport class AudioService {\n  constructor(@InjectQueue('audio') private audioQueue: Queue) {}\n}\n"),e.qZA()(),e.TgZ(190,"blockquote",19)(191,"strong"),e._uU(192,"Hint"),e.qZA(),e._uU(193," The "),e.TgZ(194,"code"),e._uU(195,"@InjectQueue()"),e.qZA(),e._uU(196," decorator identifies the queue by its name, as provided in the "),e.TgZ(197,"code"),e._uU(198,"registerQueue()"),e.qZA(),e._uU(199," method call (e.g., "),e.TgZ(200,"code"),e._uU(201,"'audio'"),e.qZA(),e._uU(202,").\n"),e.qZA(),e.TgZ(203,"p"),e._uU(204,"Now, add a job by calling the queue's "),e.TgZ(205,"code"),e._uU(206,"add()"),e.qZA(),e._uU(207," method, passing a user-defined job object. Jobs are represented as serializable JavaScript objects (since that is how they are stored in the Redis database). The shape of the job you pass is arbitrary; use it to represent the semantics of your job object."),e.qZA(),e.TgZ(208,"pre")(209,"code",16),e._uU(210,"\nconst job = await this.audioQueue.add({\n  foo: 'bar',\n});\n"),e.qZA()(),e.TgZ(211,"h4",23)(212,"span"),e._uU(213,"Named jobs"),e.qZA()(),e.TgZ(214,"p"),e._uU(215,"Jobs may have unique names. This allows you to create specialized "),e.TgZ(216,"a",9),e._uU(217,"consumers"),e.qZA(),e._uU(218," that will only process jobs with a given name."),e.qZA(),e.TgZ(219,"pre")(220,"code",16),e._uU(221,"\nconst job = await this.audioQueue.add('transcode', {\n  foo: 'bar',\n});\n"),e.qZA()(),e.TgZ(222,"blockquote",24)(223,"strong"),e._uU(224,"Warning"),e.qZA(),e._uU(225," When using named jobs, you must create processors for each unique name added to a queue, or the queue will complain that you are missing a processor for the given job. See "),e.TgZ(226,"a",9),e._uU(227,"here"),e.qZA(),e._uU(228," for more information on consuming named jobs.\n"),e.qZA(),e.TgZ(229,"h4",25)(230,"span"),e._uU(231,"Job options"),e.qZA()(),e.TgZ(232,"p"),e._uU(233,"Jobs can have additional options associated with them. Pass an options object after the "),e.TgZ(234,"code"),e._uU(235,"job"),e.qZA(),e._uU(236," argument in the "),e.TgZ(237,"code"),e._uU(238,"Queue.add()"),e.qZA(),e._uU(239," method. Job options properties are:"),e.qZA(),e.TgZ(240,"ul")(241,"li")(242,"code"),e._uU(243,"priority"),e.qZA(),e._uU(244,": "),e.TgZ(245,"code"),e._uU(246,"number"),e.qZA(),e._uU(247," - Optional priority value. Ranges from 1 (highest priority) to MAX_INT (lowest priority). Note that using priorities has a slight impact on performance, so use them with caution."),e.qZA(),e.TgZ(248,"li")(249,"code"),e._uU(250,"delay"),e.qZA(),e._uU(251,": "),e.TgZ(252,"code"),e._uU(253,"number"),e.qZA(),e._uU(254," - An amount of time (milliseconds) to wait until this job can be processed. Note that for accurate delays, both server and clients should have their clocks synchronized."),e.qZA(),e.TgZ(255,"li")(256,"code"),e._uU(257,"attempts"),e.qZA(),e._uU(258,": "),e.TgZ(259,"code"),e._uU(260,"number"),e.qZA(),e._uU(261," - The total number of attempts to try the job until it completes."),e.qZA(),e.TgZ(262,"li")(263,"code"),e._uU(264,"repeat"),e.qZA(),e._uU(265,": "),e.TgZ(266,"code"),e._uU(267,"RepeatOpts"),e.qZA(),e._uU(268," - Repeat job according to a cron specification. See "),e.TgZ(269,"a",18),e._uU(270,"RepeatOpts"),e.qZA(),e._uU(271,"."),e.qZA(),e.TgZ(272,"li")(273,"code"),e._uU(274,"backoff"),e.qZA(),e._uU(275,": "),e.TgZ(276,"code"),e._uU(277,"number | BackoffOpts"),e.qZA(),e._uU(278," - Backoff setting for automatic retries if the job fails. See "),e.TgZ(279,"a",18),e._uU(280,"BackoffOpts"),e.qZA(),e._uU(281,"."),e.qZA(),e.TgZ(282,"li")(283,"code"),e._uU(284,"lifo"),e.qZA(),e._uU(285,": "),e.TgZ(286,"code"),e._uU(287,"boolean"),e.qZA(),e._uU(288," - If true, adds the job to the right end of the queue instead of the left (default false)."),e.qZA(),e.TgZ(289,"li")(290,"code"),e._uU(291,"timeout"),e.qZA(),e._uU(292,": "),e.TgZ(293,"code"),e._uU(294,"number"),e.qZA(),e._uU(295," - The number of milliseconds after which the job should fail with a timeout error."),e.qZA(),e.TgZ(296,"li")(297,"code"),e._uU(298,"jobId"),e.qZA(),e._uU(299,": "),e.TgZ(300,"code"),e._uU(301,"number"),e.qZA(),e._uU(302," | "),e.TgZ(303,"code"),e._uU(304,"string"),e.qZA(),e._uU(305," - Override the job ID - by default, the job ID is a unique\ninteger, but you can use this setting to override it. If you use this option, it is up to you to ensure the jobId is unique. If you attempt to add a job with an id that already exists, it will not be added."),e.qZA(),e.TgZ(306,"li")(307,"code"),e._uU(308,"removeOnComplete"),e.qZA(),e._uU(309,": "),e.TgZ(310,"code"),e._uU(311,"boolean | number"),e.qZA(),e._uU(312," - If true, removes the job when it successfully completes. A number specifies the amount of jobs to keep. Default behavior is to keep the job in the completed set."),e.qZA(),e.TgZ(313,"li")(314,"code"),e._uU(315,"removeOnFail"),e.qZA(),e._uU(316,": "),e.TgZ(317,"code"),e._uU(318,"boolean | number"),e.qZA(),e._uU(319," - If true, removes the job when it fails after all attempts. A number specifies the amount of jobs to keep. Default behavior is to keep the job in the failed set."),e.qZA(),e.TgZ(320,"li")(321,"code"),e._uU(322,"stackTraceLimit"),e.qZA(),e._uU(323,": "),e.TgZ(324,"code"),e._uU(325,"number"),e.qZA(),e._uU(326," - Limits the amount of stack trace lines that will be recorded in the stacktrace."),e.qZA()(),e.TgZ(327,"p"),e._uU(328,"Here are a few examples of customizing jobs with job options."),e.qZA(),e.TgZ(329,"p"),e._uU(330,"To delay the start of a job, use the "),e.TgZ(331,"code"),e._uU(332,"delay"),e.qZA(),e._uU(333," configuration property."),e.qZA(),e.TgZ(334,"pre")(335,"code",16),e._uU(336,"\nconst job = await this.audioQueue.add(\n  {\n    foo: 'bar',\n  },\n  { delay: 3000 }, // 3 seconds delayed\n);\n"),e.qZA()(),e.TgZ(337,"p"),e._uU(338,"To add a job to the right end of the queue (process the job as "),e.TgZ(339,"strong"),e._uU(340,"LIFO"),e.qZA(),e._uU(341," (Last In First Out)), set the "),e.TgZ(342,"code"),e._uU(343,"lifo"),e.qZA(),e._uU(344," property of the configuration object to "),e.TgZ(345,"code"),e._uU(346,"true"),e.qZA(),e._uU(347,"."),e.qZA(),e.TgZ(348,"pre")(349,"code",16),e._uU(350,"\nconst job = await this.audioQueue.add(\n  {\n    foo: 'bar',\n  },\n  { lifo: true },\n);\n"),e.qZA()(),e.TgZ(351,"p"),e._uU(352,"To prioritize a job, use the "),e.TgZ(353,"code"),e._uU(354,"priority"),e.qZA(),e._uU(355," property."),e.qZA(),e.TgZ(356,"pre")(357,"code",16),e._uU(358,"\nconst job = await this.audioQueue.add(\n  {\n    foo: 'bar',\n  },\n  { priority: 2 },\n);\n"),e.qZA()(),e.TgZ(359,"h4",26)(360,"span"),e._uU(361,"Consumers"),e.qZA()(),e.TgZ(362,"p"),e._uU(363,"A consumer is a "),e.TgZ(364,"strong"),e._uU(365,"class"),e.qZA(),e._uU(366," defining methods that either process jobs added into the queue, or listen for events on the queue, or both. Declare a consumer class using the "),e.TgZ(367,"code"),e._uU(368,"@Processor()"),e.qZA(),e._uU(369," decorator as follows:"),e.qZA(),e.TgZ(370,"pre")(371,"code",16),e._uU(372,"\nimport { Processor } from '@nestjs/bull';\n\n@Processor('audio')\nexport class AudioConsumer {}\n"),e.qZA()(),e.TgZ(373,"blockquote",19)(374,"strong"),e._uU(375,"Hint"),e.qZA(),e._uU(376," Consumers must be registered as "),e.TgZ(377,"code"),e._uU(378,"providers"),e.qZA(),e._uU(379," so the "),e.TgZ(380,"code"),e._uU(381,"@nestjs/bull"),e.qZA(),e._uU(382," package can pick them up.\n"),e.qZA(),e.TgZ(383,"p"),e._uU(384,"Where the decorator's string argument (e.g., "),e.TgZ(385,"code"),e._uU(386,"'audio'"),e.qZA(),e._uU(387,") is the name of the queue to be associated with the class methods."),e.qZA(),e.TgZ(388,"p"),e._uU(389,"Within a consumer class, declare job handlers by decorating handler methods with the "),e.TgZ(390,"code"),e._uU(391,"@Process()"),e.qZA(),e._uU(392," decorator."),e.qZA(),e.TgZ(393,"pre")(394,"code",16),e._uU(395,"\nimport { Processor, Process } from '@nestjs/bull';\nimport { Job } from 'bull';\n\n@Processor('audio')\nexport class AudioConsumer {\n  @Process()\n  async transcode(job: Job<unknown>) {\n    let progress = 0;\n    for (i = 0; i < 100; i++) {\n      await doSomething(job.data);\n      progress += 1;\n      await job.progress(progress);\n    }\n    return {};\n  }\n}\n"),e.qZA()(),e.TgZ(396,"p"),e._uU(397,"The decorated method (e.g., "),e.TgZ(398,"code"),e._uU(399,"transcode()"),e.qZA(),e._uU(400,") is called whenever the worker is idle and there are jobs to process in the queue. This handler method receives the "),e.TgZ(401,"code"),e._uU(402,"job"),e.qZA(),e._uU(403," object as its only argument. The value returned by the handler method is stored in the job object and can be accessed later on, for example in a listener for the completed event."),e.qZA(),e.TgZ(404,"p")(405,"code"),e._uU(406,"Job"),e.qZA(),e._uU(407," objects have multiple methods that allow you to interact with their state. For example, the above code uses the "),e.TgZ(408,"code"),e._uU(409,"progress()"),e.qZA(),e._uU(410," method to update the job's progress. See "),e.TgZ(411,"a",27),e._uU(412,"here"),e.qZA(),e._uU(413," for the complete "),e.TgZ(414,"code"),e._uU(415,"Job"),e.qZA(),e._uU(416," object API reference."),e.qZA(),e.TgZ(417,"p"),e._uU(418,"You can designate that a job handler method will handle "),e.TgZ(419,"strong"),e._uU(420,"only"),e.qZA(),e._uU(421," jobs of a certain type (jobs with a specific "),e.TgZ(422,"code"),e._uU(423,"name"),e.qZA(),e._uU(424,") by passing that "),e.TgZ(425,"code"),e._uU(426,"name"),e.qZA(),e._uU(427," to the "),e.TgZ(428,"code"),e._uU(429,"@Process()"),e.qZA(),e._uU(430," decorator as shown below. You can have multiple "),e.TgZ(431,"code"),e._uU(432,"@Process()"),e.qZA(),e._uU(433," handlers in a given consumer class, corresponding to each job type ("),e.TgZ(434,"code"),e._uU(435,"name"),e.qZA(),e._uU(436,"). When you use named jobs, be sure to have a handler corresponding to each name."),e.qZA(),e.TgZ(437,"pre")(438,"code",16),e._uU(439,"\n@Process('transcode')\nasync transcode(job: Job<unknown>) { ... }\n"),e.qZA()(),e.TgZ(440,"h4",28)(441,"span"),e._uU(442,"Request-scoped consumers"),e.qZA()(),e.TgZ(443,"p"),e._uU(444,"When a consumer is flagged as request-scoped (learn more about the injection scopes "),e.TgZ(445,"a",29),e._uU(446,"here"),e.qZA(),e._uU(447,"), a new instance of the class will be created exclusively for each job. The instance will be garbage-collected after the job has completed."),e.qZA(),e.TgZ(448,"pre")(449,"code",16),e._uU(450,"\n@Processor({\n  name: 'audio',\n  scope: Scope.REQUEST,\n})\n"),e.qZA()(),e.TgZ(451,"p"),e._uU(452,"Since request-scoped consumer classes are instantiated dynamically and scoped to a single job, you can inject a "),e.TgZ(453,"code"),e._uU(454,"JOB_REF"),e.qZA(),e._uU(455," through the constructor using a standard approach."),e.qZA(),e.TgZ(456,"pre")(457,"code",16),e._uU(458,"\nconstructor(@Inject(JOB_REF) jobRef: Job) {\n  console.log(jobRef);\n}\n"),e.qZA()(),e.TgZ(459,"blockquote",19)(460,"strong"),e._uU(461,"Hint"),e.qZA(),e._uU(462," The "),e.TgZ(463,"code"),e._uU(464,"JOB_REF"),e.qZA(),e._uU(465," token is imported from the "),e.TgZ(466,"code"),e._uU(467,"@nestjs/bull"),e.qZA(),e._uU(468," package.\n"),e.qZA(),e.TgZ(469,"h4",30)(470,"span"),e._uU(471,"Event listeners"),e.qZA()(),e.TgZ(472,"p"),e._uU(473,"Bull generates a set of useful events when queue and/or job state changes occur. Nest provides a set of decorators that allow subscribing to a core set of standard events. These are exported from the "),e.TgZ(474,"code"),e._uU(475,"@nestjs/bull"),e.qZA(),e._uU(476," package."),e.qZA(),e.TgZ(477,"p"),e._uU(478,"Event listeners must be declared within a "),e.TgZ(479,"a",9),e._uU(480,"consumer"),e.qZA(),e._uU(481," class (i.e., within a class decorated with the "),e.TgZ(482,"code"),e._uU(483,"@Processor()"),e.qZA(),e._uU(484," decorator). To listen for an event, use one of the decorators in the table below to declare a handler for the event. For example, to listen to the event emitted when a job enters the active state in the "),e.TgZ(485,"code"),e._uU(486,"audio"),e.qZA(),e._uU(487," queue, use the following construct:"),e.qZA(),e.TgZ(488,"pre")(489,"code",16),e._uU(490,"\nimport { Processor, Process } from '@nestjs/bull';\nimport { Job } from 'bull';\n\n@Processor('audio')\nexport class AudioConsumer {\n\n  @OnQueueActive()\n  onActive(job: Job) {\n    console.log(\n      `Processing job ${job.id} of type ${job.name} with data ${job.data}...`,\n    );\n  }\n  ...\n"),e.qZA()(),e.TgZ(491,"p"),e._uU(492,"Since Bull operates in a distributed (multi-node) environment, it defines the concept of event locality. This concept recognizes that events may be triggered either entirely within a single process, or on shared queues from different processes. A "),e.TgZ(493,"strong"),e._uU(494,"local"),e.qZA(),e._uU(495," event is one that is produced when an action or state change is triggered on a queue in the local process. In other words, when your event producers and consumers are local to a single process, all events happening on queues are local."),e.qZA(),e.TgZ(496,"p"),e._uU(497,"When a queue is shared across multiple processes, we encounter the possibility of "),e.TgZ(498,"strong"),e._uU(499,"global"),e.qZA(),e._uU(500," events. For a listener in one process to receive an event notification triggered by another process, it must register for a global event."),e.qZA(),e.TgZ(501,"p"),e._uU(502,"Event handlers are invoked whenever their corresponding event is emitted. The handler is called with the signature shown in the table below, providing access to information relevant to the event. We discuss one key difference between local and global event handler signatures below."),e.qZA(),e.TgZ(503,"table")(504,"tr")(505,"th"),e._uU(506,"Local event listeners"),e.qZA(),e.TgZ(507,"th"),e._uU(508,"Global event listeners"),e.qZA(),e.TgZ(509,"th"),e._uU(510,"Handler method signature / When fired"),e.qZA()(),e.TgZ(511,"tr")(512,"td")(513,"code"),e._uU(514,"@OnQueueError()"),e.qZA()(),e.TgZ(515,"td")(516,"code"),e._uU(517,"@OnGlobalQueueError()"),e.qZA()(),e.TgZ(518,"td")(519,"code"),e._uU(520,"handler(error: Error)"),e.qZA(),e._uU(521," - An error occurred. "),e.TgZ(522,"code"),e._uU(523,"error"),e.qZA(),e._uU(524," contains the triggering error."),e.qZA()(),e.TgZ(525,"tr")(526,"td")(527,"code"),e._uU(528,"@OnQueueWaiting()"),e.qZA()(),e.TgZ(529,"td")(530,"code"),e._uU(531,"@OnGlobalQueueWaiting()"),e.qZA()(),e.TgZ(532,"td")(533,"code"),e._uU(534,"handler(jobId: number | string)"),e.qZA(),e._uU(535," - A Job is waiting to be processed as soon as a worker is idling. "),e.TgZ(536,"code"),e._uU(537,"jobId"),e.qZA(),e._uU(538," contains the id for the job that has entered this state."),e.qZA()(),e.TgZ(539,"tr")(540,"td")(541,"code"),e._uU(542,"@OnQueueActive()"),e.qZA()(),e.TgZ(543,"td")(544,"code"),e._uU(545,"@OnGlobalQueueActive()"),e.qZA()(),e.TgZ(546,"td")(547,"code"),e._uU(548,"handler(job: Job)"),e.qZA(),e._uU(549," - Job "),e.TgZ(550,"code"),e._uU(551,"job"),e.qZA(),e._uU(552,"has started. "),e.qZA()(),e.TgZ(553,"tr")(554,"td")(555,"code"),e._uU(556,"@OnQueueStalled()"),e.qZA()(),e.TgZ(557,"td")(558,"code"),e._uU(559,"@OnGlobalQueueStalled()"),e.qZA()(),e.TgZ(560,"td")(561,"code"),e._uU(562,"handler(job: Job)"),e.qZA(),e._uU(563," - Job "),e.TgZ(564,"code"),e._uU(565,"job"),e.qZA(),e._uU(566," has been marked as stalled. This is useful for debugging job workers that crash or pause the event loop."),e.qZA()(),e.TgZ(567,"tr")(568,"td")(569,"code"),e._uU(570,"@OnQueueProgress()"),e.qZA()(),e.TgZ(571,"td")(572,"code"),e._uU(573,"@OnGlobalQueueProgress()"),e.qZA()(),e.TgZ(574,"td")(575,"code"),e._uU(576,"handler(job: Job, progress: number)"),e.qZA(),e._uU(577," - Job "),e.TgZ(578,"code"),e._uU(579,"job"),e.qZA(),e._uU(580,"'s progress was updated to value "),e.TgZ(581,"code"),e._uU(582,"progress"),e.qZA(),e._uU(583,"."),e.qZA()(),e.TgZ(584,"tr")(585,"td")(586,"code"),e._uU(587,"@OnQueueCompleted()"),e.qZA()(),e.TgZ(588,"td")(589,"code"),e._uU(590,"@OnGlobalQueueCompleted()"),e.qZA()(),e.TgZ(591,"td")(592,"code"),e._uU(593,"handler(job: Job, result: any)"),e.qZA(),e._uU(594," Job "),e.TgZ(595,"code"),e._uU(596,"job"),e.qZA(),e._uU(597," successfully completed with a result "),e.TgZ(598,"code"),e._uU(599,"result"),e.qZA(),e._uU(600,"."),e.qZA()(),e.TgZ(601,"tr")(602,"td")(603,"code"),e._uU(604,"@OnQueueFailed()"),e.qZA()(),e.TgZ(605,"td")(606,"code"),e._uU(607,"@OnGlobalQueueFailed()"),e.qZA()(),e.TgZ(608,"td")(609,"code"),e._uU(610,"handler(job: Job, err: Error)"),e.qZA(),e._uU(611," Job "),e.TgZ(612,"code"),e._uU(613,"job"),e.qZA(),e._uU(614," failed with reason "),e.TgZ(615,"code"),e._uU(616,"err"),e.qZA(),e._uU(617,"."),e.qZA()(),e.TgZ(618,"tr")(619,"td")(620,"code"),e._uU(621,"@OnQueuePaused()"),e.qZA()(),e.TgZ(622,"td")(623,"code"),e._uU(624,"@OnGlobalQueuePaused()"),e.qZA()(),e.TgZ(625,"td")(626,"code"),e._uU(627,"handler()"),e.qZA(),e._uU(628," The queue has been paused."),e.qZA()(),e.TgZ(629,"tr")(630,"td")(631,"code"),e._uU(632,"@OnQueueResumed()"),e.qZA()(),e.TgZ(633,"td")(634,"code"),e._uU(635,"@OnGlobalQueueResumed()"),e.qZA()(),e.TgZ(636,"td")(637,"code"),e._uU(638,"handler(job: Job)"),e.qZA(),e._uU(639," The queue has been resumed."),e.qZA()(),e.TgZ(640,"tr")(641,"td")(642,"code"),e._uU(643,"@OnQueueCleaned()"),e.qZA()(),e.TgZ(644,"td")(645,"code"),e._uU(646,"@OnGlobalQueueCleaned()"),e.qZA()(),e.TgZ(647,"td")(648,"code"),e._uU(649,"handler(jobs: Job[], type: string)"),e.qZA(),e._uU(650," Old jobs have been cleaned from the queue. "),e.TgZ(651,"code"),e._uU(652,"jobs"),e.qZA(),e._uU(653," is an array of cleaned jobs, and "),e.TgZ(654,"code"),e._uU(655,"type"),e.qZA(),e._uU(656," is the type of jobs cleaned."),e.qZA()(),e.TgZ(657,"tr")(658,"td")(659,"code"),e._uU(660,"@OnQueueDrained()"),e.qZA()(),e.TgZ(661,"td")(662,"code"),e._uU(663,"@OnGlobalQueueDrained()"),e.qZA()(),e.TgZ(664,"td")(665,"code"),e._uU(666,"handler()"),e.qZA(),e._uU(667," Emitted whenever the queue has processed all the waiting jobs (even if there can be some delayed jobs not yet processed)."),e.qZA()(),e.TgZ(668,"tr")(669,"td")(670,"code"),e._uU(671,"@OnQueueRemoved()"),e.qZA()(),e.TgZ(672,"td")(673,"code"),e._uU(674,"@OnGlobalQueueRemoved()"),e.qZA()(),e.TgZ(675,"td")(676,"code"),e._uU(677,"handler(job: Job)"),e.qZA(),e._uU(678," Job "),e.TgZ(679,"code"),e._uU(680,"job"),e.qZA(),e._uU(681," was successfully removed."),e.qZA()()(),e.TgZ(682,"p"),e._uU(683,"When listening for global events, the method signatures can be slightly different from their local counterpart. Specifically, any method signature that receives "),e.TgZ(684,"code"),e._uU(685,"job"),e.qZA(),e._uU(686," objects in the local version, instead receives a "),e.TgZ(687,"code"),e._uU(688,"jobId"),e.qZA(),e._uU(689," ("),e.TgZ(690,"code"),e._uU(691,"number"),e.qZA(),e._uU(692,") in the global version. To get a reference to the actual "),e.TgZ(693,"code"),e._uU(694,"job"),e.qZA(),e._uU(695," object in such a case, use the "),e.TgZ(696,"code"),e._uU(697,"Queue#getJob"),e.qZA(),e._uU(698," method. This call should be awaited, and therefore the handler should be declared "),e.TgZ(699,"code"),e._uU(700,"async"),e.qZA(),e._uU(701,". For example:"),e.qZA(),e.TgZ(702,"pre")(703,"code",16),e._uU(704,"\n@OnGlobalQueueCompleted()\nasync onGlobalCompleted(jobId: number, result: any) {\n  const job = await this.immediateQueue.getJob(jobId);\n  console.log('(Global) on completed: job ', job.id, ' -> result: ', result);\n}\n"),e.qZA()(),e.TgZ(705,"blockquote",19)(706,"strong"),e._uU(707,"Hint"),e.qZA(),e._uU(708," To access the "),e.TgZ(709,"code"),e._uU(710,"Queue"),e.qZA(),e._uU(711," object (to make a "),e.TgZ(712,"code"),e._uU(713,"getJob()"),e.qZA(),e._uU(714," call), you must of course inject it. Also, the Queue must be registered in the module where you are injecting it.\n"),e.qZA(),e.TgZ(715,"p"),e._uU(716,"In addition to the specific event listener decorators, you can also use the generic "),e.TgZ(717,"code"),e._uU(718,"@OnQueueEvent()"),e.qZA(),e._uU(719," decorator in combination with either "),e.TgZ(720,"code"),e._uU(721,"BullQueueEvents"),e.qZA(),e._uU(722," or "),e.TgZ(723,"code"),e._uU(724,"BullQueueGlobalEvents"),e.qZA(),e._uU(725," enums. Read more about events "),e.TgZ(726,"a",31),e._uU(727,"here"),e.qZA(),e._uU(728,"."),e.qZA(),e.TgZ(729,"h4",32)(730,"span"),e._uU(731,"Queue management"),e.qZA()(),e.TgZ(732,"p"),e._uU(733,"Queue's have an API that allows you to perform management functions like pausing and resuming, retrieving the count of jobs in various states, and several more. You can find the full queue API "),e.TgZ(734,"a",17),e._uU(735,"here"),e.qZA(),e._uU(736,". Invoke any of these methods directly on the "),e.TgZ(737,"code"),e._uU(738,"Queue"),e.qZA(),e._uU(739," object, as shown below with the pause/resume examples."),e.qZA(),e.TgZ(740,"p"),e._uU(741,"Pause a queue with the "),e.TgZ(742,"code"),e._uU(743,"pause()"),e.qZA(),e._uU(744," method call. A paused queue will not process new jobs until resumed, but current jobs being processed will continue until they are finalized."),e.qZA(),e.TgZ(745,"pre")(746,"code",16),e._uU(747,"\nawait audioQueue.pause();\n"),e.qZA()(),e.TgZ(748,"p"),e._uU(749,"To resume a paused queue, use the "),e.TgZ(750,"code"),e._uU(751,"resume()"),e.qZA(),e._uU(752," method, as follows:"),e.qZA(),e.TgZ(753,"pre")(754,"code",16),e._uU(755,"\nawait audioQueue.resume();\n"),e.qZA()(),e.TgZ(756,"h4",33)(757,"span"),e._uU(758,"Separate processes"),e.qZA()(),e.TgZ(759,"p"),e._uU(760,"Job handlers can also be run in a separate (forked) process ("),e.TgZ(761,"a",34),e._uU(762,"source"),e.qZA(),e._uU(763,"). This has several advantages:"),e.qZA(),e.TgZ(764,"ul")(765,"li"),e._uU(766,"The process is sandboxed so if it crashes it does not affect the worker."),e.qZA(),e.TgZ(767,"li"),e._uU(768,"You can run blocking code without affecting the queue (jobs will not stall)."),e.qZA(),e.TgZ(769,"li"),e._uU(770,"Much better utilization of multi-core CPUs."),e.qZA(),e.TgZ(771,"li"),e._uU(772,"Less connections to redis."),e.qZA()(),e.TgZ(773,"span",14),e._uU(774),e.ALo(775,"extension"),e._UZ(776,"app-tabs",null,35),e.qZA(),e.TgZ(778,"pre")(779,"code",36),e._uU(780,"\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bull';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'audio',\n      processors: [join(__dirname, 'processor.js')],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(781,"p"),e._uU(782,"Please note that because your function is being executed in a forked process, Dependency Injection (and IoC container) won't be available. That means that your processor function will need to contain (or create) all instances of external dependencies it needs."),e.qZA(),e.TgZ(783,"span",14),e._uU(784),e.ALo(785,"extension"),e._UZ(786,"app-tabs",null,37),e.qZA(),e.TgZ(788,"pre")(789,"code",36),e._uU(790,"\nimport { Job, DoneCallback } from 'bull';\n\nexport default function (job: Job, cb: DoneCallback) {\n  console.log(`[${process.pid}] ${JSON.stringify(job.data)}`);\n  cb(null, 'It works');\n}\n"),e.qZA()(),e.TgZ(791,"h4",38)(792,"span"),e._uU(793,"Async configuration"),e.qZA()(),e.TgZ(794,"p"),e._uU(795,"You may want to pass "),e.TgZ(796,"code"),e._uU(797,"bull"),e.qZA(),e._uU(798," options asynchronously instead of statically. In this case, use the "),e.TgZ(799,"code"),e._uU(800,"forRootAsync()"),e.qZA(),e._uU(801," method which provides several ways to deal with async configuration. Likewise, if you want to pass queue options asynchronously, use the "),e.TgZ(802,"code"),e._uU(803,"registerQueueAsync()"),e.qZA(),e._uU(804," method."),e.qZA(),e.TgZ(805,"p"),e._uU(806,"One approach is to use a factory function:"),e.qZA(),e.TgZ(807,"pre")(808,"code",16),e._uU(809,"\nBullModule.forRootAsync({\n  useFactory: () => ({\n    redis: {\n      host: 'localhost',\n      port: 6379,\n    },\n  }),\n});\n"),e.qZA()(),e.TgZ(810,"p"),e._uU(811,"Our factory behaves like any other "),e.TgZ(812,"a",39),e._uU(813,"asynchronous provider"),e.qZA(),e._uU(814," (e.g., it can be "),e.TgZ(815,"code"),e._uU(816,"async"),e.qZA(),e._uU(817," and it's able to inject dependencies through "),e.TgZ(818,"code"),e._uU(819,"inject"),e.qZA(),e._uU(820,")."),e.qZA(),e.TgZ(821,"pre")(822,"code",16),e._uU(823,"\nBullModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    redis: {\n      host: configService.get('QUEUE_HOST'),\n      port: +configService.get('QUEUE_PORT'),\n    },\n  }),\n  inject: [ConfigService],\n});\n"),e.qZA()(),e.TgZ(824,"p"),e._uU(825,"Alternatively, you can use the "),e.TgZ(826,"code"),e._uU(827,"useClass"),e.qZA(),e._uU(828," syntax:"),e.qZA(),e.TgZ(829,"pre")(830,"code",16),e._uU(831,"\nBullModule.forRootAsync({\n  useClass: BullConfigService,\n});\n"),e.qZA()(),e.TgZ(832,"p"),e._uU(833,"The construction above will instantiate "),e.TgZ(834,"code"),e._uU(835,"BullConfigService"),e.qZA(),e._uU(836," inside "),e.TgZ(837,"code"),e._uU(838,"BullModule"),e.qZA(),e._uU(839," and use it to provide an options object by calling "),e.TgZ(840,"code"),e._uU(841,"createSharedConfiguration()"),e.qZA(),e._uU(842,". Note that this means that the "),e.TgZ(843,"code"),e._uU(844,"BullConfigService"),e.qZA(),e._uU(845," has to implement the "),e.TgZ(846,"code"),e._uU(847,"SharedBullConfigurationFactory"),e.qZA(),e._uU(848," interface, as shown below:"),e.qZA(),e.TgZ(849,"pre")(850,"code",16),e._uU(851,"\n@Injectable()\nclass BullConfigService implements SharedBullConfigurationFactory {\n  createSharedConfiguration(): BullModuleOptions {\n    return {\n      redis: {\n        host: 'localhost',\n        port: 6379,\n      },\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(852,"p"),e._uU(853,"In order to prevent the creation of "),e.TgZ(854,"code"),e._uU(855,"BullConfigService"),e.qZA(),e._uU(856," inside "),e.TgZ(857,"code"),e._uU(858,"BullModule"),e.qZA(),e._uU(859," and use a provider imported from a different module, you can use the "),e.TgZ(860,"code"),e._uU(861,"useExisting"),e.qZA(),e._uU(862," syntax."),e.qZA(),e.TgZ(863,"pre")(864,"code",16),e._uU(865,"\nBullModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n"),e.qZA()(),e.TgZ(866,"p"),e._uU(867,"This construction works the same as "),e.TgZ(868,"code"),e._uU(869,"useClass"),e.qZA(),e._uU(870," with one critical difference - "),e.TgZ(871,"code"),e._uU(872,"BullModule"),e.qZA(),e._uU(873," will lookup imported modules to reuse an existing "),e.TgZ(874,"code"),e._uU(875,"ConfigService"),e.qZA(),e._uU(876," instead of instantiating a new one."),e.qZA(),e.TgZ(877,"h4",40)(878,"span"),e._uU(879,"Example"),e.qZA()(),e.TgZ(880,"p"),e._uU(881,"A working example is available "),e.TgZ(882,"a",41),e._uU(883,"here"),e.qZA(),e._uU(884,"."),e.qZA()()),2&n){const a=e.MAs(66),u=e.MAs(777),l=e.MAs(787);e.xp6(63),e.hij(" ",e.xi3(64,3,"app.module",a.isJsActive),"\n"),e.xp6(711),e.hij(" ",e.xi3(775,6,"app.module",u.isJsActive),"\n"),e.xp6(10),e.hij(" ",e.xi3(785,9,"processor",l.isJsActive),"\n")}},dependencies:[p.n,i.U,b.V,h.yS,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"Queues"}},{path:"hot-reload",redirectTo:"/recipes/hot-reload"},{path:"server-sent-events",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-sse"]],features:[e.qOj],decls:126,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/server-sent-events.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","server-sent-events"],["rel","nofollow","target","_blank","href","https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events"],["appAnchor","","id","usage"],[1,"language-typescript"],[1,"info"],[1,"warning"],["rel","nofollow","target","_blank","href","https://developer.mozilla.org/en-US/docs/Web/API/EventSource"],[1,"language-javascript"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/28-sse"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Server-Sent Events"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server via HTTP connection. Each notification is sent as a block of text terminated by a pair of newlines (learn more "),e.TgZ(9,"a",6),e._uU(10,"here"),e.qZA(),e._uU(11,")."),e.qZA(),e.TgZ(12,"h4",7)(13,"span"),e._uU(14,"Usage"),e.qZA()(),e.TgZ(15,"p"),e._uU(16,"To enable Server-Sent events on a route (route registered within a "),e.TgZ(17,"strong"),e._uU(18,"controller class"),e.qZA(),e._uU(19,"), annotate the method handler with the "),e.TgZ(20,"code"),e._uU(21,"@Sse()"),e.qZA(),e._uU(22," decorator."),e.qZA(),e.TgZ(23,"pre")(24,"code",8),e._uU(25,"\n@Sse('sse')\nsse(): Observable<MessageEvent> {\n  return interval(1000).pipe(map((_) => ({ data: { hello: 'world' } })));\n}\n"),e.qZA()(),e.TgZ(26,"blockquote",9)(27,"strong"),e._uU(28,"Hint"),e.qZA(),e._uU(29," The "),e.TgZ(30,"code"),e._uU(31,"@Sse()"),e.qZA(),e._uU(32," decorator and "),e.TgZ(33,"code"),e._uU(34,"MessageEvent"),e.qZA(),e._uU(35," interface are imported from the "),e.TgZ(36,"code"),e._uU(37,"@nestjs/common"),e.qZA(),e._uU(38,", while "),e.TgZ(39,"code"),e._uU(40,"Observable"),e.qZA(),e._uU(41,", "),e.TgZ(42,"code"),e._uU(43,"interval"),e.qZA(),e._uU(44,", and "),e.TgZ(45,"code"),e._uU(46,"map"),e.qZA(),e._uU(47," are imported from the "),e.TgZ(48,"code"),e._uU(49,"rxjs"),e.qZA(),e._uU(50," package.\n"),e.qZA(),e.TgZ(51,"blockquote",10)(52,"strong"),e._uU(53,"Warning"),e.qZA(),e._uU(54," Server-Sent Events routes must return an "),e.TgZ(55,"code"),e._uU(56,"Observable"),e.qZA(),e._uU(57," stream.\n"),e.qZA(),e.TgZ(58,"p"),e._uU(59,"In the example above, we defined a route named "),e.TgZ(60,"code"),e._uU(61,"sse"),e.qZA(),e._uU(62," that will allow us to propagate real-time updates. These events can be listened to using the "),e.TgZ(63,"a",11),e._uU(64,"EventSource API"),e.qZA(),e._uU(65,"."),e.qZA(),e.TgZ(66,"p"),e._uU(67,"The "),e.TgZ(68,"code"),e._uU(69,"sse"),e.qZA(),e._uU(70," method returns an "),e.TgZ(71,"code"),e._uU(72,"Observable"),e.qZA(),e._uU(73," that emits multiple "),e.TgZ(74,"code"),e._uU(75,"MessageEvent"),e.qZA(),e._uU(76," (in this example, it emits a new "),e.TgZ(77,"code"),e._uU(78,"MessageEvent"),e.qZA(),e._uU(79," every second). The "),e.TgZ(80,"code"),e._uU(81,"MessageEvent"),e.qZA(),e._uU(82," object should respect the following interface to match the specification:"),e.qZA(),e.TgZ(83,"pre")(84,"code",8),e._uU(85,"\nexport interface MessageEvent {\n  data: string | object;\n  id?: string;\n  type?: string;\n  retry?: number;\n}\n"),e.qZA()(),e.TgZ(86,"p"),e._uU(87,"With this in place, we can now create an instance of the "),e.TgZ(88,"code"),e._uU(89,"EventSource"),e.qZA(),e._uU(90," class in our client-side application, passing the "),e.TgZ(91,"code"),e._uU(92,"/sse"),e.qZA(),e._uU(93," route (which matches the endpoint we have passed into the "),e.TgZ(94,"code"),e._uU(95,"@Sse()"),e.qZA(),e._uU(96," decorator above) as a constructor argument."),e.qZA(),e.TgZ(97,"p")(98,"code"),e._uU(99,"EventSource"),e.qZA(),e._uU(100," instance opens a persistent connection to an HTTP server, which sends events in "),e.TgZ(101,"code"),e._uU(102,"text/event-stream"),e.qZA(),e._uU(103," format. The connection remains open until closed by calling "),e.TgZ(104,"code"),e._uU(105,"EventSource.close()"),e.qZA(),e._uU(106,"."),e.qZA(),e.TgZ(107,"p"),e._uU(108,"Once the connection is opened, incoming messages from the server are delivered to your code in the form of events. If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic "),e.TgZ(109,"code"),e._uU(110,"message"),e.qZA(),e._uU(111," event is fired ("),e.TgZ(112,"a",11),e._uU(113,"source"),e.qZA(),e._uU(114,")."),e.qZA(),e.TgZ(115,"pre")(116,"code",12),e._uU(117,"\nconst eventSource = new EventSource('/sse');\neventSource.onmessage = ({ data }) => {\n  console.log('New message', JSON.parse(data));\n};\n"),e.qZA()(),e.TgZ(118,"h4",13)(119,"span"),e._uU(120,"Example"),e.qZA()(),e.TgZ(121,"p"),e._uU(122,"A working example is available "),e.TgZ(123,"a",14),e._uU(124,"here"),e.qZA(),e._uU(125,"."),e.qZA()())},dependencies:[i.U],encapsulation:2,changeDetection:0}),t})(),data:{title:"Server-Sent Events"}},{path:"versioning",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-versioning"]],features:[e.qOj],decls:396,vars:52,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/versioning.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","versioning"],[1,"info"],["href","techniques/versioning#uri-versioning-type"],["href","techniques/versioning#header-versioning-type"],["href","techniques/versioning#media-type-versioning-type"],["href","techniques/versioning#custom-versioning-type"],["appAnchor","","id","uri-versioning-type"],[1,"warning"],["href","faq/global-prefix"],[1,"filename"],["app430c24dcf80d8d2ff2f685004ae3f55ae0e15363",""],[1,"language-typescript"],["appAnchor","","id","header-versioning-type"],["appf39dc16f22fe30d3184ade43a0938b42c65f1f24",""],["appAnchor","","id","media-type-versioning-type"],["appf3c3f6134843322b6c87b6520614a1c84773c017",""],["appAnchor","","id","custom-versioning-type"],["app5982e3b059e67c00e9aa0a7d1a26b88f317a9a8b",""],["appAnchor","","id","usage"],["appAnchor","","id","controller-versions"],["appffc619e168fb1f6cbf6d2583417bae936b38ff81",""],["appAnchor","","id","route-versions"],["appd405f4c1ffd966aa46274abf7efbc1c8e77fb278",""],["appAnchor","","id","multiple-versions"],["appf2811e5d0f17e77d202f4f611f2e9c9d3e795714",""],["appAnchor","","id","version-neutral"],["appb28ba51fc7f2fe4ab39973b8f82293d11286b3b8",""],["appAnchor","","id","global-default-version"],["app1769861bf2e2abbd9e18f8877b5b88a3026491ec",""]],template:function(n,s){if(1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Versioning"),e.qZA(),e.TgZ(7,"blockquote",6)(8,"strong"),e._uU(9,"Hint"),e.qZA(),e._uU(10," This chapter is only relevant to HTTP-based applications.\n"),e.qZA(),e.TgZ(11,"p"),e._uU(12,"Versioning allows you to have "),e.TgZ(13,"strong"),e._uU(14,"different versions"),e.qZA(),e._uU(15," of your controllers or individual routes running within the same application. Applications change very often and it is not unusual that there are breaking changes that you need to make while still needing to support the previous version of the application."),e.qZA(),e.TgZ(16,"p"),e._uU(17,"There are 4 types of versioning that are supported:"),e.qZA(),e.TgZ(18,"table")(19,"tr")(20,"td")(21,"a",7)(22,"code"),e._uU(23,"URI Versioning"),e.qZA()()(),e.TgZ(24,"td"),e._uU(25,"The version will be passed within the URI of the request (default)"),e.qZA()(),e.TgZ(26,"tr")(27,"td")(28,"a",8)(29,"code"),e._uU(30,"Header Versioning"),e.qZA()()(),e.TgZ(31,"td"),e._uU(32,"A custom request header will specify the version"),e.qZA()(),e.TgZ(33,"tr")(34,"td")(35,"a",9)(36,"code"),e._uU(37,"Media Type Versioning"),e.qZA()()(),e.TgZ(38,"td"),e._uU(39,"The "),e.TgZ(40,"code"),e._uU(41,"Accept"),e.qZA(),e._uU(42," header of the request will specify the version"),e.qZA()(),e.TgZ(43,"tr")(44,"td")(45,"a",10)(46,"code"),e._uU(47,"Custom Versioning"),e.qZA()()(),e.TgZ(48,"td"),e._uU(49,"Any aspect of the request may be used to specify the version(s). A custom function is provided to extract said version(s)."),e.qZA()()(),e.TgZ(50,"h4",11)(51,"span"),e._uU(52,"URI Versioning Type"),e.qZA()(),e.TgZ(53,"p"),e._uU(54,"URI Versioning uses the version passed within the URI of the request, such as "),e.TgZ(55,"code"),e._uU(56,"https://example.com/v1/route"),e.qZA(),e._uU(57," and "),e.TgZ(58,"code"),e._uU(59,"https://example.com/v2/route"),e.qZA(),e._uU(60,"."),e.qZA(),e.TgZ(61,"blockquote",12)(62,"strong"),e._uU(63,"Notice"),e.qZA(),e._uU(64," With URI Versioning the version will be automatically added to the URI after the "),e.TgZ(65,"a",13),e._uU(66,"global path prefix"),e.qZA(),e._uU(67," (if one exists), and before any controller or route paths.\n"),e.qZA(),e.TgZ(68,"p"),e._uU(69,"To enable URI Versioning for your application, do the following:"),e.qZA(),e.TgZ(70,"span",14),e._uU(71),e.ALo(72,"extension"),e._UZ(73,"app-tabs",null,15),e.qZA(),e.TgZ(75,"pre")(76,"code",16),e._uU(77,'\nconst app = await NestFactory.create(AppModule);\n// or "app.enableVersioning()"\napp.enableVersioning({\n  type: VersioningType.URI,\n});\nawait app.listen(3000);\n'),e.qZA()(),e.TgZ(78,"blockquote",12)(79,"strong"),e._uU(80,"Notice"),e.qZA(),e._uU(81," The version in the URI will be automatically prefixed with "),e.TgZ(82,"code"),e._uU(83,"v"),e.qZA(),e._uU(84," by default, however the prefix value can be configured by setting the "),e.TgZ(85,"code"),e._uU(86,"prefix"),e.qZA(),e._uU(87," key to your desired prefix or "),e.TgZ(88,"code"),e._uU(89,"false"),e.qZA(),e._uU(90," if you wish to disable it.\n"),e.qZA(),e.TgZ(91,"blockquote",6)(92,"strong"),e._uU(93,"Hint"),e.qZA(),e._uU(94," The "),e.TgZ(95,"code"),e._uU(96,"VersioningType"),e.qZA(),e._uU(97," enum is available to use for the "),e.TgZ(98,"code"),e._uU(99,"type"),e.qZA(),e._uU(100," property and is imported from the "),e.TgZ(101,"code"),e._uU(102,"@nestjs/common"),e.qZA(),e._uU(103," package.\n"),e.qZA(),e.TgZ(104,"h4",17)(105,"span"),e._uU(106,"Header Versioning Type"),e.qZA()(),e.TgZ(107,"p"),e._uU(108,"Header Versioning uses a custom, user specified, request header to specify the version where the value of the header will be the version to use for the request."),e.qZA(),e.TgZ(109,"p"),e._uU(110,"Example HTTP Requests for Header Versioning:"),e.qZA(),e.TgZ(111,"p"),e._uU(112,"To enable "),e.TgZ(113,"strong"),e._uU(114,"Header Versioning"),e.qZA(),e._uU(115," for your application, do the following:"),e.qZA(),e.TgZ(116,"span",14),e._uU(117),e.ALo(118,"extension"),e._UZ(119,"app-tabs",null,18),e.qZA(),e.TgZ(121,"pre")(122,"code",16),e._uU(123,"\nconst app = await NestFactory.create(AppModule);\napp.enableVersioning({\n  type: VersioningType.HEADER,\n  header: 'Custom-Header',\n});\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(124,"p"),e._uU(125,"The "),e.TgZ(126,"code"),e._uU(127,"header"),e.qZA(),e._uU(128," property should be the name of the header that will contain the version of the request."),e.qZA(),e.TgZ(129,"blockquote",6)(130,"strong"),e._uU(131,"Hint"),e.qZA(),e._uU(132," The "),e.TgZ(133,"code"),e._uU(134,"VersioningType"),e.qZA(),e._uU(135," enum is available to use for the "),e.TgZ(136,"code"),e._uU(137,"type"),e.qZA(),e._uU(138," property and is imported from the "),e.TgZ(139,"code"),e._uU(140,"@nestjs/common"),e.qZA(),e._uU(141," package.\n"),e.qZA(),e.TgZ(142,"h4",19)(143,"span"),e._uU(144,"Media Type Versioning Type"),e.qZA()(),e.TgZ(145,"p"),e._uU(146,"Media Type Versioning uses the "),e.TgZ(147,"code"),e._uU(148,"Accept"),e.qZA(),e._uU(149," header of the request to specify the version."),e.qZA(),e.TgZ(150,"p"),e._uU(151,"Within the "),e.TgZ(152,"code"),e._uU(153,"Accept"),e.qZA(),e._uU(154," header, the version will be separated from the media type with a semi-colon, "),e.TgZ(155,"code"),e._uU(156,";"),e.qZA(),e._uU(157,". It should then contain a key-value pair that represents the version to use for the request, such as "),e.TgZ(158,"code"),e._uU(159,"Accept: application/json;v=2"),e.qZA(),e._uU(160,". They key is treated more as a prefix when determining the version will to be configured to include the key and separator."),e.qZA(),e.TgZ(161,"p"),e._uU(162,"To enable "),e.TgZ(163,"strong"),e._uU(164,"Media Type Versioning"),e.qZA(),e._uU(165," for your application, do the following:"),e.qZA(),e.TgZ(166,"span",14),e._uU(167),e.ALo(168,"extension"),e._UZ(169,"app-tabs",null,20),e.qZA(),e.TgZ(171,"pre")(172,"code",16),e._uU(173,"\nconst app = await NestFactory.create(AppModule);\napp.enableVersioning({\n  type: VersioningType.MEDIA_TYPE,\n  key: 'v=',\n});\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(174,"p"),e._uU(175,"The "),e.TgZ(176,"code"),e._uU(177,"key"),e.qZA(),e._uU(178," property should be the key and separator of the key-value pair that contains the version. For the example "),e.TgZ(179,"code"),e._uU(180,"Accept: application/json;v=2"),e.qZA(),e._uU(181,", the "),e.TgZ(182,"code"),e._uU(183,"key"),e.qZA(),e._uU(184," property would be set to "),e.TgZ(185,"code"),e._uU(186,"v="),e.qZA(),e._uU(187,"."),e.qZA(),e.TgZ(188,"blockquote",6)(189,"strong"),e._uU(190,"Hint"),e.qZA(),e._uU(191," The "),e.TgZ(192,"code"),e._uU(193,"VersioningType"),e.qZA(),e._uU(194," enum is available to use for the "),e.TgZ(195,"code"),e._uU(196,"type"),e.qZA(),e._uU(197," property and is imported from the "),e.TgZ(198,"code"),e._uU(199,"@nestjs/common"),e.qZA(),e._uU(200," package.\n"),e.qZA(),e.TgZ(201,"h4",21)(202,"span"),e._uU(203,"Custom Versioning Type"),e.qZA()(),e.TgZ(204,"p"),e._uU(205,"Custom Versioning uses any aspect of the request to specify the version (or versions). The incoming request is analyzed\nusing an "),e.TgZ(206,"code"),e._uU(207,"extractor"),e.qZA(),e._uU(208," function that returns a string or array of strings."),e.qZA(),e.TgZ(209,"p"),e._uU(210,"If multiple versions are provided by the requester, the extractor function can return an array of strings, sorted in\norder of greatest/highest version to smallest/lowest version. Versions are matched to routes in order from highest to\nlowest."),e.qZA(),e.TgZ(211,"p"),e._uU(212,"If an empty string or array is returned from the "),e.TgZ(213,"code"),e._uU(214,"extractor"),e.qZA(),e._uU(215,", no routes are matched and a 404 is returned."),e.qZA(),e.TgZ(216,"p"),e._uU(217,"For example, if an incoming request specifies it supports versions "),e.TgZ(218,"code"),e._uU(219,"1"),e.qZA(),e._uU(220,", "),e.TgZ(221,"code"),e._uU(222,"2"),e.qZA(),e._uU(223,", and "),e.TgZ(224,"code"),e._uU(225,"3"),e.qZA(),e._uU(226,", the "),e.TgZ(227,"code"),e._uU(228,"extractor"),e.qZA(),e.TgZ(229,"strong"),e._uU(230,"MUST"),e.qZA(),e._uU(231," return "),e.TgZ(232,"code"),e._uU(233,"[3, 2, 1]"),e.qZA(),e._uU(234,". This ensures that the highest possible route version is selected first."),e.qZA(),e.TgZ(235,"p"),e._uU(236,"If versions "),e.TgZ(237,"code"),e._uU(238,"[3, 2, 1]"),e.qZA(),e._uU(239," are extracted, but routes only exist for version "),e.TgZ(240,"code"),e._uU(241,"2"),e.qZA(),e._uU(242," and "),e.TgZ(243,"code"),e._uU(244,"1"),e.qZA(),e._uU(245,", the route that matches version "),e.TgZ(246,"code"),e._uU(247,"2"),e.qZA(),e._uU(248,"\nis selected (version "),e.TgZ(249,"code"),e._uU(250,"3"),e.qZA(),e._uU(251," is automatically ignored)."),e.qZA(),e.TgZ(252,"blockquote",12)(253,"strong"),e._uU(254,"Notice"),e.qZA(),e._uU(255," Selecting the highest matching version based on the array returned from "),e.TgZ(256,"code"),e._uU(257,"extractor"),e.qZA(),e._uU(258," > "),e.TgZ(259,"strong"),e._uU(260,"does not reliably work"),e.qZA(),e._uU(261," with the Express adapter due to design limitations. A single version (either a string or\narray of 1 element) works just fine in Express. Fastify correctly supports both highest matching version\nselection and single version selection.\n"),e.qZA(),e.TgZ(262,"p"),e._uU(263,"To enable "),e.TgZ(264,"strong"),e._uU(265,"Custom Versioning"),e.qZA(),e._uU(266," for your application, create an "),e.TgZ(267,"code"),e._uU(268,"extractor"),e.qZA(),e._uU(269," function and pass it into your application\nlike so:"),e.qZA(),e.TgZ(270,"span",14),e._uU(271),e.ALo(272,"extension"),e._UZ(273,"app-tabs",null,22),e.qZA(),e.TgZ(275,"pre")(276,"code",16),e._uU(277,"\n// Example extractor that pulls out a list of versions from a custom header and turns it into a sorted array.\n// This example uses Fastify, but Express requests can be processed in a similar way.\nconst extractor = (request: FastifyRequest): string | string[] =>\n  [request.headers['custom-versioning-field'] ?? '']\n     .flatMap(v => v.split(','))\n     .filter(v => !!v)\n     .sort()\n     .reverse()\n\nconst app = await NestFactory.create(AppModule);\napp.enableVersioning({\n  type: VersioningType.CUSTOM,\n  extractor,\n});\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(278,"h4",23)(279,"span"),e._uU(280,"Usage"),e.qZA()(),e.TgZ(281,"p"),e._uU(282,"Versioning allows you to version controllers, individual routes, and also provides a way for certain resources to opt-out of versioning. The usage of versioning is the same regardless of the Versioning Type your application uses."),e.qZA(),e.TgZ(283,"blockquote",12)(284,"strong"),e._uU(285,"Notice"),e.qZA(),e._uU(286," If versioning is enabled for the application but the controller or route does not specify the version, any requests to that controller/route will be returned a "),e.TgZ(287,"code"),e._uU(288,"404"),e.qZA(),e._uU(289," response status. Similarly, if a request is received containing a version that does not have a corresponding controller or route, it will also be returned a "),e.TgZ(290,"code"),e._uU(291,"404"),e.qZA(),e._uU(292," response status.\n"),e.qZA(),e.TgZ(293,"h4",24)(294,"span"),e._uU(295,"Controller versions"),e.qZA()(),e.TgZ(296,"p"),e._uU(297,"A version can be applied to a controller, setting the version for all routes within the controller."),e.qZA(),e.TgZ(298,"p"),e._uU(299,"To add a version to a controller do the following:"),e.qZA(),e.TgZ(300,"span",14),e._uU(301),e.ALo(302,"extension"),e._UZ(303,"app-tabs",null,25),e.qZA(),e.TgZ(305,"pre")(306,"code",16),e._uU(307,"\n@Controller({\n  version: '1',\n})\nexport class CatsControllerV1 {\n  @Get('cats')\n  findAll(): string {\n    return 'This action returns all cats for version 1';\n  }\n}\n"),e.qZA()(),e.TgZ(308,"pre")(309,"code",16),e._uU(310,"\n@Controller({\n  version: '1',\n})\nexport class CatsControllerV1 {\n  @Get('cats')\n  findAll() {\n    return 'This action returns all cats for version 1';\n  }\n}\n"),e.qZA()(),e.TgZ(311,"h4",26)(312,"span"),e._uU(313,"Route versions"),e.qZA()(),e.TgZ(314,"p"),e._uU(315,"A version can be applied to an individual route. This version will override any other version that would effect the route, such as the Controller Version."),e.qZA(),e.TgZ(316,"p"),e._uU(317,"To add a version to an individual route do the following:"),e.qZA(),e.TgZ(318,"span",14),e._uU(319),e.ALo(320,"extension"),e._UZ(321,"app-tabs",null,27),e.qZA(),e.TgZ(323,"pre")(324,"code",16),e._uU(325,"\nimport { Controller, Get, Version } from '@nestjs/common';\n\n@Controller()\nexport class CatsController {\n  @Version('1')\n  @Get('cats')\n  findAllV1(): string {\n    return 'This action returns all cats for version 1';\n  }\n\n  @Version('2')\n  @Get('cats')\n  findAllV2(): string {\n    return 'This action returns all cats for version 2';\n  }\n}\n"),e.qZA()(),e.TgZ(326,"pre")(327,"code",16),e._uU(328,"\nimport { Controller, Get, Version } from '@nestjs/common';\n\n@Controller()\nexport class CatsController {\n  @Version('1')\n  @Get('cats')\n  findAllV1() {\n    return 'This action returns all cats for version 1';\n  }\n\n  @Version('2')\n  @Get('cats')\n  findAllV2() {\n    return 'This action returns all cats for version 2';\n  }\n}\n"),e.qZA()(),e.TgZ(329,"h4",28)(330,"span"),e._uU(331,"Multiple versions"),e.qZA()(),e.TgZ(332,"p"),e._uU(333,"Multiple versions can be applied to a controller or route. To use multiple versions, you would set the version to be an Array."),e.qZA(),e.TgZ(334,"p"),e._uU(335,"To add multiple versions do the following:"),e.qZA(),e.TgZ(336,"span",14),e._uU(337),e.ALo(338,"extension"),e._UZ(339,"app-tabs",null,29),e.qZA(),e.TgZ(341,"pre")(342,"code",16),e._uU(343,"\n@Controller({\n  version: ['1', '2'],\n})\nexport class CatsController {\n  @Get('cats')\n  findAll(): string {\n    return 'This action returns all cats for version 1 or 2';\n  }\n}\n"),e.qZA()(),e.TgZ(344,"pre")(345,"code",16),e._uU(346,"\n@Controller({\n  version: ['1', '2'],\n})\nexport class CatsController {\n  @Get('cats')\n  findAll() {\n    return 'This action returns all cats for version 1 or 2';\n  }\n}\n"),e.qZA()(),e.TgZ(347,"h4",30)(348,"span"),e._uU(349,'Version "Neutral"'),e.qZA()(),e.TgZ(350,"p"),e._uU(351,"Some controllers or routes may not care about the version and would have the same functionality regardless of the version. To accommodate this, the version can be set to "),e.TgZ(352,"code"),e._uU(353,"VERSION_NEUTRAL"),e.qZA(),e._uU(354," symbol."),e.qZA(),e.TgZ(355,"p"),e._uU(356,"An incoming request will be mapped to a "),e.TgZ(357,"code"),e._uU(358,"VERSION_NEUTRAL"),e.qZA(),e._uU(359," controller or route regardless of the version sent in the request in addition to if the request does not contain a version at all."),e.qZA(),e.TgZ(360,"blockquote",12)(361,"strong"),e._uU(362,"Notice"),e.qZA(),e._uU(363," For URI Versioning, a "),e.TgZ(364,"code"),e._uU(365,"VERSION_NEUTRAL"),e.qZA(),e._uU(366," resource would not have the version present in the URI.\n"),e.qZA(),e.TgZ(367,"p"),e._uU(368,"To add a version neutral controller or route do the following:"),e.qZA(),e.TgZ(369,"span",14),e._uU(370),e.ALo(371,"extension"),e._UZ(372,"app-tabs",null,31),e.qZA(),e.TgZ(374,"pre")(375,"code",16),e._uU(376,"\nimport { Controller, Get, VERSION_NEUTRAL } from '@nestjs/common';\n\n@Controller({\n  version: VERSION_NEUTRAL,\n})\nexport class CatsController {\n  @Get('cats')\n  findAll(): string {\n    return 'This action returns all cats regardless of version';\n  }\n}\n"),e.qZA()(),e.TgZ(377,"pre")(378,"code",16),e._uU(379,"\nimport { Controller, Get, VERSION_NEUTRAL } from '@nestjs/common';\n\n@Controller({\n  version: VERSION_NEUTRAL,\n})\nexport class CatsController {\n  @Get('cats')\n  findAll() {\n    return 'This action returns all cats regardless of version';\n  }\n}\n"),e.qZA()(),e.TgZ(380,"h4",32)(381,"span"),e._uU(382,"Global default version"),e.qZA()(),e.TgZ(383,"p"),e._uU(384,"If you do not want to provide a version for each controller/or individual routes, or if you want to have a specific version set as the default version for every controller/route that don't have the version specified, you could set the "),e.TgZ(385,"code"),e._uU(386,"defaultVersion"),e.qZA(),e._uU(387," as follows:"),e.qZA(),e.TgZ(388,"span",14),e._uU(389),e.ALo(390,"extension"),e._UZ(391,"app-tabs",null,33),e.qZA(),e.TgZ(393,"pre")(394,"code",16),e._uU(395,"\napp.enableVersioning({\n  // ...\n  defaultVersion: '1'\n  // or\n  defaultVersion: ['1', '2']\n  // or\n  defaultVersion: VERSION_NEUTRAL\n});\n"),e.qZA()()()),2&n){const a=e.MAs(74),u=e.MAs(120),l=e.MAs(170),c=e.MAs(274),g=e.MAs(304),Z=e.MAs(322),_=e.MAs(340),m=e.MAs(373),A=e.MAs(392);e.xp6(71),e.hij(" ",e.xi3(72,25,"main",a.isJsActive),"\n"),e.xp6(46),e.hij(" ",e.xi3(118,28,"main",u.isJsActive),"\n"),e.xp6(50),e.hij(" ",e.xi3(168,31,"main",l.isJsActive),"\n"),e.xp6(104),e.hij(" ",e.xi3(272,34,"main",c.isJsActive),"\n"),e.xp6(30),e.hij(" ",e.xi3(302,37,"cats.controller",g.isJsActive),"\n"),e.xp6(4),e.ekj("hide",g.isJsActive),e.xp6(3),e.ekj("hide",!g.isJsActive),e.xp6(11),e.hij(" ",e.xi3(320,40,"cats.controller",Z.isJsActive),"\n"),e.xp6(4),e.ekj("hide",Z.isJsActive),e.xp6(3),e.ekj("hide",!Z.isJsActive),e.xp6(11),e.hij(" ",e.xi3(338,43,"cats.controller",_.isJsActive),"\n"),e.xp6(4),e.ekj("hide",_.isJsActive),e.xp6(3),e.ekj("hide",!_.isJsActive),e.xp6(26),e.hij(" ",e.xi3(371,46,"cats.controller",m.isJsActive),"\n"),e.xp6(4),e.ekj("hide",m.isJsActive),e.xp6(3),e.ekj("hide",!m.isJsActive),e.xp6(12),e.hij(" ",e.xi3(390,49,"main",A.isJsActive),"\n")}},dependencies:[p.n,i.U,U.F],encapsulation:2,changeDetection:0}),t})(),data:{title:"Versioning"}},{path:"events",component:I,data:{title:"Events"}},{path:"session",component:(()=>{class t extends r.y{}return t.\u0275fac=function(){let o;return function(s){return(o||(o=e.n5z(t)))(s||t)}}(),t.\u0275cmp=e.Xpm({type:t,selectors:[["app-sessions"]],features:[e.qOj],decls:193,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/sessions.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","session"],["routerLink","/techniques/mvc"],["appAnchor","","id","use-with-express-default"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/session"],[1,"language-shell"],[1,"language-typescript"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/session#saveuninitialized"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/session#options"],[1,"info"],["appAnchor","","id","use-with-fastify"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify-secure-session"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify-secure-session#using-keys-with-key-rotation"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Session"),e.qZA(),e.TgZ(7,"p")(8,"strong"),e._uU(9,"HTTP sessions"),e.qZA(),e._uU(10," provide a way to store information about the user across multiple requests, which is particularly useful for "),e.TgZ(11,"a",6),e._uU(12,"MVC"),e.qZA(),e._uU(13," applications."),e.qZA(),e.TgZ(14,"h4",7)(15,"span"),e._uU(16,"Use with Express (default)"),e.qZA()(),e.TgZ(17,"p"),e._uU(18,"First install the "),e.TgZ(19,"a",8),e._uU(20,"required package"),e.qZA(),e._uU(21," (and its types for TypeScript users):"),e.qZA(),e.TgZ(22,"pre")(23,"code",9),e._uU(24,"\n$ npm i express-session\n$ npm i -D @types/express-session\n"),e.qZA()(),e.TgZ(25,"p"),e._uU(26,"Once the installation is complete, apply the "),e.TgZ(27,"code"),e._uU(28,"express-session"),e.qZA(),e._uU(29," middleware as global middleware (for example, in your "),e.TgZ(30,"code"),e._uU(31,"main.ts"),e.qZA(),e._uU(32," file)."),e.qZA(),e.TgZ(33,"pre")(34,"code",10),e._uU(35,"\nimport * as session from 'express-session';\n// somewhere in your initialization file\napp.use(\n  session({\n    secret: 'my-secret',\n    resave: false,\n    saveUninitialized: false,\n  }),\n);\n"),e.qZA()(),e.TgZ(36,"blockquote",11)(37,"strong"),e._uU(38,"Notice"),e.qZA(),e._uU(39," The default server-side session storage is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing. Read more in the "),e.TgZ(40,"a",8),e._uU(41,"official repository"),e.qZA(),e._uU(42,".\n"),e.qZA(),e.TgZ(43,"p"),e._uU(44,"The "),e.TgZ(45,"code"),e._uU(46,"secret"),e.qZA(),e._uU(47," is used to sign the session ID cookie. This can be either a string for a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters."),e.qZA(),e.TgZ(48,"p"),e._uU(49,"Enabling the "),e.TgZ(50,"code"),e._uU(51,"resave"),e.qZA(),e._uU(52," option forces the session to be saved back to the session store, even if the session was never modified during the request. The default value is "),e.TgZ(53,"code"),e._uU(54,"true"),e.qZA(),e._uU(55,", but using the default has been deprecated, as the default will change in the future."),e.qZA(),e.TgZ(56,"p"),e._uU(57,"Likewise, enabling the "),e.TgZ(58,"code"),e._uU(59,"saveUninitialized"),e.qZA(),e._uU(60,' option Forces a session that is "uninitialized" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing '),e.TgZ(61,"code"),e._uU(62,"false"),e.qZA(),e._uU(63," is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing "),e.TgZ(64,"code"),e._uU(65,"false"),e.qZA(),e._uU(66," will also help with race conditions where a client makes multiple parallel requests without a session ("),e.TgZ(67,"a",12),e._uU(68,"source"),e.qZA(),e._uU(69,")."),e.qZA(),e.TgZ(70,"p"),e._uU(71,"You can pass several other options to the "),e.TgZ(72,"code"),e._uU(73,"session"),e.qZA(),e._uU(74," middleware, read more about them in the "),e.TgZ(75,"a",13),e._uU(76,"API documentation"),e.qZA(),e._uU(77,"."),e.qZA(),e.TgZ(78,"blockquote",14)(79,"strong"),e._uU(80,"Hint"),e.qZA(),e._uU(81," Please note that "),e.TgZ(82,"code"),e._uU(83,"secure: true"),e.qZA(),e._uU(84," is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If secure is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using "),e.TgZ(85,"code"),e._uU(86,"secure: true"),e.qZA(),e._uU(87,", you need to set "),e.TgZ(88,"code"),e._uU(89,'"trust proxy"'),e.qZA(),e._uU(90," in express.\n"),e.qZA(),e.TgZ(91,"p"),e._uU(92,"With this in place, you can now set and read session values from within the route handlers, as follows:"),e.qZA(),e.TgZ(93,"pre")(94,"code",10),e._uU(95,"\n@Get()\nfindAll(@Req() request: Request) {\n  request.session.visits = request.session.visits ? request.session.visits + 1 : 1;\n}\n"),e.qZA()(),e.TgZ(96,"blockquote",14)(97,"strong"),e._uU(98,"Hint"),e.qZA(),e._uU(99," The "),e.TgZ(100,"code"),e._uU(101,"@Req()"),e.qZA(),e._uU(102," decorator is imported from the "),e.TgZ(103,"code"),e._uU(104,"@nestjs/common"),e.qZA(),e._uU(105,", while "),e.TgZ(106,"code"),e._uU(107,"Request"),e.qZA(),e._uU(108," from the "),e.TgZ(109,"code"),e._uU(110,"express"),e.qZA(),e._uU(111," package.\n"),e.qZA(),e.TgZ(112,"p"),e._uU(113,"Alternatively, you can use the "),e.TgZ(114,"code"),e._uU(115,"@Session()"),e.qZA(),e._uU(116," decorator to extract a session object from the request, as follows:"),e.qZA(),e.TgZ(117,"pre")(118,"code",10),e._uU(119,"\n@Get()\nfindAll(@Session() session: Record<string, any>) {\n  session.visits = session.visits ? session.visits + 1 : 1;\n}\n"),e.qZA()(),e.TgZ(120,"blockquote",14)(121,"strong"),e._uU(122,"Hint"),e.qZA(),e._uU(123," The "),e.TgZ(124,"code"),e._uU(125,"@Session()"),e.qZA(),e._uU(126," decorator is imported from the "),e.TgZ(127,"code"),e._uU(128,"@nestjs/common"),e.qZA(),e._uU(129," package.\n"),e.qZA(),e.TgZ(130,"h4",15)(131,"span"),e._uU(132,"Use with Fastify"),e.qZA()(),e.TgZ(133,"p"),e._uU(134,"First install the required package:"),e.qZA(),e.TgZ(135,"pre")(136,"code",9),e._uU(137,"\n$ npm i fastify-secure-session\n"),e.qZA()(),e.TgZ(138,"p"),e._uU(139,"Once the installation is complete, register the "),e.TgZ(140,"code"),e._uU(141,"fastify-secure-session"),e.qZA(),e._uU(142," plugin:"),e.qZA(),e.TgZ(143,"pre")(144,"code",10),e._uU(145,"\nimport secureSession from 'fastify-secure-session';\n\n// somewhere in your initialization file\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter(),\n);\nawait app.register(secureSession, {\n  secret: 'averylogphrasebiggerthanthirtytwochars',\n  salt: 'mq9hDxBVDbspDR6n',\n});\n"),e.qZA()(),e.TgZ(146,"blockquote",14)(147,"strong"),e._uU(148,"Hint"),e.qZA(),e._uU(149," You can also pregenerate a key ("),e.TgZ(150,"a",16),e._uU(151,"see instructions"),e.qZA(),e._uU(152,") or use "),e.TgZ(153,"a",17),e._uU(154,"keys rotation"),e.qZA(),e._uU(155,".\n"),e.qZA(),e.TgZ(156,"p"),e._uU(157,"Read more about the available options in the "),e.TgZ(158,"a",16),e._uU(159,"official repository"),e.qZA(),e._uU(160,"."),e.qZA(),e.TgZ(161,"p"),e._uU(162,"With this in place, you can now set and read session values from within the route handlers, as follows:"),e.qZA(),e.TgZ(163,"pre")(164,"code",10),e._uU(165,"\n@Get()\nfindAll(@Req() request: FastifyRequest) {\n  const visits = request.session.get('visits');\n  request.session.set('visits', visits ? visits + 1 : 1);\n}\n"),e.qZA()(),e.TgZ(166,"p"),e._uU(167,"Alternatively, you can use the "),e.TgZ(168,"code"),e._uU(169,"@Session()"),e.qZA(),e._uU(170," decorator to extract a session object from the request, as follows:"),e.qZA(),e.TgZ(171,"pre")(172,"code",10),e._uU(173,"\n@Get()\nfindAll(@Session() session: secureSession.Session) {\n  const visits = session.get('visits');\n  session.set('visits', visits ? visits + 1 : 1);\n}\n"),e.qZA()(),e.TgZ(174,"blockquote",14)(175,"strong"),e._uU(176,"Hint"),e.qZA(),e._uU(177," The "),e.TgZ(178,"code"),e._uU(179,"@Session()"),e.qZA(),e._uU(180," decorator is imported from the "),e.TgZ(181,"code"),e._uU(182,"@nestjs/common"),e.qZA(),e._uU(183,", while "),e.TgZ(184,"code"),e._uU(185,"secureSession.Session"),e.qZA(),e._uU(186," from the "),e.TgZ(187,"code"),e._uU(188,"fastify-secure-session"),e.qZA(),e._uU(189," package (import statement: "),e.TgZ(190,"code"),e._uU(191,"import * as secureSession from 'fastify-secure-session'"),e.qZA(),e._uU(192,").\n"),e.qZA()())},dependencies:[i.U,h.yS],encapsulation:2,changeDetection:0}),t})(),data:{title:"Session"}}];let N=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[k.ez,x.m,h.Bz.forChild(O)]}),t})()}}]);