"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[444],{9444:(T,_,i)=>{i.r(_),i.d(_,{CliModule:()=>l});var a=i(1180),U=i(6895),Z=i(6641),h=i(4466),p=i(4834),e=i(1571),g=i(4521);class s extends p.y{}(0,a.Z)(s,"\u0275fac",function(){let t;return function(n){return(t||(t=e.n5z(s)))(n||s)}}()),(0,a.Z)(s,"\u0275cmp",e.Xpm({type:s,selectors:[["app-libraries"]],features:[e.qOj],decls:218,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/cli/libraries.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","libraries"],["routerLink","/modules"],["rel","nofollow","target","_blank","href","https://npmjs.com"],["appAnchor","","id","nest-libraries"],["appAnchor","","id","creating-libraries"],[1,"language-bash"],[1,"file-tree"],[1,"item"],[1,"children"],[1,"language-javascript"],["appAnchor","","id","using-libraries"],[1,"language-typescript"],["href","https://docs.nestjs.com/cli/monorepo#global-compiler-options"]],template:function(o,n){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Libraries"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Many applications need to solve the same general problems, or re-use a modular component in several different contexts. Nest has a few ways of addressing this, but each works at a different level to solve the problem in a way that helps meet different architectural and organizational objectives."),e.qZA(),e.TgZ(9,"p"),e._uU(10,"Nest "),e.TgZ(11,"a",6),e._uU(12,"modules"),e.qZA(),e._uU(13," are useful for providing an execution context that enables sharing components within a single application. Modules can also be packaged with "),e.TgZ(14,"a",7),e._uU(15,"npm"),e.qZA(),e._uU(16," to create a reusable library that can be installed in different projects. This can be an effective way to distribute configurable, re-usable libraries that can be used by different, loosely connected or unaffiliated organizations (e.g., by distributing/installing 3rd party libraries)."),e.qZA(),e.TgZ(17,"p"),e._uU(18,"For sharing code within closely organized groups (e.g., within company/project boundaries), it can be useful to have a more lightweight approach to sharing components. Monorepos have arisen as a construct to enable that, and within a monorepo, a "),e.TgZ(19,"strong"),e._uU(20,"library"),e.qZA(),e._uU(21," provides a way to share code in an easy, lightweight fashion. In a Nest monorepo, using libraries enables easy assembly of applications that share components. In fact, this encourages decomposition of monolithic applications and development processes to focus on building and composing modular components."),e.qZA(),e.TgZ(22,"h4",8)(23,"span"),e._uU(24,"Nest libraries"),e.qZA()(),e.TgZ(25,"p"),e._uU(26,"A Nest library is a Nest project that differs from an application in that it cannot run on its own. A library must be imported into a containing application in order for its code to execute. The built-in support for libraries described in this section is only available for "),e.TgZ(27,"strong"),e._uU(28,"monorepos"),e.qZA(),e._uU(29," (standard mode projects can achieve similar functionality using npm packages)."),e.qZA(),e.TgZ(30,"p"),e._uU(31,"For example, an organization may develop an "),e.TgZ(32,"code"),e._uU(33,"AuthModule"),e.qZA(),e._uU(34," that manages authentication by implementing company policies that govern all internal applications. Rather than build that module separately for each application, or physically packaging the code with npm and requiring each project to install it, a monorepo can define this module as a library. When organized this way, all consumers of the library module can see an up-to-date version of the "),e.TgZ(35,"code"),e._uU(36,"AuthModule"),e.qZA(),e._uU(37," as it is committed. This can have significant benefits for coordinating component development and assembly, and simplifying end-to-end testing."),e.qZA(),e.TgZ(38,"h4",9)(39,"span"),e._uU(40,"Creating libraries"),e.qZA()(),e.TgZ(41,"p"),e._uU(42,"Any functionality that is suitable for re-use is a candidate for being managed as a library. Deciding what should be a library, and what should be part of an application, is an architectural design decision. Creating libraries involves more than simply copying code from an existing application to a new library. When packaged as a library, the library code must be decoupled from the application. This may require "),e.TgZ(43,"strong"),e._uU(44,"more"),e.qZA(),e._uU(45," time up front and force some design decisions that you may not face with more tightly coupled code. But this additional effort can pay off when the library can be used to enable more rapid application assembly across multiple applications."),e.qZA(),e.TgZ(46,"p"),e._uU(47,"To get started with creating a library, run the following command:"),e.qZA(),e.TgZ(48,"pre")(49,"code",10),e._uU(50,"\n$ nest g library my-library\n"),e.qZA()(),e.TgZ(51,"p"),e._uU(52,"When you run the command, the "),e.TgZ(53,"code"),e._uU(54,"library"),e.qZA(),e._uU(55," schematic prompts you for a prefix (AKA alias) for the library:"),e.qZA(),e.TgZ(56,"pre")(57,"code",10),e._uU(58,"\nWhat prefix would you like to use for the library (default: @app)?\n"),e.qZA()(),e.TgZ(59,"p"),e._uU(60,"This creates a new project in your workspace called "),e.TgZ(61,"code"),e._uU(62,"my-library"),e.qZA(),e._uU(63,".\nA library-type project, like an application-type project, is generated into a named folder using a schematic. Libraries are managed under the "),e.TgZ(64,"code"),e._uU(65,"libs"),e.qZA(),e._uU(66," folder of the monorepo root. Nest creates the "),e.TgZ(67,"code"),e._uU(68,"libs"),e.qZA(),e._uU(69," folder the first time a library is created."),e.qZA(),e.TgZ(70,"p"),e._uU(71,"The files generated for a library are slightly different from those generated for an application. Here is the contents of the "),e.TgZ(72,"code"),e._uU(73,"libs"),e.qZA(),e._uU(74," folder after executing the command above:"),e.qZA(),e.TgZ(75,"div",11)(76,"div",12),e._uU(77,"libs"),e.qZA(),e.TgZ(78,"div",13)(79,"div",12),e._uU(80,"my-library"),e.qZA(),e.TgZ(81,"div",13)(82,"div",12),e._uU(83,"src"),e.qZA(),e.TgZ(84,"div",13)(85,"div",12),e._uU(86,"index.ts"),e.qZA(),e.TgZ(87,"div",12),e._uU(88,"my-library.module.ts"),e.qZA(),e.TgZ(89,"div",12),e._uU(90,"my-library.service.ts"),e.qZA()(),e.TgZ(91,"div",12),e._uU(92,"tsconfig.lib.json"),e.qZA()()()(),e.TgZ(93,"p"),e._uU(94,"The "),e.TgZ(95,"code"),e._uU(96,"nest-cli.json"),e.qZA(),e._uU(97," file will have a new entry for the library under the "),e.TgZ(98,"code"),e._uU(99,'"projects"'),e.qZA(),e._uU(100," key:"),e.qZA(),e.TgZ(101,"pre")(102,"code",14),e._uU(103,'\n...\n{\n    "my-library": {\n      "type": "library",\n      "root": "libs/my-library",\n      "entryFile": "index",\n      "sourceRoot": "libs/my-library/src",\n      "compilerOptions": {\n        "tsConfigPath": "libs/my-library/tsconfig.lib.json"\n      }\n}\n...\n'),e.qZA()(),e.TgZ(104,"p"),e._uU(105,"There are two differences in "),e.TgZ(106,"code"),e._uU(107,"nest-cli.json"),e.qZA(),e._uU(108," metadata between libraries and applications:"),e.qZA(),e.TgZ(109,"ul")(110,"li"),e._uU(111,"the "),e.TgZ(112,"code"),e._uU(113,'"type"'),e.qZA(),e._uU(114," property is set to "),e.TgZ(115,"code"),e._uU(116,'"library"'),e.qZA(),e._uU(117," instead of "),e.TgZ(118,"code"),e._uU(119,'"application"'),e.qZA()(),e.TgZ(120,"li"),e._uU(121,"the "),e.TgZ(122,"code"),e._uU(123,'"entryFile"'),e.qZA(),e._uU(124," property is set to "),e.TgZ(125,"code"),e._uU(126,'"index"'),e.qZA(),e._uU(127," instead of "),e.TgZ(128,"code"),e._uU(129,'"main"'),e.qZA()()(),e.TgZ(130,"p"),e._uU(131,"These differences key the build process to handle libraries appropriately. For example, a library exports its functions through the "),e.TgZ(132,"code"),e._uU(133,"index.js"),e.qZA(),e._uU(134," file."),e.qZA(),e.TgZ(135,"p"),e._uU(136,"As with application-type projects, libraries each have their own "),e.TgZ(137,"code"),e._uU(138,"tsconfig.lib.json"),e.qZA(),e._uU(139," file that extends the root (monorepo-wide) "),e.TgZ(140,"code"),e._uU(141,"tsconfig.json"),e.qZA(),e._uU(142," file. You can modify this file, if necessary, to provide library-specific compiler options."),e.qZA(),e.TgZ(143,"p"),e._uU(144,"You can build the library with the CLI command:"),e.qZA(),e.TgZ(145,"pre")(146,"code",10),e._uU(147,"\n$ nest build my-library\n"),e.qZA()(),e.TgZ(148,"h4",15)(149,"span"),e._uU(150,"Using libraries"),e.qZA()(),e.TgZ(151,"p"),e._uU(152,"With the automatically generated configuration files in place, using libraries is straightforward. How would we import "),e.TgZ(153,"code"),e._uU(154,"MyLibraryService"),e.qZA(),e._uU(155," from the "),e.TgZ(156,"code"),e._uU(157,"my-library"),e.qZA(),e._uU(158," library into the "),e.TgZ(159,"code"),e._uU(160,"my-project"),e.qZA(),e._uU(161," application?"),e.qZA(),e.TgZ(162,"p"),e._uU(163,"First, note that using library modules is the same as using any other Nest module. What the monorepo does is manage paths in a way that importing libraries and generating builds is now transparent. To use "),e.TgZ(164,"code"),e._uU(165,"MyLibraryService"),e.qZA(),e._uU(166,", we need to import its declaring module. We can modify "),e.TgZ(167,"code"),e._uU(168,"my-project/src/app.module.ts"),e.qZA(),e._uU(169," as follows to import "),e.TgZ(170,"code"),e._uU(171,"MyLibraryModule"),e.qZA(),e._uU(172,"."),e.qZA(),e.TgZ(173,"pre")(174,"code",16),e._uU(175,"\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MyLibraryModule } from '@app/my-library';\n\n@Module({\n  imports: [MyLibraryModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(176,"p"),e._uU(177,"Notice above that we've used a path alias of "),e.TgZ(178,"code"),e._uU(179,"@app"),e.qZA(),e._uU(180," in the ES module "),e.TgZ(181,"code"),e._uU(182,"import"),e.qZA(),e._uU(183," line, which was the "),e.TgZ(184,"code"),e._uU(185,"prefix"),e.qZA(),e._uU(186," we supplied with the "),e.TgZ(187,"code"),e._uU(188,"nest g library"),e.qZA(),e._uU(189," command above. Under the covers, Nest handles this through tsconfig path mapping. When adding a library, Nest updates the global (monorepo) "),e.TgZ(190,"code"),e._uU(191,"tsconfig.json"),e.qZA(),e._uU(192," file's "),e.TgZ(193,"code"),e._uU(194,'"paths"'),e.qZA(),e._uU(195," key like this:"),e.qZA(),e.TgZ(196,"pre")(197,"code",14),e._uU(198,'\n"paths": {\n    "@app/my-library": [\n        "libs/my-library/src"\n    ],\n    "@app/my-library/*": [\n        "libs/my-library/src/*"\n    ]\n}\n'),e.qZA()(),e.TgZ(199,"p"),e._uU(200,"So, in a nutshell, the combination of the monorepo and library features has made it easy and intuitive to include library modules into applications."),e.qZA(),e.TgZ(201,"p"),e._uU(202,"This same mechanism enables building and deploying applications that compose libraries. Once you've imported the "),e.TgZ(203,"code"),e._uU(204,"MyLibraryModule"),e.qZA(),e._uU(205,", running "),e.TgZ(206,"code"),e._uU(207,"nest build"),e.qZA(),e._uU(208," handles all the module resolution automatically and bundles the app along with any library dependencies, for deployment. The default compiler for a monorepo is "),e.TgZ(209,"strong"),e._uU(210,"webpack"),e.qZA(),e._uU(211,", so the resulting distribution file is a single file that bundles all of the transpiled JavaScript files into a single file. You can also switch to "),e.TgZ(212,"code"),e._uU(213,"tsc"),e.qZA(),e._uU(214," as described "),e.TgZ(215,"a",17),e._uU(216,"here"),e.qZA(),e._uU(217,"."),e.qZA()())},dependencies:[g.U,Z.rH],encapsulation:2,changeDetection:0}));var m=i(8857);class r extends p.y{}(0,a.Z)(r,"\u0275fac",function(){let t;return function(n){return(t||(t=e.n5z(r)))(n||r)}}()),(0,a.Z)(r,"\u0275cmp",e.Xpm({type:r,selectors:[["app-overview"]],features:[e.qOj],decls:374,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/cli/overview.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","overview"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest-cli"],["appAnchor","","id","installation"],["rel","nofollow","target","_blank","href","https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"],["rel","nofollow","target","_blank","href","https://github.com/npm/cli/blob/latest/docs/lib/content/commands/npx.md"],[1,"language-bash"],[1,"info"],["appAnchor","","id","basic-workflow"],["rel","nofollow","target","_blank","href","http://localhost:3000"],["appAnchor","","id","project-structure"],["routerLink","/cli/libraries"],["routerLink","/cli/monorepo"],["appAnchor","","id","cli-command-syntax"],["appAnchor","","id","command-overview"],["routerLink","/cli/usages"],["appAnchor","","id","requirements"],["rel","nofollow","target","_blank","href","https://nodejs.org/api/intl.html"],["rel","nofollow","target","_blank","href","https://nodejs.org/en/download"]],template:function(o,n){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Overview"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"The "),e.TgZ(9,"a",6),e._uU(10,"Nest CLI"),e.qZA(),e._uU(11," is a command-line interface tool that helps you to initialize, develop, and maintain your Nest applications. It assists in multiple ways, including scaffolding the project, serving it in development mode, and building and bundling the application for production distribution. It embodies best-practice architectural patterns to encourage well-structured apps."),e.qZA(),e.TgZ(12,"h4",7)(13,"span"),e._uU(14,"Installation"),e.qZA()(),e.TgZ(15,"p")(16,"strong"),e._uU(17,"Note"),e.qZA(),e._uU(18,": In this guide we describe using "),e.TgZ(19,"a",8),e._uU(20,"npm"),e.qZA(),e._uU(21," to install packages, including the Nest CLI. Other package managers may be used at your discretion. With npm, you have several options available for managing how your OS command line resolves the location of the "),e.TgZ(22,"code"),e._uU(23,"nest"),e.qZA(),e._uU(24," CLI binary file. Here, we describe installing the "),e.TgZ(25,"code"),e._uU(26,"nest"),e.qZA(),e._uU(27," binary globally using the "),e.TgZ(28,"code"),e._uU(29,"-g"),e.qZA(),e._uU(30," option. This provides a measure of convenience, and is the approach we assume throughout the documentation. Note that installing "),e.TgZ(31,"strong"),e._uU(32,"any"),e.qZA(),e.TgZ(33,"code"),e._uU(34,"npm"),e.qZA(),e._uU(35," package globally leaves the responsibility of ensuring they're running the correct version up to the user. It also means that if you have different projects, each will run the "),e.TgZ(36,"strong"),e._uU(37,"same"),e.qZA(),e._uU(38," version of the CLI. A reasonable alternative is to use the "),e.TgZ(39,"a",9),e._uU(40,"npx"),e.qZA(),e._uU(41," program, built into the "),e.TgZ(42,"code"),e._uU(43,"npm"),e.qZA(),e._uU(44," cli (or similar features with other package managers) to ensure that you run a "),e.TgZ(45,"strong"),e._uU(46,"managed version"),e.qZA(),e._uU(47," of the Nest CLI. We recommend you consult the "),e.TgZ(48,"a",9),e._uU(49,"npx documentation"),e.qZA(),e._uU(50," and/or your DevOps support staff for more information."),e.qZA(),e.TgZ(51,"p"),e._uU(52,"Install the CLI globally using the "),e.TgZ(53,"code"),e._uU(54,"npm install -g"),e.qZA(),e._uU(55," command (see the "),e.TgZ(56,"strong"),e._uU(57,"Note"),e.qZA(),e._uU(58," above for details about global installs)."),e.qZA(),e.TgZ(59,"pre")(60,"code",10),e._uU(61,"\n$ npm install -g @nestjs/cli\n"),e.qZA()(),e.TgZ(62,"blockquote",11)(63,"strong"),e._uU(64,"Hint"),e.qZA(),e._uU(65," Alternatively, you can use this command "),e.TgZ(66,"code"),e._uU(67,"npx @nestjs/cli@latest"),e.qZA(),e._uU(68," without installing the cli globally.\n"),e.qZA(),e.TgZ(69,"h4",12)(70,"span"),e._uU(71,"Basic workflow"),e.qZA()(),e.TgZ(72,"p"),e._uU(73,"Once installed, you can invoke CLI commands directly from your OS command line through the "),e.TgZ(74,"code"),e._uU(75,"nest"),e.qZA(),e._uU(76," executable. See the available "),e.TgZ(77,"code"),e._uU(78,"nest"),e.qZA(),e._uU(79," commands by entering the following:"),e.qZA(),e.TgZ(80,"pre")(81,"code",10),e._uU(82,"\n$ nest --help\n"),e.qZA()(),e.TgZ(83,"p"),e._uU(84,"Get help on an individual command using the following construct. Substitute any command, like "),e.TgZ(85,"code"),e._uU(86,"new"),e.qZA(),e._uU(87,", "),e.TgZ(88,"code"),e._uU(89,"add"),e.qZA(),e._uU(90,", etc., where you see "),e.TgZ(91,"code"),e._uU(92,"generate"),e.qZA(),e._uU(93," in the example below to get detailed help on that command:"),e.qZA(),e.TgZ(94,"pre")(95,"code",10),e._uU(96,"\n$ nest generate --help\n"),e.qZA()(),e.TgZ(97,"p"),e._uU(98,"To create, build and run a new basic Nest project in development mode, go to the folder that should be the parent of your new project, and run the following commands:"),e.qZA(),e.TgZ(99,"pre")(100,"code",10),e._uU(101,"\n$ nest new my-nest-project\n$ cd my-nest-project\n$ npm run start:dev\n"),e.qZA()(),e.TgZ(102,"p"),e._uU(103,"In your browser, open "),e.TgZ(104,"a",13),e._uU(105,"http://localhost:3000"),e.qZA(),e._uU(106," to see the new application running. The app will automatically recompile and reload when you change any of the source files."),e.qZA(),e.TgZ(107,"h4",14)(108,"span"),e._uU(109,"Project structure"),e.qZA()(),e.TgZ(110,"p"),e._uU(111,"When you run "),e.TgZ(112,"code"),e._uU(113,"nest new"),e.qZA(),e._uU(114,", Nest generates a boilerplate application structure by creating a new folder and populating an initial set of files. You can continue working in this default structure, adding new components, as described throughout this documentation. We refer to the project structure generated by "),e.TgZ(115,"code"),e._uU(116,"nest new"),e.qZA(),e._uU(117," as "),e.TgZ(118,"strong"),e._uU(119,"standard mode"),e.qZA(),e._uU(120,". Nest also supports an alternate structure for managing multiple projects and libraries called "),e.TgZ(121,"strong"),e._uU(122,"monorepo mode"),e.qZA(),e._uU(123,"."),e.qZA(),e.TgZ(124,"p"),e._uU(125,"Aside from a few specific considerations around how the "),e.TgZ(126,"strong"),e._uU(127,"build"),e.qZA(),e._uU(128," process works (essentially, monorepo mode simplifies build complexities that can sometimes arise from monorepo-style project structures), and built-in "),e.TgZ(129,"a",15),e._uU(130,"library"),e.qZA(),e._uU(131," support, the rest of the Nest features, and this documentation, apply equally to both standard and monorepo mode project structures. In fact, you can easily switch from standard mode to monorepo mode at any time in the future, so you can safely defer this decision while you're still learning about Nest."),e.qZA(),e.TgZ(132,"p"),e._uU(133,"You can use either mode to manage multiple projects. Here's a quick summary of the differences:"),e.qZA(),e.TgZ(134,"table")(135,"thead")(136,"tr")(137,"th"),e._uU(138,"Feature"),e.qZA(),e.TgZ(139,"th"),e._uU(140,"Standard Mode"),e.qZA(),e.TgZ(141,"th"),e._uU(142,"Monorepo Mode"),e.qZA()()(),e.TgZ(143,"tbody")(144,"tr")(145,"td"),e._uU(146,"Multiple projects"),e.qZA(),e.TgZ(147,"td"),e._uU(148,"Separate file system structure"),e.qZA(),e.TgZ(149,"td"),e._uU(150,"Single file system structure"),e.qZA()(),e.TgZ(151,"tr")(152,"td")(153,"code"),e._uU(154,"node_modules"),e.qZA(),e._uU(155," & "),e.TgZ(156,"code"),e._uU(157,"package.json"),e.qZA()(),e.TgZ(158,"td"),e._uU(159,"Separate instances"),e.qZA(),e.TgZ(160,"td"),e._uU(161,"Shared across monorepo"),e.qZA()(),e.TgZ(162,"tr")(163,"td"),e._uU(164,"Default compiler"),e.qZA(),e.TgZ(165,"td")(166,"code"),e._uU(167,"tsc"),e.qZA()(),e.TgZ(168,"td"),e._uU(169,"webpack"),e.qZA()(),e.TgZ(170,"tr")(171,"td"),e._uU(172,"Compiler settings"),e.qZA(),e.TgZ(173,"td"),e._uU(174,"Specified separately"),e.qZA(),e.TgZ(175,"td"),e._uU(176,"Monorepo defaults that can be overridden per project"),e.qZA()(),e.TgZ(177,"tr")(178,"td"),e._uU(179,"Config files like "),e.TgZ(180,"code"),e._uU(181,".eslintrc.js"),e.qZA(),e._uU(182,", "),e.TgZ(183,"code"),e._uU(184,".prettierrc"),e.qZA(),e._uU(185,", etc."),e.qZA(),e.TgZ(186,"td"),e._uU(187,"Specified separately"),e.qZA(),e.TgZ(188,"td"),e._uU(189,"Shared across monorepo"),e.qZA()(),e.TgZ(190,"tr")(191,"td")(192,"code"),e._uU(193,"nest build"),e.qZA(),e._uU(194," and "),e.TgZ(195,"code"),e._uU(196,"nest start"),e.qZA(),e._uU(197," commands"),e.qZA(),e.TgZ(198,"td"),e._uU(199,"Target defaults automatically to the (only) project in the context"),e.qZA(),e.TgZ(200,"td"),e._uU(201,"Target defaults to the "),e.TgZ(202,"strong"),e._uU(203,"default project"),e.qZA(),e._uU(204," in the monorepo"),e.qZA()(),e.TgZ(205,"tr")(206,"td"),e._uU(207,"Libraries"),e.qZA(),e.TgZ(208,"td"),e._uU(209,"Managed manually, usually via npm packaging"),e.qZA(),e.TgZ(210,"td"),e._uU(211,"Built-in support, including path management and bundling"),e.qZA()()()(),e.TgZ(212,"p"),e._uU(213,"Read the sections on "),e.TgZ(214,"a",16),e._uU(215,"Workspaces"),e.qZA(),e._uU(216," and "),e.TgZ(217,"a",15),e._uU(218,"Libraries"),e.qZA(),e._uU(219," for more detailed information to help you decide which mode is most suitable for you."),e.qZA(),e.TgZ(220,"p"),e._UZ(221,"app-banner-courses"),e.qZA(),e.TgZ(222,"h4",17)(223,"span"),e._uU(224,"CLI command syntax"),e.qZA()(),e.TgZ(225,"p"),e._uU(226,"All "),e.TgZ(227,"code"),e._uU(228,"nest"),e.qZA(),e._uU(229," commands follow the same format:"),e.qZA(),e.TgZ(230,"pre")(231,"code",10),e._uU(232,"\nnest commandOrAlias requiredArg [optionalArg] [options]\n"),e.qZA()(),e.TgZ(233,"p"),e._uU(234,"For example:"),e.qZA(),e.TgZ(235,"pre")(236,"code",10),e._uU(237,"\n$ nest new my-nest-project --dry-run\n"),e.qZA()(),e.TgZ(238,"p"),e._uU(239,"Here, "),e.TgZ(240,"code"),e._uU(241,"new"),e.qZA(),e._uU(242," is the "),e.TgZ(243,"em"),e._uU(244,"commandOrAlias"),e.qZA(),e._uU(245,". The "),e.TgZ(246,"code"),e._uU(247,"new"),e.qZA(),e._uU(248," command has an alias of "),e.TgZ(249,"code"),e._uU(250,"n"),e.qZA(),e._uU(251,". "),e.TgZ(252,"code"),e._uU(253,"my-nest-project"),e.qZA(),e._uU(254," is the "),e.TgZ(255,"em"),e._uU(256,"requiredArg"),e.qZA(),e._uU(257,". If a "),e.TgZ(258,"em"),e._uU(259,"requiredArg"),e.qZA(),e._uU(260," is not supplied on the command line, "),e.TgZ(261,"code"),e._uU(262,"nest"),e.qZA(),e._uU(263," will prompt for it. Also, "),e.TgZ(264,"code"),e._uU(265,"--dry-run"),e.qZA(),e._uU(266," has an equivalent short-hand form "),e.TgZ(267,"code"),e._uU(268,"-d"),e.qZA(),e._uU(269,". With this in mind, the following command is the equivalent of the above:"),e.qZA(),e.TgZ(270,"pre")(271,"code",10),e._uU(272,"\n$ nest n my-nest-project -d\n"),e.qZA()(),e.TgZ(273,"p"),e._uU(274,"Most commands, and some options, have aliases. Try running "),e.TgZ(275,"code"),e._uU(276,"nest new --help"),e.qZA(),e._uU(277," to see these options and aliases, and to confirm your understanding of the above constructs."),e.qZA(),e.TgZ(278,"h4",18)(279,"span"),e._uU(280,"Command overview"),e.qZA()(),e.TgZ(281,"p"),e._uU(282,"Run "),e.TgZ(283,"code"),e._uU(284,"nest <command> --help"),e.qZA(),e._uU(285," for any of the following commands to see command-specific options."),e.qZA(),e.TgZ(286,"p"),e._uU(287,"See "),e.TgZ(288,"a",19),e._uU(289,"usage"),e.qZA(),e._uU(290," for detailed descriptions for each command."),e.qZA(),e.TgZ(291,"table")(292,"thead")(293,"tr")(294,"th"),e._uU(295,"Command"),e.qZA(),e.TgZ(296,"th"),e._uU(297,"Alias"),e.qZA(),e.TgZ(298,"th"),e._uU(299,"Description"),e.qZA()()(),e.TgZ(300,"tbody")(301,"tr")(302,"td")(303,"code"),e._uU(304,"new"),e.qZA()(),e.TgZ(305,"td")(306,"code"),e._uU(307,"n"),e.qZA()(),e.TgZ(308,"td"),e._uU(309,"Scaffolds a new "),e.TgZ(310,"em"),e._uU(311,"standard mode"),e.qZA(),e._uU(312," application with all boilerplate files needed to run."),e.qZA()(),e.TgZ(313,"tr")(314,"td")(315,"code"),e._uU(316,"generate"),e.qZA()(),e.TgZ(317,"td")(318,"code"),e._uU(319,"g"),e.qZA()(),e.TgZ(320,"td"),e._uU(321,"Generates and/or modifies files based on a schematic."),e.qZA()(),e.TgZ(322,"tr")(323,"td")(324,"code"),e._uU(325,"build"),e.qZA()(),e._UZ(326,"td"),e.TgZ(327,"td"),e._uU(328,"Compiles an application or workspace into an output folder."),e.qZA()(),e.TgZ(329,"tr")(330,"td")(331,"code"),e._uU(332,"start"),e.qZA()(),e._UZ(333,"td"),e.TgZ(334,"td"),e._uU(335,"Compiles and runs an application (or default project in a workspace)."),e.qZA()(),e.TgZ(336,"tr")(337,"td")(338,"code"),e._uU(339,"add"),e.qZA()(),e._UZ(340,"td"),e.TgZ(341,"td"),e._uU(342,"Imports a library that has been packaged as a "),e.TgZ(343,"strong"),e._uU(344,"nest library"),e.qZA(),e._uU(345,", running its install schematic."),e.qZA()(),e.TgZ(346,"tr")(347,"td")(348,"code"),e._uU(349,"info"),e.qZA()(),e.TgZ(350,"td")(351,"code"),e._uU(352,"i"),e.qZA()(),e.TgZ(353,"td"),e._uU(354,"Displays information about installed nest packages and other helpful system info."),e.qZA()()()(),e.TgZ(355,"h4",20)(356,"span"),e._uU(357,"Requirements"),e.qZA()(),e.TgZ(358,"p"),e._uU(359,"Nest CLI requires a Node.js binary built with "),e.TgZ(360,"a",21),e._uU(361,"internationalization support"),e.qZA(),e._uU(362," (ICU), such as the official binaries from the "),e.TgZ(363,"a",22),e._uU(364,"Node.js project page"),e.qZA(),e._uU(365,". If you encounter errors related to ICU, check that your binary meets this requirement."),e.qZA(),e.TgZ(366,"pre")(367,"code",10),e._uU(368,"\nnode -p process.versions.icu\n"),e.qZA()(),e.TgZ(369,"p"),e._uU(370,"If the command prints "),e.TgZ(371,"code"),e._uU(372,"undefined"),e.qZA(),e._uU(373,", your Node.js binary has no internationalization support."),e.qZA()())},dependencies:[g.U,m.f,Z.rH],encapsulation:2,changeDetection:0}));class u extends p.y{}(0,a.Z)(u,"\u0275fac",function(){let t;return function(n){return(t||(t=e.n5z(u)))(n||u)}}()),(0,a.Z)(u,"\u0275cmp",e.Xpm({type:u,selectors:[["app-usages"]],features:[e.qOj],decls:704,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/cli/usages.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cli-command-reference"],["appAnchor","","id","nest-new"],[1,"language-bash"],["id","description"],["id","arguments"],["id","options"],["appAnchor","","id","nest-generate"],["id","arguments-1"],["id","schematics"],["routerLink","/recipes/crud-generator"],["id","options-1"],["appAnchor","","id","nest-build"],["id","arguments-2"],["id","options-2"],["appAnchor","","id","nest-start"],["id","arguments-3"],["id","options-3"],["href","cli/monorepo#assets"],["appAnchor","","id","nest-add"],["id","arguments-4"],["appAnchor","","id","nest-info"]],template:function(o,n){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"CLI command reference"),e.qZA(),e.TgZ(7,"h4",6)(8,"span"),e._uU(9,"nest new"),e.qZA()(),e.TgZ(10,"p"),e._uU(11,"Creates a new (standard mode) Nest project."),e.qZA(),e.TgZ(12,"pre")(13,"code",7),e._uU(14,"\n$ nest new <name> [options]\n$ nest n <name> [options]\n"),e.qZA()(),e.TgZ(15,"h5",8),e._uU(16,"Description"),e.qZA(),e.TgZ(17,"p"),e._uU(18,"Creates and initializes a new Nest project. Prompts for package manager."),e.qZA(),e.TgZ(19,"ul")(20,"li"),e._uU(21,"Creates a folder with the given "),e.TgZ(22,"code"),e._uU(23,"<name>"),e.qZA()(),e.TgZ(24,"li"),e._uU(25,"Populates the folder with configuration files"),e.qZA(),e.TgZ(26,"li"),e._uU(27,"Creates sub-folders for source code ("),e.TgZ(28,"code"),e._uU(29,"/src"),e.qZA(),e._uU(30,") and end-to-end tests ("),e.TgZ(31,"code"),e._uU(32,"/test"),e.qZA(),e._uU(33,")"),e.qZA(),e.TgZ(34,"li"),e._uU(35,"Populates the sub-folders with default files for app components and tests"),e.qZA()(),e.TgZ(36,"h5",9),e._uU(37,"Arguments"),e.qZA(),e.TgZ(38,"table")(39,"thead")(40,"tr")(41,"th"),e._uU(42,"Argument"),e.qZA(),e.TgZ(43,"th"),e._uU(44,"Description"),e.qZA()()(),e.TgZ(45,"tbody")(46,"tr")(47,"td")(48,"code"),e._uU(49,"<name>"),e.qZA()(),e.TgZ(50,"td"),e._uU(51,"The name of the new project"),e.qZA()()()(),e.TgZ(52,"h5",10),e._uU(53,"Options"),e.qZA(),e.TgZ(54,"table")(55,"thead")(56,"tr")(57,"th"),e._uU(58,"Option"),e.qZA(),e.TgZ(59,"th"),e._uU(60,"Description"),e.qZA()()(),e.TgZ(61,"tbody")(62,"tr")(63,"td")(64,"code"),e._uU(65,"--dry-run"),e.qZA()(),e.TgZ(66,"td"),e._uU(67,"Reports changes that would be made, but does not change the filesystem."),e._UZ(68,"br"),e._uU(69," Alias: "),e.TgZ(70,"code"),e._uU(71,"-d"),e.qZA()()(),e.TgZ(72,"tr")(73,"td")(74,"code"),e._uU(75,"--skip-git"),e.qZA()(),e.TgZ(76,"td"),e._uU(77,"Skip git repository initialization."),e._UZ(78,"br"),e._uU(79," Alias: "),e.TgZ(80,"code"),e._uU(81,"-g"),e.qZA()()(),e.TgZ(82,"tr")(83,"td")(84,"code"),e._uU(85,"--skip-install"),e.qZA()(),e.TgZ(86,"td"),e._uU(87,"Skip package installation."),e._UZ(88,"br"),e._uU(89," Alias: "),e.TgZ(90,"code"),e._uU(91,"-s"),e.qZA()()(),e.TgZ(92,"tr")(93,"td")(94,"code"),e._uU(95,"--package-manager [package-manager]"),e.qZA()(),e.TgZ(96,"td"),e._uU(97,"Specify package manager. Use "),e.TgZ(98,"code"),e._uU(99,"npm"),e.qZA(),e._uU(100,", "),e.TgZ(101,"code"),e._uU(102,"yarn"),e.qZA(),e._uU(103,", or "),e.TgZ(104,"code"),e._uU(105,"pnpm"),e.qZA(),e._uU(106,". Package manager must be installed globally."),e._UZ(107,"br"),e._uU(108," Alias: "),e.TgZ(109,"code"),e._uU(110,"-p"),e.qZA()()(),e.TgZ(111,"tr")(112,"td")(113,"code"),e._uU(114,"--language [language]"),e.qZA()(),e.TgZ(115,"td"),e._uU(116,"Specify programming language ("),e.TgZ(117,"code"),e._uU(118,"TS"),e.qZA(),e._uU(119," or "),e.TgZ(120,"code"),e._uU(121,"JS"),e.qZA(),e._uU(122,")."),e._UZ(123,"br"),e._uU(124," Alias: "),e.TgZ(125,"code"),e._uU(126,"-l"),e.qZA()()(),e.TgZ(127,"tr")(128,"td")(129,"code"),e._uU(130,"--collection [collectionName]"),e.qZA()(),e.TgZ(131,"td"),e._uU(132,"Specify schematics collection. Use package name of installed npm package containing schematic."),e._UZ(133,"br"),e._uU(134," Alias: "),e.TgZ(135,"code"),e._uU(136,"-c"),e.qZA()()(),e.TgZ(137,"tr")(138,"td")(139,"code"),e._uU(140,"--strict"),e.qZA()(),e.TgZ(141,"td"),e._uU(142,"Start the project with the following TypeScript compiler flags enabled: "),e.TgZ(143,"code"),e._uU(144,"strictNullChecks"),e.qZA(),e._uU(145,", "),e.TgZ(146,"code"),e._uU(147,"noImplicitAny"),e.qZA(),e._uU(148,", "),e.TgZ(149,"code"),e._uU(150,"strictBindCallApply"),e.qZA(),e._uU(151,", "),e.TgZ(152,"code"),e._uU(153,"forceConsistentCasingInFileNames"),e.qZA(),e._uU(154,", "),e.TgZ(155,"code"),e._uU(156,"noFallthroughCasesInSwitch"),e.qZA()()()()(),e.TgZ(157,"h4",11)(158,"span"),e._uU(159,"nest generate"),e.qZA()(),e.TgZ(160,"p"),e._uU(161,"Generates and/or modifies files based on a schematic"),e.qZA(),e.TgZ(162,"pre")(163,"code",7),e._uU(164,"\n$ nest generate <schematic> <name> [options]\n$ nest g <schematic> <name> [options]\n"),e.qZA()(),e.TgZ(165,"h5",12),e._uU(166,"Arguments"),e.qZA(),e.TgZ(167,"table")(168,"thead")(169,"tr")(170,"th"),e._uU(171,"Argument"),e.qZA(),e.TgZ(172,"th"),e._uU(173,"Description"),e.qZA()()(),e.TgZ(174,"tbody")(175,"tr")(176,"td")(177,"code"),e._uU(178,"<schematic>"),e.qZA()(),e.TgZ(179,"td"),e._uU(180,"The "),e.TgZ(181,"code"),e._uU(182,"schematic"),e.qZA(),e._uU(183," or "),e.TgZ(184,"code"),e._uU(185,"collection:schematic"),e.qZA(),e._uU(186," to generate. See the table below for the available schematics."),e.qZA()(),e.TgZ(187,"tr")(188,"td")(189,"code"),e._uU(190,"<name>"),e.qZA()(),e.TgZ(191,"td"),e._uU(192,"The name of the generated component."),e.qZA()()()(),e.TgZ(193,"h5",13),e._uU(194,"Schematics"),e.qZA(),e.TgZ(195,"table")(196,"thead")(197,"tr")(198,"th"),e._uU(199,"Name"),e.qZA(),e.TgZ(200,"th"),e._uU(201,"Alias"),e.qZA(),e.TgZ(202,"th"),e._uU(203,"Description"),e.qZA()()(),e.TgZ(204,"tbody")(205,"tr")(206,"td")(207,"code"),e._uU(208,"app"),e.qZA()(),e._UZ(209,"td"),e.TgZ(210,"td"),e._uU(211,"Generate a new application within a monorepo (converting to monorepo if it's a standard structure)."),e.qZA()(),e.TgZ(212,"tr")(213,"td")(214,"code"),e._uU(215,"library"),e.qZA()(),e.TgZ(216,"td")(217,"code"),e._uU(218,"lib"),e.qZA()(),e.TgZ(219,"td"),e._uU(220,"Generate a new library within a monorepo (converting to monorepo if it's a standard structure)."),e.qZA()(),e.TgZ(221,"tr")(222,"td")(223,"code"),e._uU(224,"class"),e.qZA()(),e.TgZ(225,"td")(226,"code"),e._uU(227,"cl"),e.qZA()(),e.TgZ(228,"td"),e._uU(229,"Generate a new class."),e.qZA()(),e.TgZ(230,"tr")(231,"td")(232,"code"),e._uU(233,"controller"),e.qZA()(),e.TgZ(234,"td")(235,"code"),e._uU(236,"co"),e.qZA()(),e.TgZ(237,"td"),e._uU(238,"Generate a controller declaration."),e.qZA()(),e.TgZ(239,"tr")(240,"td")(241,"code"),e._uU(242,"decorator"),e.qZA()(),e.TgZ(243,"td")(244,"code"),e._uU(245,"d"),e.qZA()(),e.TgZ(246,"td"),e._uU(247,"Generate a custom decorator."),e.qZA()(),e.TgZ(248,"tr")(249,"td")(250,"code"),e._uU(251,"filter"),e.qZA()(),e.TgZ(252,"td")(253,"code"),e._uU(254,"f"),e.qZA()(),e.TgZ(255,"td"),e._uU(256,"Generate a filter declaration."),e.qZA()(),e.TgZ(257,"tr")(258,"td")(259,"code"),e._uU(260,"gateway"),e.qZA()(),e.TgZ(261,"td")(262,"code"),e._uU(263,"ga"),e.qZA()(),e.TgZ(264,"td"),e._uU(265,"Generate a gateway declaration."),e.qZA()(),e.TgZ(266,"tr")(267,"td")(268,"code"),e._uU(269,"guard"),e.qZA()(),e.TgZ(270,"td")(271,"code"),e._uU(272,"gu"),e.qZA()(),e.TgZ(273,"td"),e._uU(274,"Generate a guard declaration."),e.qZA()(),e.TgZ(275,"tr")(276,"td")(277,"code"),e._uU(278,"interface"),e.qZA()(),e.TgZ(279,"td")(280,"code"),e._uU(281,"itf"),e.qZA()(),e.TgZ(282,"td"),e._uU(283,"Generate an interface."),e.qZA()(),e.TgZ(284,"tr")(285,"td")(286,"code"),e._uU(287,"interceptor"),e.qZA()(),e.TgZ(288,"td")(289,"code"),e._uU(290,"itc"),e.qZA()(),e.TgZ(291,"td"),e._uU(292,"Generate an interceptor declaration."),e.qZA()(),e.TgZ(293,"tr")(294,"td")(295,"code"),e._uU(296,"middleware"),e.qZA()(),e.TgZ(297,"td")(298,"code"),e._uU(299,"mi"),e.qZA()(),e.TgZ(300,"td"),e._uU(301,"Generate a middleware declaration."),e.qZA()(),e.TgZ(302,"tr")(303,"td")(304,"code"),e._uU(305,"module"),e.qZA()(),e.TgZ(306,"td")(307,"code"),e._uU(308,"mo"),e.qZA()(),e.TgZ(309,"td"),e._uU(310,"Generate a module declaration."),e.qZA()(),e.TgZ(311,"tr")(312,"td")(313,"code"),e._uU(314,"pipe"),e.qZA()(),e.TgZ(315,"td")(316,"code"),e._uU(317,"pi"),e.qZA()(),e.TgZ(318,"td"),e._uU(319,"Generate a pipe declaration."),e.qZA()(),e.TgZ(320,"tr")(321,"td")(322,"code"),e._uU(323,"provider"),e.qZA()(),e.TgZ(324,"td")(325,"code"),e._uU(326,"pr"),e.qZA()(),e.TgZ(327,"td"),e._uU(328,"Generate a provider declaration."),e.qZA()(),e.TgZ(329,"tr")(330,"td")(331,"code"),e._uU(332,"resolver"),e.qZA()(),e.TgZ(333,"td")(334,"code"),e._uU(335,"r"),e.qZA()(),e.TgZ(336,"td"),e._uU(337,"Generate a resolver declaration."),e.qZA()(),e.TgZ(338,"tr")(339,"td")(340,"code"),e._uU(341,"resource"),e.qZA()(),e.TgZ(342,"td")(343,"code"),e._uU(344,"res"),e.qZA()(),e.TgZ(345,"td"),e._uU(346,"Generate a new CRUD resource. See the "),e.TgZ(347,"a",14),e._uU(348,"CRUD (resource) generator"),e.qZA(),e._uU(349," for more details."),e.qZA()(),e.TgZ(350,"tr")(351,"td")(352,"code"),e._uU(353,"service"),e.qZA()(),e.TgZ(354,"td")(355,"code"),e._uU(356,"s"),e.qZA()(),e.TgZ(357,"td"),e._uU(358,"Generate a service declaration."),e.qZA()()()(),e.TgZ(359,"h5",15),e._uU(360,"Options"),e.qZA(),e.TgZ(361,"table")(362,"thead")(363,"tr")(364,"th"),e._uU(365,"Option"),e.qZA(),e.TgZ(366,"th"),e._uU(367,"Description"),e.qZA()()(),e.TgZ(368,"tbody")(369,"tr")(370,"td")(371,"code"),e._uU(372,"--dry-run"),e.qZA()(),e.TgZ(373,"td"),e._uU(374,"Reports changes that would be made, but does not change the filesystem."),e._UZ(375,"br"),e._uU(376," Alias: "),e.TgZ(377,"code"),e._uU(378,"-d"),e.qZA()()(),e.TgZ(379,"tr")(380,"td")(381,"code"),e._uU(382,"--project [project]"),e.qZA()(),e.TgZ(383,"td"),e._uU(384,"Project that element should be added to."),e._UZ(385,"br"),e._uU(386," Alias: "),e.TgZ(387,"code"),e._uU(388,"-p"),e.qZA()()(),e.TgZ(389,"tr")(390,"td")(391,"code"),e._uU(392,"--flat"),e.qZA()(),e.TgZ(393,"td"),e._uU(394,"Do not generate a folder for the element."),e.qZA()(),e.TgZ(395,"tr")(396,"td")(397,"code"),e._uU(398,"--collection [collectionName]"),e.qZA()(),e.TgZ(399,"td"),e._uU(400,"Specify schematics collection. Use package name of installed npm package containing schematic."),e._UZ(401,"br"),e._uU(402," Alias: "),e.TgZ(403,"code"),e._uU(404,"-c"),e.qZA()()(),e.TgZ(405,"tr")(406,"td")(407,"code"),e._uU(408,"--spec"),e.qZA()(),e.TgZ(409,"td"),e._uU(410,"Enforce spec files generation (default)"),e.qZA()(),e.TgZ(411,"tr")(412,"td")(413,"code"),e._uU(414,"--no-spec"),e.qZA()(),e.TgZ(415,"td"),e._uU(416,"Disable spec files generation"),e.qZA()()()(),e.TgZ(417,"h4",16)(418,"span"),e._uU(419,"nest build"),e.qZA()(),e.TgZ(420,"p"),e._uU(421,"Compiles an application or workspace into an output folder."),e.qZA(),e.TgZ(422,"p"),e._uU(423,"Also, the "),e.TgZ(424,"code"),e._uU(425,"build"),e.qZA(),e._uU(426," command is responsible for:"),e.qZA(),e.TgZ(427,"ul")(428,"li"),e._uU(429,"mapping paths (if using path aliases) via "),e.TgZ(430,"code"),e._uU(431,"tsconfig-paths"),e.qZA()(),e.TgZ(432,"li"),e._uU(433,"annotating DTOs with OpenAPI decorators (if "),e.TgZ(434,"code"),e._uU(435,"@nestjs/swagger"),e.qZA(),e._uU(436," CLI plugin is enabled)"),e.qZA(),e.TgZ(437,"li"),e._uU(438,"annotating DTOs with GraphQL decorators (if "),e.TgZ(439,"code"),e._uU(440,"@nestjs/graphql"),e.qZA(),e._uU(441," CLI plugin is enabled)"),e.qZA()(),e.TgZ(442,"pre")(443,"code",7),e._uU(444,"\n$ nest build <name> [options]\n"),e.qZA()(),e.TgZ(445,"h5",17),e._uU(446,"Arguments"),e.qZA(),e.TgZ(447,"table")(448,"thead")(449,"tr")(450,"th"),e._uU(451,"Argument"),e.qZA(),e.TgZ(452,"th"),e._uU(453,"Description"),e.qZA()()(),e.TgZ(454,"tbody")(455,"tr")(456,"td")(457,"code"),e._uU(458,"<name>"),e.qZA()(),e.TgZ(459,"td"),e._uU(460,"The name of the project to build."),e.qZA()()()(),e.TgZ(461,"h5",18),e._uU(462,"Options"),e.qZA(),e.TgZ(463,"table")(464,"thead")(465,"tr")(466,"th"),e._uU(467,"Option"),e.qZA(),e.TgZ(468,"th"),e._uU(469,"Description"),e.qZA()()(),e.TgZ(470,"tbody")(471,"tr")(472,"td")(473,"code"),e._uU(474,"--path [path]"),e.qZA()(),e.TgZ(475,"td"),e._uU(476,"Path to "),e.TgZ(477,"code"),e._uU(478,"tsconfig"),e.qZA(),e._uU(479," file. "),e._UZ(480,"br"),e._uU(481,"Alias "),e.TgZ(482,"code"),e._uU(483,"-p"),e.qZA()()(),e.TgZ(484,"tr")(485,"td")(486,"code"),e._uU(487,"--config [path]"),e.qZA()(),e.TgZ(488,"td"),e._uU(489,"Path to "),e.TgZ(490,"code"),e._uU(491,"nest-cli"),e.qZA(),e._uU(492," configuration file. "),e._UZ(493,"br"),e._uU(494,"Alias "),e.TgZ(495,"code"),e._uU(496,"-c"),e.qZA()()(),e.TgZ(497,"tr")(498,"td")(499,"code"),e._uU(500,"--watch"),e.qZA()(),e.TgZ(501,"td"),e._uU(502,"Run in watch mode (live-reload). If you're using "),e.TgZ(503,"code"),e._uU(504,"tsc"),e.qZA(),e._uU(505," for compilation, you can type "),e.TgZ(506,"code"),e._uU(507,"rs"),e.qZA(),e._uU(508," to restart the application. "),e._UZ(509,"br"),e._uU(510,"Alias "),e.TgZ(511,"code"),e._uU(512,"-w"),e.qZA()()(),e.TgZ(513,"tr")(514,"td")(515,"code"),e._uU(516,"--webpack"),e.qZA()(),e.TgZ(517,"td"),e._uU(518,"Use webpack for compilation."),e.qZA()(),e.TgZ(519,"tr")(520,"td")(521,"code"),e._uU(522,"--webpackPath"),e.qZA()(),e.TgZ(523,"td"),e._uU(524,"Path to webpack configuration."),e.qZA()(),e.TgZ(525,"tr")(526,"td")(527,"code"),e._uU(528,"--tsc"),e.qZA()(),e.TgZ(529,"td"),e._uU(530,"Force use "),e.TgZ(531,"code"),e._uU(532,"tsc"),e.qZA(),e._uU(533," for compilation."),e.qZA()()()(),e.TgZ(534,"h4",19)(535,"span"),e._uU(536,"nest start"),e.qZA()(),e.TgZ(537,"p"),e._uU(538,"Compiles and runs an application (or default project in a workspace)."),e.qZA(),e.TgZ(539,"pre")(540,"code",7),e._uU(541,"\n$ nest start <name> [options]\n"),e.qZA()(),e.TgZ(542,"h5",20),e._uU(543,"Arguments"),e.qZA(),e.TgZ(544,"table")(545,"thead")(546,"tr")(547,"th"),e._uU(548,"Argument"),e.qZA(),e.TgZ(549,"th"),e._uU(550,"Description"),e.qZA()()(),e.TgZ(551,"tbody")(552,"tr")(553,"td")(554,"code"),e._uU(555,"<name>"),e.qZA()(),e.TgZ(556,"td"),e._uU(557,"The name of the project to run."),e.qZA()()()(),e.TgZ(558,"h5",21),e._uU(559,"Options"),e.qZA(),e.TgZ(560,"table")(561,"thead")(562,"tr")(563,"th"),e._uU(564,"Option"),e.qZA(),e.TgZ(565,"th"),e._uU(566,"Description"),e.qZA()()(),e.TgZ(567,"tbody")(568,"tr")(569,"td")(570,"code"),e._uU(571,"--path [path]"),e.qZA()(),e.TgZ(572,"td"),e._uU(573,"Path to "),e.TgZ(574,"code"),e._uU(575,"tsconfig"),e.qZA(),e._uU(576," file. "),e._UZ(577,"br"),e._uU(578,"Alias "),e.TgZ(579,"code"),e._uU(580,"-p"),e.qZA()()(),e.TgZ(581,"tr")(582,"td")(583,"code"),e._uU(584,"--config [path]"),e.qZA()(),e.TgZ(585,"td"),e._uU(586,"Path to "),e.TgZ(587,"code"),e._uU(588,"nest-cli"),e.qZA(),e._uU(589," configuration file. "),e._UZ(590,"br"),e._uU(591,"Alias "),e.TgZ(592,"code"),e._uU(593,"-c"),e.qZA()()(),e.TgZ(594,"tr")(595,"td")(596,"code"),e._uU(597,"--watch"),e.qZA()(),e.TgZ(598,"td"),e._uU(599,"Run in watch mode (live-reload) "),e._UZ(600,"br"),e._uU(601,"Alias "),e.TgZ(602,"code"),e._uU(603,"-w"),e.qZA()()(),e.TgZ(604,"tr")(605,"td")(606,"code"),e._uU(607,"--preserveWatchOutput"),e.qZA()(),e.TgZ(608,"td"),e._uU(609,"Keep outdated console output in watch mode instead of clearing the screen. ("),e.TgZ(610,"code"),e._uU(611,"tsc"),e.qZA(),e._uU(612," watch mode only)"),e.qZA()(),e.TgZ(613,"tr")(614,"td")(615,"code"),e._uU(616,"--watchAssets"),e.qZA()(),e.TgZ(617,"td"),e._uU(618,"Run in watch mode (live-reload), watching non-TS files (assets). See "),e.TgZ(619,"a",22),e._uU(620,"Assets"),e.qZA(),e._uU(621," for more details."),e.qZA()(),e.TgZ(622,"tr")(623,"td")(624,"code"),e._uU(625,"--debug [hostport]"),e.qZA()(),e.TgZ(626,"td"),e._uU(627,"Run in debug mode (with --inspect flag) "),e._UZ(628,"br"),e._uU(629,"Alias "),e.TgZ(630,"code"),e._uU(631,"-d"),e.qZA()()(),e.TgZ(632,"tr")(633,"td")(634,"code"),e._uU(635,"--webpack"),e.qZA()(),e.TgZ(636,"td"),e._uU(637,"Use webpack for compilation."),e.qZA()(),e.TgZ(638,"tr")(639,"td")(640,"code"),e._uU(641,"--webpackPath"),e.qZA()(),e.TgZ(642,"td"),e._uU(643,"Path to webpack configuration."),e.qZA()(),e.TgZ(644,"tr")(645,"td")(646,"code"),e._uU(647,"--tsc"),e.qZA()(),e.TgZ(648,"td"),e._uU(649,"Force use "),e.TgZ(650,"code"),e._uU(651,"tsc"),e.qZA(),e._uU(652," for compilation."),e.qZA()(),e.TgZ(653,"tr")(654,"td")(655,"code"),e._uU(656,"--exec [binary]"),e.qZA()(),e.TgZ(657,"td"),e._uU(658,"Binary to run (default: "),e.TgZ(659,"code"),e._uU(660,"node"),e.qZA(),e._uU(661,"). "),e._UZ(662,"br"),e._uU(663,"Alias "),e.TgZ(664,"code"),e._uU(665,"-e"),e.qZA()()()()(),e.TgZ(666,"h4",23)(667,"span"),e._uU(668,"nest add"),e.qZA()(),e.TgZ(669,"p"),e._uU(670,"Imports a library that has been packaged as a "),e.TgZ(671,"strong"),e._uU(672,"nest library"),e.qZA(),e._uU(673,", running its install schematic."),e.qZA(),e.TgZ(674,"pre")(675,"code",7),e._uU(676,"\n$ nest add <name> [options]\n"),e.qZA()(),e.TgZ(677,"h5",24),e._uU(678,"Arguments"),e.qZA(),e.TgZ(679,"table")(680,"thead")(681,"tr")(682,"th"),e._uU(683,"Argument"),e.qZA(),e.TgZ(684,"th"),e._uU(685,"Description"),e.qZA()()(),e.TgZ(686,"tbody")(687,"tr")(688,"td")(689,"code"),e._uU(690,"<name>"),e.qZA()(),e.TgZ(691,"td"),e._uU(692,"The name of the library to import."),e.qZA()()()(),e.TgZ(693,"h4",25)(694,"span"),e._uU(695,"nest info"),e.qZA()(),e.TgZ(696,"p"),e._uU(697,"Displays information about installed nest packages and other helpful system info. For example:"),e.qZA(),e.TgZ(698,"pre")(699,"code",7),e._uU(700,"\n$ nest info\n"),e.qZA()(),e.TgZ(701,"pre")(702,"code",7),e._uU(703,"\n _   _             _      ___  _____  _____  _     _____\n| \\ | |           | |    |_  |/  ___|/  __ \\| |   |_   _|\n|  \\| |  ___  ___ | |_     | |\\ `--. | /  \\/| |     | |\n| . ` | / _ \\/ __|| __|    | | `--. \\| |    | |     | |\n| |\\  ||  __/\\__ \\| |_ /\\__/ //\\__/ /| \\__/\\| |_____| |_\n\\_| \\_/ \\___||___/ \\__|\\____/ \\____/  \\____/\\_____/\\___/\n\n[System Information]\nOS Version : macOS High Sierra\nNodeJS Version : v8.9.0\nYARN Version : 1.5.1\n[Nest Information]\nmicroservices version : 6.0.0\nwebsockets version : 6.0.0\ntesting version : 6.0.0\ncommon version : 6.0.0\ncore version : 6.0.0\n"),e.qZA()()())},dependencies:[g.U,Z.rH],encapsulation:2,changeDetection:0}));class c extends p.y{}(0,a.Z)(c,"\u0275fac",function(){let t;return function(n){return(t||(t=e.n5z(c)))(n||c)}}()),(0,a.Z)(c,"\u0275cmp",e.Xpm({type:c,selectors:[["app-workspaces"]],features:[e.qOj],decls:819,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/cli/workspaces.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","workspaces"],["appAnchor","","id","standard-mode"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/typescript-starter"],["appAnchor","","id","monorepo-mode"],[1,"language-bash"],[1,"file-tree"],[1,"item"],[1,"children"],[1,"error"],["appAnchor","","id","workspace-projects"],["routerLink","/cli/libraries"],["href","/cli/monorepo#cli-properties"],["appAnchor","","id","applications"],["appAnchor","","id","libraries"],["appAnchor","","id","cli-properties"],[1,"language-javascript"],["appAnchor","","id","global-compiler-options"],["rel","nofollow","target","_blank","href","https://webpack.js.org/"],["href","cli/monorepo#assets"],["appAnchor","","id","global-generate-options"],[1,"warning"],["appAnchor","","id","project-specific-generate-options"],["appAnchor","","id","specified-compiler"],["appAnchor","","id","webpack-options"],["rel","nofollow","target","_blank","href","https://webpack.js.org/configuration/"],["appAnchor","","id","assets"],[1,"language-typescript"],["appAnchor","","id","project-properties"]],template:function(o,n){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Workspaces"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest has two modes for organizing code:"),e.qZA(),e.TgZ(9,"ul")(10,"li")(11,"strong"),e._uU(12,"standard mode"),e.qZA(),e._uU(13,": useful for building individual project-focused applications that have their own dependencies and settings, and don't need to optimize for sharing modules, or optimizing complex builds. This is the default mode."),e.qZA(),e.TgZ(14,"li")(15,"strong"),e._uU(16,"monorepo mode"),e.qZA(),e._uU(17,": this mode treats code artifacts as part of a lightweight "),e.TgZ(18,"strong"),e._uU(19,"monorepo"),e.qZA(),e._uU(20,", and may be more appropriate for teams of developers and/or multi-project environments. It automates parts of the build process to make it easy to create and compose modular components, promotes code re-use, makes integration testing easier, makes it easy to share project-wide artifacts like "),e.TgZ(21,"code"),e._uU(22,"eslint"),e.qZA(),e._uU(23," rules and other configuration policies, and is easier to use than alternatives like github submodules. Monorepo mode employs the concept of a "),e.TgZ(24,"strong"),e._uU(25,"workspace"),e.qZA(),e._uU(26,", represented in the "),e.TgZ(27,"code"),e._uU(28,"nest-cli.json"),e.qZA(),e._uU(29," file, to coordinate the relationship between the components of the monorepo."),e.qZA()(),e.TgZ(30,"p"),e._uU(31,"It's important to note that virtually all of Nest's features are independent of your code organization mode. The "),e.TgZ(32,"strong"),e._uU(33,"only"),e.qZA(),e._uU(34," effect of this choice is how your projects are composed and how build artifacts are generated. All other functionality, from the CLI to core modules to add-on modules work the same in either mode."),e.qZA(),e.TgZ(35,"p"),e._uU(36,"Also, you can easily switch from "),e.TgZ(37,"strong"),e._uU(38,"standard mode"),e.qZA(),e._uU(39," to "),e.TgZ(40,"strong"),e._uU(41,"monorepo mode"),e.qZA(),e._uU(42," at any time, so you can delay this decision until the benefits of one or the other approach become more clear."),e.qZA(),e.TgZ(43,"h4",6)(44,"span"),e._uU(45,"Standard mode"),e.qZA()(),e.TgZ(46,"p"),e._uU(47,"When you run "),e.TgZ(48,"code"),e._uU(49,"nest new"),e.qZA(),e._uU(50,", a new "),e.TgZ(51,"strong"),e._uU(52,"project"),e.qZA(),e._uU(53," is created for you using a built-in schematic. Nest does the following:"),e.qZA(),e.TgZ(54,"ol")(55,"li"),e._uU(56,"Create a new folder, corresponding to the "),e.TgZ(57,"code"),e._uU(58,"name"),e.qZA(),e._uU(59," argument you provide to "),e.TgZ(60,"code"),e._uU(61,"nest new"),e.qZA()(),e.TgZ(62,"li"),e._uU(63,"Populate that folder with default files corresponding to a minimal base-level Nest application. You can examine these files at the "),e.TgZ(64,"a",7),e._uU(65,"typescript-starter"),e.qZA(),e._uU(66," repository."),e.qZA(),e.TgZ(67,"li"),e._uU(68,"Provide additional files such as "),e.TgZ(69,"code"),e._uU(70,"nest-cli.json"),e.qZA(),e._uU(71,", "),e.TgZ(72,"code"),e._uU(73,"package.json"),e.qZA(),e._uU(74," and "),e.TgZ(75,"code"),e._uU(76,"tsconfig.json"),e.qZA(),e._uU(77," that configure and enable various tools for compiling, testing and serving your application."),e.qZA()(),e.TgZ(78,"p"),e._uU(79,"From there, you can modify the starter files, add new components, add dependencies (e.g., "),e.TgZ(80,"code"),e._uU(81,"npm install"),e.qZA(),e._uU(82,"), and otherwise develop your application as covered in the rest of this documentation."),e.qZA(),e.TgZ(83,"h4",8)(84,"span"),e._uU(85,"Monorepo mode"),e.qZA()(),e.TgZ(86,"p"),e._uU(87,"To enable monorepo mode, you start with a "),e.TgZ(88,"em"),e._uU(89,"standard mode"),e.qZA(),e._uU(90," structure, and add "),e.TgZ(91,"strong"),e._uU(92,"projects"),e.qZA(),e._uU(93,". A project can be a full "),e.TgZ(94,"strong"),e._uU(95,"application"),e.qZA(),e._uU(96," (which you add to the workspace with the command "),e.TgZ(97,"code"),e._uU(98,"nest generate app"),e.qZA(),e._uU(99,") or a "),e.TgZ(100,"strong"),e._uU(101,"library"),e.qZA(),e._uU(102," (which you add to the workspace with the command "),e.TgZ(103,"code"),e._uU(104,"nest generate library"),e.qZA(),e._uU(105,"). We'll discuss the details of these specific types of project components below. The key point to note now is that it is the "),e.TgZ(106,"strong"),e._uU(107,"act of adding a project"),e.qZA(),e._uU(108," to an existing standard mode structure that "),e.TgZ(109,"strong"),e._uU(110,"converts it"),e.qZA(),e._uU(111," to monorepo mode. Let's look at an example."),e.qZA(),e.TgZ(112,"p"),e._uU(113,"If we run:"),e.qZA(),e.TgZ(114,"pre")(115,"code",9),e._uU(116,"\n$ nest new my-project\n"),e.qZA()(),e.TgZ(117,"p"),e._uU(118,"We've constructed a "),e.TgZ(119,"em"),e._uU(120,"standard mode"),e.qZA(),e._uU(121," structure, with a folder structure that looks like this:"),e.qZA(),e.TgZ(122,"div",10)(123,"div",11),e._uU(124,"node_modules"),e.qZA(),e.TgZ(125,"div",11),e._uU(126,"src"),e.qZA(),e.TgZ(127,"div",12)(128,"div",11),e._uU(129,"app.controller.ts"),e.qZA(),e.TgZ(130,"div",11),e._uU(131,"app.module.ts"),e.qZA(),e.TgZ(132,"div",11),e._uU(133,"app.service.ts"),e.qZA(),e.TgZ(134,"div",11),e._uU(135,"main.ts"),e.qZA()(),e.TgZ(136,"div",11),e._uU(137,"nest-cli.json"),e.qZA(),e.TgZ(138,"div",11),e._uU(139,"package.json"),e.qZA(),e.TgZ(140,"div",11),e._uU(141,"tsconfig.json"),e.qZA(),e.TgZ(142,"div",11),e._uU(143,".eslintrc.js"),e.qZA()(),e.TgZ(144,"p"),e._uU(145,"We can convert this to a monorepo mode structure as follows:"),e.qZA(),e.TgZ(146,"pre")(147,"code",9),e._uU(148,"\n$ cd my-project\n$ nest generate app my-app\n"),e.qZA()(),e.TgZ(149,"p"),e._uU(150,"At this point, "),e.TgZ(151,"code"),e._uU(152,"nest"),e.qZA(),e._uU(153," converts the existing structure to a "),e.TgZ(154,"strong"),e._uU(155,"monorepo mode"),e.qZA(),e._uU(156," structure. This results in a few important changes. The folder structure now looks like this:"),e.qZA(),e.TgZ(157,"div",10)(158,"div",11),e._uU(159,"apps"),e.qZA(),e.TgZ(160,"div",12)(161,"div",11),e._uU(162,"my-app"),e.qZA(),e.TgZ(163,"div",12)(164,"div",11),e._uU(165,"src"),e.qZA(),e.TgZ(166,"div",12)(167,"div",11),e._uU(168,"app.controller.ts"),e.qZA(),e.TgZ(169,"div",11),e._uU(170,"app.module.ts"),e.qZA(),e.TgZ(171,"div",11),e._uU(172,"app.service.ts"),e.qZA(),e.TgZ(173,"div",11),e._uU(174,"main.ts"),e.qZA()(),e.TgZ(175,"div",11),e._uU(176,"tsconfig.app.json"),e.qZA()(),e.TgZ(177,"div",11),e._uU(178,"my-project"),e.qZA(),e.TgZ(179,"div",12)(180,"div",11),e._uU(181,"src"),e.qZA(),e.TgZ(182,"div",12)(183,"div",11),e._uU(184,"app.controller.ts"),e.qZA(),e.TgZ(185,"div",11),e._uU(186,"app.module.ts"),e.qZA(),e.TgZ(187,"div",11),e._uU(188,"app.service.ts"),e.qZA(),e.TgZ(189,"div",11),e._uU(190,"main.ts"),e.qZA()(),e.TgZ(191,"div",11),e._uU(192,"tsconfig.app.json"),e.qZA()()(),e.TgZ(193,"div",11),e._uU(194,"nest-cli.json"),e.qZA(),e.TgZ(195,"div",11),e._uU(196,"package.json"),e.qZA(),e.TgZ(197,"div",11),e._uU(198,"tsconfig.json"),e.qZA(),e.TgZ(199,"div",11),e._uU(200,".eslintrc.js"),e.qZA()(),e.TgZ(201,"p"),e._uU(202,"The "),e.TgZ(203,"code"),e._uU(204,"generate app"),e.qZA(),e._uU(205," schematic has reorganized the code - moving each "),e.TgZ(206,"strong"),e._uU(207,"application"),e.qZA(),e._uU(208," project under the "),e.TgZ(209,"code"),e._uU(210,"apps"),e.qZA(),e._uU(211," folder, and adding a project-specific "),e.TgZ(212,"code"),e._uU(213,"tsconfig.app.json"),e.qZA(),e._uU(214," file in each project's root folder. Our original "),e.TgZ(215,"code"),e._uU(216,"my-project"),e.qZA(),e._uU(217," app has become the "),e.TgZ(218,"strong"),e._uU(219,"default project"),e.qZA(),e._uU(220," for the monorepo, and is now a peer with the just-added "),e.TgZ(221,"code"),e._uU(222,"my-app"),e.qZA(),e._uU(223,", located under the "),e.TgZ(224,"code"),e._uU(225,"apps"),e.qZA(),e._uU(226," folder. We'll cover default projects below."),e.qZA(),e.TgZ(227,"blockquote",13)(228,"strong"),e._uU(229,"Warning"),e.qZA(),e._uU(230," The conversion of a standard mode structure to monorepo only works for projects that have followed the canonical Nest project structure. Specifically, during conversion, the schematic attempts to relocate the "),e.TgZ(231,"code"),e._uU(232,"src"),e.qZA(),e._uU(233," and "),e.TgZ(234,"code"),e._uU(235,"test"),e.qZA(),e._uU(236," folders in a project folder beneath the "),e.TgZ(237,"code"),e._uU(238,"apps"),e.qZA(),e._uU(239," folder in the root. If a project does not use this structure, the conversion will fail or produce unreliable results.\n"),e.qZA(),e.TgZ(240,"h4",14)(241,"span"),e._uU(242,"Workspace projects"),e.qZA()(),e.TgZ(243,"p"),e._uU(244,"A monorepo uses the concept of a workspace to manage its member entities. Workspaces are composed of "),e.TgZ(245,"strong"),e._uU(246,"projects"),e.qZA(),e._uU(247,". A project may be either:"),e.qZA(),e.TgZ(248,"ul")(249,"li"),e._uU(250,"an "),e.TgZ(251,"strong"),e._uU(252,"application"),e.qZA(),e._uU(253,": a full Nest application including a "),e.TgZ(254,"code"),e._uU(255,"main.ts"),e.qZA(),e._uU(256," file to bootstrap the application. Aside from compile and build considerations, an application-type project within a workspace is functionally identical to an application within a "),e.TgZ(257,"em"),e._uU(258,"standard mode"),e.qZA(),e._uU(259," structure."),e.qZA(),e.TgZ(260,"li"),e._uU(261,"a "),e.TgZ(262,"strong"),e._uU(263,"library"),e.qZA(),e._uU(264,": a library is a way of packaging a general purpose set of features (modules, providers, controllers, etc.) that can be used within other projects. A library cannot run on its own, and has no "),e.TgZ(265,"code"),e._uU(266,"main.ts"),e.qZA(),e._uU(267," file. Read more about libraries "),e.TgZ(268,"a",15),e._uU(269,"here"),e.qZA(),e._uU(270,"."),e.qZA()(),e.TgZ(271,"p"),e._uU(272,"All workspaces have a "),e.TgZ(273,"strong"),e._uU(274,"default project"),e.qZA(),e._uU(275," (which should be an application-type project). This is defined by the top-level "),e.TgZ(276,"code"),e._uU(277,'"root"'),e.qZA(),e._uU(278," property in the "),e.TgZ(279,"code"),e._uU(280,"nest-cli.json"),e.qZA(),e._uU(281," file, which points at the root of the default project (see "),e.TgZ(282,"a",16),e._uU(283,"CLI properties"),e.qZA(),e._uU(284," below for more details). Usually, this is the "),e.TgZ(285,"strong"),e._uU(286,"standard mode"),e.qZA(),e._uU(287," application you started with, and later converted to a monorepo using "),e.TgZ(288,"code"),e._uU(289,"nest generate app"),e.qZA(),e._uU(290,". When you follow these steps, this property is populated automatically."),e.qZA(),e.TgZ(291,"p"),e._uU(292,"Default projects are used by "),e.TgZ(293,"code"),e._uU(294,"nest"),e.qZA(),e._uU(295," commands like "),e.TgZ(296,"code"),e._uU(297,"nest build"),e.qZA(),e._uU(298," and "),e.TgZ(299,"code"),e._uU(300,"nest start"),e.qZA(),e._uU(301," when a project name is not supplied."),e.qZA(),e.TgZ(302,"p"),e._uU(303,"For example, in the above monorepo structure, running"),e.qZA(),e.TgZ(304,"pre")(305,"code",9),e._uU(306,"\n$ nest start\n"),e.qZA()(),e.TgZ(307,"p"),e._uU(308,"will start up the "),e.TgZ(309,"code"),e._uU(310,"my-project"),e.qZA(),e._uU(311," app. To start "),e.TgZ(312,"code"),e._uU(313,"my-app"),e.qZA(),e._uU(314,", we'd use:"),e.qZA(),e.TgZ(315,"pre")(316,"code",9),e._uU(317,"\n$ nest start my-app\n"),e.qZA()(),e.TgZ(318,"h4",17)(319,"span"),e._uU(320,"Applications"),e.qZA()(),e.TgZ(321,"p"),e._uU(322,'Application-type projects, or what we might informally refer to as just "applications", are complete Nest applications that you can run and deploy. You generate an application-type project with '),e.TgZ(323,"code"),e._uU(324,"nest generate app"),e.qZA(),e._uU(325,"."),e.qZA(),e.TgZ(326,"p"),e._uU(327,"This command automatically generates a project skeleton, including the standard "),e.TgZ(328,"code"),e._uU(329,"src"),e.qZA(),e._uU(330," and "),e.TgZ(331,"code"),e._uU(332,"test"),e.qZA(),e._uU(333," folders from the "),e.TgZ(334,"a",7),e._uU(335,"typescript starter"),e.qZA(),e._uU(336,". Unlike standard mode, an application project in a monorepo does not have any of the package dependency ("),e.TgZ(337,"code"),e._uU(338,"package.json"),e.qZA(),e._uU(339,") or other project configuration artifacts like "),e.TgZ(340,"code"),e._uU(341,".prettierrc"),e.qZA(),e._uU(342," and "),e.TgZ(343,"code"),e._uU(344,".eslintrc.js"),e.qZA(),e._uU(345,". Instead, the monorepo-wide dependencies and config files are used."),e.qZA(),e.TgZ(346,"p"),e._uU(347,"However, the schematic does generate a project-specific "),e.TgZ(348,"code"),e._uU(349,"tsconfig.app.json"),e.qZA(),e._uU(350," file in the root folder of the project. This config file automatically sets appropriate build options, including setting the compilation output folder properly. The file extends the top-level (monorepo) "),e.TgZ(351,"code"),e._uU(352,"tsconfig.json"),e.qZA(),e._uU(353," file, so you can manage global settings monorepo-wide, but override them if needed at the project level."),e.qZA(),e.TgZ(354,"h4",18)(355,"span"),e._uU(356,"Libraries"),e.qZA()(),e.TgZ(357,"p"),e._uU(358,'As mentioned, library-type projects, or simply "libraries", are packages of Nest components that need to be composed into applications in order to run. You generate a library-type project with '),e.TgZ(359,"code"),e._uU(360,"nest generate library"),e.qZA(),e._uU(361,". Deciding what belongs in a library is an architectural design decision. We discuss libraries in depth in the "),e.TgZ(362,"a",15),e._uU(363,"libraries"),e.qZA(),e._uU(364," chapter."),e.qZA(),e.TgZ(365,"h4",19)(366,"span"),e._uU(367,"CLI properties"),e.qZA()(),e.TgZ(368,"p"),e._uU(369,"Nest keeps the metadata needed to organize, build and deploy both standard and monorepo structured projects in the "),e.TgZ(370,"code"),e._uU(371,"nest-cli.json"),e.qZA(),e._uU(372," file. Nest automatically adds to and updates this file as you add projects, so you usually do not have to think about it or edit its contents. However, there are some settings you may want to change manually, so it's helpful to have an overview understanding of the file."),e.qZA(),e.TgZ(373,"p"),e._uU(374,"After running the steps above to create a monorepo, our "),e.TgZ(375,"code"),e._uU(376,"nest-cli.json"),e.qZA(),e._uU(377," file looks like this:"),e.qZA(),e.TgZ(378,"pre")(379,"code",20),e._uU(380,'\n{\n  "collection": "@nestjs/schematics",\n  "sourceRoot": "apps/my-project/src",\n  "monorepo": true,\n  "root": "apps/my-project",\n  "compilerOptions": {\n    "webpack": true,\n    "tsConfigPath": "apps/my-project/tsconfig.app.json"\n  },\n  "projects": {\n    "my-project": {\n      "type": "application",\n      "root": "apps/my-project",\n      "entryFile": "main",\n      "sourceRoot": "apps/my-project/src",\n      "compilerOptions": {\n        "tsConfigPath": "apps/my-project/tsconfig.app.json"\n      }\n    },\n    "my-app": {\n      "type": "application",\n      "root": "apps/my-app",\n      "entryFile": "main",\n      "sourceRoot": "apps/my-app/src",\n      "compilerOptions": {\n        "tsConfigPath": "apps/my-app/tsconfig.app.json"\n      }\n    }\n  }\n}\n'),e.qZA()(),e.TgZ(381,"p"),e._uU(382,"The file is divided into sections:"),e.qZA(),e.TgZ(383,"ul")(384,"li"),e._uU(385,"a global section with top-level properties controlling standard and monorepo-wide settings"),e.qZA(),e.TgZ(386,"li"),e._uU(387,"a top level property ("),e.TgZ(388,"code"),e._uU(389,'"projects"'),e.qZA(),e._uU(390,") with metadata about each project. This section is present only for monorepo-mode structures."),e.qZA()(),e.TgZ(391,"p"),e._uU(392,"The top-level properties are as follows:"),e.qZA(),e.TgZ(393,"ul")(394,"li")(395,"code"),e._uU(396,'"collection"'),e.qZA(),e._uU(397,": points at the collection of schematics used to generate components; you generally should not change this value"),e.qZA(),e.TgZ(398,"li")(399,"code"),e._uU(400,'"sourceRoot"'),e.qZA(),e._uU(401,": points at the root of the source code for the single project in standard mode structures, or the "),e.TgZ(402,"em"),e._uU(403,"default project"),e.qZA(),e._uU(404," in monorepo mode structures"),e.qZA(),e.TgZ(405,"li")(406,"code"),e._uU(407,'"compilerOptions"'),e.qZA(),e._uU(408,": a map with keys specifying compiler options and values specifying the option setting; see details below"),e.qZA(),e.TgZ(409,"li")(410,"code"),e._uU(411,'"generateOptions"'),e.qZA(),e._uU(412,": a map with keys specifying global generate options and values specifying the option setting; see details below"),e.qZA(),e.TgZ(413,"li")(414,"code"),e._uU(415,'"monorepo"'),e.qZA(),e._uU(416,": (monorepo only) for a monorepo mode structure, this value is always "),e.TgZ(417,"code"),e._uU(418,"true"),e.qZA()(),e.TgZ(419,"li")(420,"code"),e._uU(421,'"root"'),e.qZA(),e._uU(422,": (monorepo only) points at the project root of the "),e.TgZ(423,"em"),e._uU(424,"default project"),e.qZA()()(),e.TgZ(425,"h4",21)(426,"span"),e._uU(427,"Global compiler options"),e.qZA()(),e.TgZ(428,"p"),e._uU(429,"These properties specify the compiler to use as well as various options that affect "),e.TgZ(430,"strong"),e._uU(431,"any"),e.qZA(),e._uU(432," compilation step, whether as part of "),e.TgZ(433,"code"),e._uU(434,"nest build"),e.qZA(),e._uU(435," or "),e.TgZ(436,"code"),e._uU(437,"nest start"),e.qZA(),e._uU(438,", and regardless of the compiler, whether "),e.TgZ(439,"code"),e._uU(440,"tsc"),e.qZA(),e._uU(441," or webpack."),e.qZA(),e.TgZ(442,"table")(443,"thead")(444,"tr")(445,"th"),e._uU(446,"Property Name"),e.qZA(),e.TgZ(447,"th"),e._uU(448,"Property Value Type"),e.qZA(),e.TgZ(449,"th"),e._uU(450,"Description"),e.qZA()()(),e.TgZ(451,"tbody")(452,"tr")(453,"td")(454,"code"),e._uU(455,"webpack"),e.qZA()(),e.TgZ(456,"td"),e._uU(457,"boolean"),e.qZA(),e.TgZ(458,"td"),e._uU(459,"If "),e.TgZ(460,"code"),e._uU(461,"true"),e.qZA(),e._uU(462,", use "),e.TgZ(463,"a",22),e._uU(464,"webpack compiler"),e.qZA(),e._uU(465,". If "),e.TgZ(466,"code"),e._uU(467,"false"),e.qZA(),e._uU(468," or not present, use "),e.TgZ(469,"code"),e._uU(470,"tsc"),e.qZA(),e._uU(471,". In monorepo mode, the default is "),e.TgZ(472,"code"),e._uU(473,"true"),e.qZA(),e._uU(474," (use webpack), in standard mode, the default is "),e.TgZ(475,"code"),e._uU(476,"false"),e.qZA(),e._uU(477," (use "),e.TgZ(478,"code"),e._uU(479,"tsc"),e.qZA(),e._uU(480,"). See below for details."),e.qZA()(),e.TgZ(481,"tr")(482,"td")(483,"code"),e._uU(484,"tsConfigPath"),e.qZA()(),e.TgZ(485,"td"),e._uU(486,"string"),e.qZA(),e.TgZ(487,"td"),e._uU(488,"("),e.TgZ(489,"strong"),e._uU(490,"monorepo only"),e.qZA(),e._uU(491,") Points at the file containing the "),e.TgZ(492,"code"),e._uU(493,"tsconfig.json"),e.qZA(),e._uU(494," settings that will be used when "),e.TgZ(495,"code"),e._uU(496,"nest build"),e.qZA(),e._uU(497," or "),e.TgZ(498,"code"),e._uU(499,"nest start"),e.qZA(),e._uU(500," is called without a "),e.TgZ(501,"code"),e._uU(502,"project"),e.qZA(),e._uU(503," option (e.g., when the default project is built or started)."),e.qZA()(),e.TgZ(504,"tr")(505,"td")(506,"code"),e._uU(507,"webpackConfigPath"),e.qZA()(),e.TgZ(508,"td"),e._uU(509,"string"),e.qZA(),e.TgZ(510,"td"),e._uU(511,"Points at a webpack options file. If not specified, Nest looks for the file "),e.TgZ(512,"code"),e._uU(513,"webpack.config.js"),e.qZA(),e._uU(514,". See below for more details."),e.qZA()(),e.TgZ(515,"tr")(516,"td")(517,"code"),e._uU(518,"deleteOutDir"),e.qZA()(),e.TgZ(519,"td"),e._uU(520,"boolean"),e.qZA(),e.TgZ(521,"td"),e._uU(522,"If "),e.TgZ(523,"code"),e._uU(524,"true"),e.qZA(),e._uU(525,", whenever the compiler is invoked, it will first remove the compilation output directory (as configured in "),e.TgZ(526,"code"),e._uU(527,"tsconfig.json"),e.qZA(),e._uU(528,", where the default is "),e.TgZ(529,"code"),e._uU(530,"./dist"),e.qZA(),e._uU(531,")."),e.qZA()(),e.TgZ(532,"tr")(533,"td")(534,"code"),e._uU(535,"assets"),e.qZA()(),e.TgZ(536,"td"),e._uU(537,"array"),e.qZA(),e.TgZ(538,"td"),e._uU(539,"Enables automatically distributing non-TypeScript assets whenever a compilation step begins (asset distribution does "),e.TgZ(540,"strong"),e._uU(541,"not"),e.qZA(),e._uU(542," happen on incremental compiles in "),e.TgZ(543,"code"),e._uU(544,"--watch"),e.qZA(),e._uU(545," mode). See below for details."),e.qZA()(),e.TgZ(546,"tr")(547,"td")(548,"code"),e._uU(549,"watchAssets"),e.qZA()(),e.TgZ(550,"td"),e._uU(551,"boolean"),e.qZA(),e.TgZ(552,"td"),e._uU(553,"If "),e.TgZ(554,"code"),e._uU(555,"true"),e.qZA(),e._uU(556,", run in watch-mode, watching "),e.TgZ(557,"strong"),e._uU(558,"all"),e.qZA(),e._uU(559," non-TypeScript assets. (For more fine-grained control of the assets to watch, see "),e.TgZ(560,"a",23),e._uU(561,"Assets"),e.qZA(),e._uU(562," section below)."),e.qZA()(),e.TgZ(563,"tr")(564,"td")(565,"code"),e._uU(566,"manualRestart"),e.qZA()(),e.TgZ(567,"td"),e._uU(568,"boolean"),e.qZA(),e.TgZ(569,"td"),e._uU(570,"If "),e.TgZ(571,"code"),e._uU(572,"true"),e.qZA(),e._uU(573,", enables the shortcut "),e.TgZ(574,"code"),e._uU(575,"rs"),e.qZA(),e._uU(576," to manually restart the server. Default value is "),e.TgZ(577,"code"),e._uU(578,"false"),e.qZA(),e._uU(579,"."),e.qZA()()()(),e.TgZ(580,"h4",24)(581,"span"),e._uU(582,"Global generate options"),e.qZA()(),e.TgZ(583,"p"),e._uU(584,"These properties specify the default generate options to be used by the "),e.TgZ(585,"code"),e._uU(586,"nest generate"),e.qZA(),e._uU(587," command."),e.qZA(),e.TgZ(588,"table")(589,"thead")(590,"tr")(591,"th"),e._uU(592,"Property Name"),e.qZA(),e.TgZ(593,"th"),e._uU(594,"Property Value Type"),e.qZA(),e.TgZ(595,"th"),e._uU(596,"Description"),e.qZA()()(),e.TgZ(597,"tbody")(598,"tr")(599,"td")(600,"code"),e._uU(601,"spec"),e.qZA()(),e.TgZ(602,"td"),e._uU(603,"boolean "),e.TgZ(604,"em"),e._uU(605,"or"),e.qZA(),e._uU(606," object"),e.qZA(),e.TgZ(607,"td"),e._uU(608,"If the value is boolean, a value of "),e.TgZ(609,"code"),e._uU(610,"true"),e.qZA(),e._uU(611," enables "),e.TgZ(612,"code"),e._uU(613,"spec"),e.qZA(),e._uU(614," generation by default and a value of "),e.TgZ(615,"code"),e._uU(616,"false"),e.qZA(),e._uU(617," disables it. A flag passed on the CLI command line overrides this setting, as does a project-specific "),e.TgZ(618,"code"),e._uU(619,"generateOptions"),e.qZA(),e._uU(620," setting (more below). If the value is an object, each key represents a schematic name, and the boolean value determines whether the default spec generation is enabled / disabled for that specific schematic."),e.qZA()(),e.TgZ(621,"tr")(622,"td")(623,"code"),e._uU(624,"flat"),e.qZA()(),e.TgZ(625,"td"),e._uU(626,"boolean"),e.qZA(),e.TgZ(627,"td"),e._uU(628,"If true, all generate commands will generate a flat structure"),e.qZA()()()(),e.TgZ(629,"p"),e._uU(630,"The following example uses a boolean value to specify that spec file generation should be disabled by default for all projects:"),e.qZA(),e.TgZ(631,"pre")(632,"code",20),e._uU(633,'\n{\n  "generateOptions": {\n    "spec": false\n  },\n  ...\n}\n'),e.qZA()(),e.TgZ(634,"p"),e._uU(635,"The following example uses a boolean value to specify flat file generation should be the default for all projects:"),e.qZA(),e.TgZ(636,"pre")(637,"code",20),e._uU(638,'\n{\n  "generateOptions": {\n    "flat": true\n  },\n  ...\n}\n'),e.qZA()(),e.TgZ(639,"p"),e._uU(640,"In the following example, "),e.TgZ(641,"code"),e._uU(642,"spec"),e.qZA(),e._uU(643," file generation is disabled only for "),e.TgZ(644,"code"),e._uU(645,"service"),e.qZA(),e._uU(646," schematics (e.g., "),e.TgZ(647,"code"),e._uU(648,"nest generate service..."),e.qZA(),e._uU(649,"):"),e.qZA(),e.TgZ(650,"pre")(651,"code",20),e._uU(652,'\n{\n  "generateOptions": {\n    "spec": {\n      "service": false\n    }\n  },\n  ...\n}\n'),e.qZA()(),e.TgZ(653,"blockquote",25)(654,"strong"),e._uU(655,"Warning"),e.qZA(),e._uU(656," When specifying the "),e.TgZ(657,"code"),e._uU(658,"spec"),e.qZA(),e._uU(659," as an object, the key for the generation schematic does not currently support automatic alias handling. This means that specifying a key as for example "),e.TgZ(660,"code"),e._uU(661,"service: false"),e.qZA(),e._uU(662," and trying to generate a service via the alias "),e.TgZ(663,"code"),e._uU(664,"s"),e.qZA(),e._uU(665,", the spec would still be generated. To make sure both the normal schematic name and the alias work as intended, specify both the normal command name as well as the alias, as seen below.\n"),e.TgZ(666,"pre")(667,"code",20),e._uU(668,'\n{\n  "generateOptions": {\n    "spec": {\n      "service": false,\n      "s": false\n    }\n  },\n  ...\n}\n'),e.qZA()()(),e.TgZ(669,"h4",26)(670,"span"),e._uU(671,"Project-specific generate options"),e.qZA()(),e.TgZ(672,"p"),e._uU(673,"In addition to providing global generate options, you may also specify project-specific generate options. The project specific generate options follow the exact same format as the global generate options, but are specified directly on each project."),e.qZA(),e.TgZ(674,"p"),e._uU(675,"Project-specific generate options override global generate options."),e.qZA(),e.TgZ(676,"pre")(677,"code",20),e._uU(678,'\n{\n  "projects": {\n    "cats-project": {\n      "generateOptions": {\n        "spec": {\n          "service": false\n        }\n      },\n      ...\n    }\n  },\n  ...\n}\n'),e.qZA()(),e.TgZ(679,"blockquote",25)(680,"strong"),e._uU(681,"Warning"),e.qZA(),e._uU(682," The order of precedence for generate options is as follows. Options specified on the CLI command line take precedence over project-specific options. Project-specific options override global options.\n"),e.qZA(),e.TgZ(683,"h4",27)(684,"span"),e._uU(685,"Specified compiler"),e.qZA()(),e.TgZ(686,"p"),e._uU(687,"The reason for the different default compilers is that for larger projects (e.g., more typical in a monorepo) webpack can have significant advantages in build times and in producing a single file bundling all project components together. If you wish to generate individual files, set "),e.TgZ(688,"code"),e._uU(689,'"webpack"'),e.qZA(),e._uU(690," to "),e.TgZ(691,"code"),e._uU(692,"false"),e.qZA(),e._uU(693,", which will cause the build process to use "),e.TgZ(694,"code"),e._uU(695,"tsc"),e.qZA(),e._uU(696,"."),e.qZA(),e.TgZ(697,"h4",28)(698,"span"),e._uU(699,"Webpack options"),e.qZA()(),e.TgZ(700,"p"),e._uU(701,"The webpack options file can contain standard "),e.TgZ(702,"a",29),e._uU(703,"webpack configuration options"),e.qZA(),e._uU(704,". For example, to tell webpack to bundle "),e.TgZ(705,"code"),e._uU(706,"node_modules"),e.qZA(),e._uU(707," (which are excluded by default), add the following to "),e.TgZ(708,"code"),e._uU(709,"webpack.config.js"),e.qZA(),e._uU(710,":"),e.qZA(),e.TgZ(711,"pre")(712,"code",20),e._uU(713,"\nmodule.exports = {\n  externals: [],\n};\n"),e.qZA()(),e.TgZ(714,"p"),e._uU(715,"Since the webpack config file is a JavaScript file, you can even expose a function that takes default options and returns a modified object:"),e.qZA(),e.TgZ(716,"pre")(717,"code",20),e._uU(718,"\nmodule.exports = function (options) {\n  return {\n    ...options,\n    externals: [],\n  };\n};\n"),e.qZA()(),e.TgZ(719,"h4",30)(720,"span"),e._uU(721,"Assets"),e.qZA()(),e.TgZ(722,"p"),e._uU(723,"TypeScript compilation automatically distributes compiler output ("),e.TgZ(724,"code"),e._uU(725,".js"),e.qZA(),e._uU(726," and "),e.TgZ(727,"code"),e._uU(728,".d.ts"),e.qZA(),e._uU(729," files) to the specified output directory. It can also be convenient to distribute non-TypeScript files, such as "),e.TgZ(730,"code"),e._uU(731,".graphql"),e.qZA(),e._uU(732," files, "),e.TgZ(733,"code"),e._uU(734,"images"),e.qZA(),e._uU(735,", "),e.TgZ(736,"code"),e._uU(737,".html"),e.qZA(),e._uU(738," files and other assets. This allows you to treat "),e.TgZ(739,"code"),e._uU(740,"nest build"),e.qZA(),e._uU(741," (and any initial compilation step) as a lightweight "),e.TgZ(742,"strong"),e._uU(743,"development build"),e.qZA(),e._uU(744," step, where you may be editing non-TypeScript files and iteratively compiling and testing.\nThe assets should be located in the "),e.TgZ(745,"code"),e._uU(746,"src"),e.qZA(),e._uU(747," folder otherwise they will not be copied."),e.qZA(),e.TgZ(748,"p"),e._uU(749,"The value of the "),e.TgZ(750,"code"),e._uU(751,"assets"),e.qZA(),e._uU(752," key should be an array of elements specifying the files to be distributed. The elements can be simple strings with "),e.TgZ(753,"code"),e._uU(754,"glob"),e.qZA(),e._uU(755,"-like file specs, for example:"),e.qZA(),e.TgZ(756,"pre")(757,"code",31),e._uU(758,'\n"assets": ["**/*.graphql"],\n"watchAssets": true,\n'),e.qZA()(),e.TgZ(759,"p"),e._uU(760,"For finer control, the elements can be objects with the following keys:"),e.qZA(),e.TgZ(761,"ul")(762,"li")(763,"code"),e._uU(764,'"include"'),e.qZA(),e._uU(765,": "),e.TgZ(766,"code"),e._uU(767,"glob"),e.qZA(),e._uU(768,"-like file specifications for the assets to be distributed"),e.qZA(),e.TgZ(769,"li")(770,"code"),e._uU(771,'"exclude"'),e.qZA(),e._uU(772,": "),e.TgZ(773,"code"),e._uU(774,"glob"),e.qZA(),e._uU(775,"-like file specifications for assets to be "),e.TgZ(776,"strong"),e._uU(777,"excluded"),e.qZA(),e._uU(778," from the "),e.TgZ(779,"code"),e._uU(780,"include"),e.qZA(),e._uU(781," list"),e.qZA(),e.TgZ(782,"li")(783,"code"),e._uU(784,'"outDir"'),e.qZA(),e._uU(785,": a string specifying the path (relative to the root folder) where the assets should be distributed. Defaults to the same output directory configured for compiler output."),e.qZA(),e.TgZ(786,"li")(787,"code"),e._uU(788,'"watchAssets"'),e.qZA(),e._uU(789,": boolean; if "),e.TgZ(790,"code"),e._uU(791,"true"),e.qZA(),e._uU(792,", run in watch mode watching specified assets"),e.qZA()(),e.TgZ(793,"p"),e._uU(794,"For example:"),e.qZA(),e.TgZ(795,"pre")(796,"code",31),e._uU(797,'\n"assets": [\n  { "include": "**/*.graphql", "exclude": "**/omitted.graphql", "watchAssets": true },\n]\n'),e.qZA()(),e.TgZ(798,"blockquote",25)(799,"strong"),e._uU(800,"Warning"),e.qZA(),e._uU(801," Setting "),e.TgZ(802,"code"),e._uU(803,"watchAssets"),e.qZA(),e._uU(804," in a top-level "),e.TgZ(805,"code"),e._uU(806,"compilerOptions"),e.qZA(),e._uU(807," property overrides any "),e.TgZ(808,"code"),e._uU(809,"watchAssets"),e.qZA(),e._uU(810," settings within the "),e.TgZ(811,"code"),e._uU(812,"assets"),e.qZA(),e._uU(813," property.\n"),e.qZA(),e.TgZ(814,"h4",32)(815,"span"),e._uU(816,"Project properties"),e.qZA()(),e.TgZ(817,"p"),e._uU(818,"This element exists only for monorepo-mode structures. You generally should not edit these properties, as they are used by Nest to locate projects and their configuration options within the monorepo."),e.qZA()())},dependencies:[g.U,Z.rH],encapsulation:2,changeDetection:0}));class d extends p.y{}(0,a.Z)(d,"\u0275fac",function(){let t;return function(n){return(t||(t=e.n5z(d)))(n||d)}}()),(0,a.Z)(d,"\u0275cmp",e.Xpm({type:d,selectors:[["app-scripts"]],features:[e.qOj],decls:265,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/cli/scripts.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","nest-cli-and-scripts"],["appAnchor","","id","the-nest-binary"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/typescript-starter"],["appAnchor","","id","build"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/cli/overview#project-structure"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/cli/usages#nest-build"],["appAnchor","","id","execution"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/cli/usages#nest-start"],["appAnchor","","id","generation"],["appAnchor","","id","package-scripts"],[1,"language-bash"],["appAnchor","","id","backward-compatibility"],["appAnchor","","id","migration"],[1,"language-typescript"]],template:function(o,n){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Nest CLI and scripts"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"This section provides additional background on how the "),e.TgZ(9,"code"),e._uU(10,"nest"),e.qZA(),e._uU(11," command interacts with compilers and scripts to help DevOps personnel manage the development environment."),e.qZA(),e.TgZ(12,"p"),e._uU(13,"A Nest application is a "),e.TgZ(14,"strong"),e._uU(15,"standard"),e.qZA(),e._uU(16," TypeScript application that needs to be compiled to JavaScript before it can be executed. There are various ways to accomplish the compilation step, and developers/teams are free to choose a way that works best for them. With that in mind, Nest provides a set of tools out-of-the-box that seek to do the following:"),e.qZA(),e.TgZ(17,"ul")(18,"li"),e._uU(19,'Provide a standard build/execute process, available at the command line, that "just works" with reasonable defaults.'),e.qZA(),e.TgZ(20,"li"),e._uU(21,"Ensure that the build/execute process is "),e.TgZ(22,"strong"),e._uU(23,"open"),e.qZA(),e._uU(24,", so developers can directly access the underlying tools to customize them using native features and options."),e.qZA(),e.TgZ(25,"li"),e._uU(26,"Remain a completely standard TypeScript/Node.js framework, so that the entire compile/deploy/execute pipeline can be managed by any external tools that the development team chooses to use."),e.qZA()(),e.TgZ(27,"p"),e._uU(28,"This goal is accomplished through a combination of the "),e.TgZ(29,"code"),e._uU(30,"nest"),e.qZA(),e._uU(31," command, a locally installed TypeScript compiler, and "),e.TgZ(32,"code"),e._uU(33,"package.json"),e.qZA(),e._uU(34," scripts. We describe how these technologies work together below. This should help you understand what's happening at each step of the build/execute process, and how to customize that behavior if necessary."),e.qZA(),e.TgZ(35,"h4",6)(36,"span"),e._uU(37,"The nest binary"),e.qZA()(),e.TgZ(38,"p"),e._uU(39,"The "),e.TgZ(40,"code"),e._uU(41,"nest"),e.qZA(),e._uU(42," command is an OS level binary (i.e., runs from the OS command line). This command actually encompasses 3 distinct areas, described below. We recommend that you run the build ("),e.TgZ(43,"code"),e._uU(44,"nest build"),e.qZA(),e._uU(45,") and execution ("),e.TgZ(46,"code"),e._uU(47,"nest start"),e.qZA(),e._uU(48,") sub-commands via the "),e.TgZ(49,"code"),e._uU(50,"package.json"),e.qZA(),e._uU(51," scripts provided automatically when a project is scaffolded (see "),e.TgZ(52,"a",7),e._uU(53,"typescript starter"),e.qZA(),e._uU(54," if you wish to start by cloning a repo, instead of running "),e.TgZ(55,"code"),e._uU(56,"nest new"),e.qZA(),e._uU(57,")."),e.qZA(),e.TgZ(58,"h4",8)(59,"span"),e._uU(60,"Build"),e.qZA()(),e.TgZ(61,"p")(62,"code"),e._uU(63,"nest build"),e.qZA(),e._uU(64," is a wrapper on top of the standard "),e.TgZ(65,"code"),e._uU(66,"tsc"),e.qZA(),e._uU(67," compiler (for "),e.TgZ(68,"a",9),e._uU(69,"standard projects"),e.qZA(),e._uU(70,") or the webpack bundler using the "),e.TgZ(71,"code"),e._uU(72,"ts-loader"),e.qZA(),e._uU(73," (for "),e.TgZ(74,"a",9),e._uU(75,"monorepos"),e.qZA(),e._uU(76,"). It does not add any other compilation features or steps except for handling "),e.TgZ(77,"code"),e._uU(78,"tsconfig-paths"),e.qZA(),e._uU(79," out of the box. The reason it exists is that most developers, especially when starting out with Nest, do not need to adjust compiler options (e.g., "),e.TgZ(80,"code"),e._uU(81,"tsconfig.json"),e.qZA(),e._uU(82," file) which can sometimes be tricky."),e.qZA(),e.TgZ(83,"p"),e._uU(84,"See the "),e.TgZ(85,"a",10),e._uU(86,"nest build"),e.qZA(),e._uU(87," documentation for more details."),e.qZA(),e.TgZ(88,"h4",11)(89,"span"),e._uU(90,"Execution"),e.qZA()(),e.TgZ(91,"p")(92,"code"),e._uU(93,"nest start"),e.qZA(),e._uU(94," simply ensures the project has been built (same as "),e.TgZ(95,"code"),e._uU(96,"nest build"),e.qZA(),e._uU(97,"), then invokes the "),e.TgZ(98,"code"),e._uU(99,"node"),e.qZA(),e._uU(100," command in a portable, easy way to execute the compiled application. As with builds, you are free to customize this process as needed, either using the "),e.TgZ(101,"code"),e._uU(102,"nest start"),e.qZA(),e._uU(103," command and its options, or completely replacing it. The entire process is a standard TypeScript application build and execute pipeline, and you are free to manage the process as such."),e.qZA(),e.TgZ(104,"p"),e._uU(105,"See the "),e.TgZ(106,"a",12),e._uU(107,"nest start"),e.qZA(),e._uU(108," documentation for more details."),e.qZA(),e.TgZ(109,"h4",13)(110,"span"),e._uU(111,"Generation"),e.qZA()(),e.TgZ(112,"p"),e._uU(113,"The "),e.TgZ(114,"code"),e._uU(115,"nest generate"),e.qZA(),e._uU(116," commands, as the name implies, generate new Nest projects, or components within them."),e.qZA(),e.TgZ(117,"h4",14)(118,"span"),e._uU(119,"Package scripts"),e.qZA()(),e.TgZ(120,"p"),e._uU(121,"Running the "),e.TgZ(122,"code"),e._uU(123,"nest"),e.qZA(),e._uU(124," commands at the OS command level requires that the "),e.TgZ(125,"code"),e._uU(126,"nest"),e.qZA(),e._uU(127," binary be installed globally. This is a standard feature of npm, and outside of Nest's direct control. One consequence of this is that the globally installed "),e.TgZ(128,"code"),e._uU(129,"nest"),e.qZA(),e._uU(130," binary is "),e.TgZ(131,"strong"),e._uU(132,"not"),e.qZA(),e._uU(133," managed as a project dependency in "),e.TgZ(134,"code"),e._uU(135,"package.json"),e.qZA(),e._uU(136,". For example, two different developers can be running two different versions of the "),e.TgZ(137,"code"),e._uU(138,"nest"),e.qZA(),e._uU(139," binary. The standard solution for this is to use package scripts so that you can treat the tools used in the build and execute steps as development dependencies."),e.qZA(),e.TgZ(140,"p"),e._uU(141,"When you run "),e.TgZ(142,"code"),e._uU(143,"nest new"),e.qZA(),e._uU(144,", or clone the "),e.TgZ(145,"a",7),e._uU(146,"typescript starter"),e.qZA(),e._uU(147,", Nest populates the new project's "),e.TgZ(148,"code"),e._uU(149,"package.json"),e.qZA(),e._uU(150," scripts with commands like "),e.TgZ(151,"code"),e._uU(152,"build"),e.qZA(),e._uU(153," and "),e.TgZ(154,"code"),e._uU(155,"start"),e.qZA(),e._uU(156,". It also installs the underlying compiler tools (such as "),e.TgZ(157,"code"),e._uU(158,"typescript"),e.qZA(),e._uU(159,") as "),e.TgZ(160,"strong"),e._uU(161,"dev dependencies"),e.qZA(),e._uU(162,"."),e.qZA(),e.TgZ(163,"p"),e._uU(164,"You run the build and execute scripts with commands like:"),e.qZA(),e.TgZ(165,"pre")(166,"code",15),e._uU(167,"\n$ npm run build\n"),e.qZA()(),e.TgZ(168,"p"),e._uU(169,"and"),e.qZA(),e.TgZ(170,"pre")(171,"code",15),e._uU(172,"\n$ npm run start\n"),e.qZA()(),e.TgZ(173,"p"),e._uU(174,"These commands use npm's script running capabilities to execute "),e.TgZ(175,"code"),e._uU(176,"nest build"),e.qZA(),e._uU(177," or "),e.TgZ(178,"code"),e._uU(179,"nest start"),e.qZA(),e._uU(180," using the "),e.TgZ(181,"strong"),e._uU(182,"locally installed"),e.qZA(),e.TgZ(183,"code"),e._uU(184,"nest"),e.qZA(),e._uU(185," binary. By using these built-in package scripts, you have full dependency management over the Nest CLI commands*. This means that, by following this "),e.TgZ(186,"strong"),e._uU(187,"recommended"),e.qZA(),e._uU(188," usage, all members of your organization can be assured of running the same version of the commands."),e.qZA(),e.TgZ(189,"p"),e._uU(190,"*This applies to the "),e.TgZ(191,"code"),e._uU(192,"build"),e.qZA(),e._uU(193," and "),e.TgZ(194,"code"),e._uU(195,"start"),e.qZA(),e._uU(196," commands. The "),e.TgZ(197,"code"),e._uU(198,"nest new"),e.qZA(),e._uU(199," and "),e.TgZ(200,"code"),e._uU(201,"nest generate"),e.qZA(),e._uU(202," commands aren't part of the build/execute pipeline, so they operate in a different context, and do not come with built-in "),e.TgZ(203,"code"),e._uU(204,"package.json"),e.qZA(),e._uU(205," scripts."),e.qZA(),e.TgZ(206,"p"),e._uU(207,"For most developers/teams, it is recommended to utilize the package scripts for building and executing their Nest projects. You can fully customize the behavior of these scripts via their options ("),e.TgZ(208,"code"),e._uU(209,"--path"),e.qZA(),e._uU(210,", "),e.TgZ(211,"code"),e._uU(212,"--webpack"),e.qZA(),e._uU(213,", "),e.TgZ(214,"code"),e._uU(215,"--webpackPath"),e.qZA(),e._uU(216,") and/or customize the "),e.TgZ(217,"code"),e._uU(218,"tsc"),e.qZA(),e._uU(219," or webpack compiler options files (e.g., "),e.TgZ(220,"code"),e._uU(221,"tsconfig.json"),e.qZA(),e._uU(222,") as needed. You are also free to run a completely custom build process to compile the TypeScript (or even to execute TypeScript directly with "),e.TgZ(223,"code"),e._uU(224,"ts-node"),e.qZA(),e._uU(225,")."),e.qZA(),e.TgZ(226,"h4",16)(227,"span"),e._uU(228,"Backward compatibility"),e.qZA()(),e.TgZ(229,"p"),e._uU(230,"Because Nest applications are pure TypeScript applications, previous versions of the Nest build/execute scripts will continue to operate. You are not required to upgrade them. You can choose to take advantage of the new "),e.TgZ(231,"code"),e._uU(232,"nest build"),e.qZA(),e._uU(233," and "),e.TgZ(234,"code"),e._uU(235,"nest start"),e.qZA(),e._uU(236," commands when you are ready, or continue running previous or customized scripts."),e.qZA(),e.TgZ(237,"h4",17)(238,"span"),e._uU(239,"Migration"),e.qZA()(),e.TgZ(240,"p"),e._uU(241,"While you are not required to make any changes, you may want to migrate to using the new CLI commands instead of using tools such as "),e.TgZ(242,"code"),e._uU(243,"tsc-watch"),e.qZA(),e._uU(244," or "),e.TgZ(245,"code"),e._uU(246,"ts-node"),e.qZA(),e._uU(247,". In this case, simply install the latest version of the "),e.TgZ(248,"code"),e._uU(249,"@nestjs/cli"),e.qZA(),e._uU(250,", both globally and locally:"),e.qZA(),e.TgZ(251,"pre")(252,"code",15),e._uU(253,"\n$ npm install -g @nestjs/cli\n$ cd  /some/project/root/folder\n$ npm install -D @nestjs/cli\n"),e.qZA()(),e.TgZ(254,"p"),e._uU(255,"You can then replace the "),e.TgZ(256,"code"),e._uU(257,"scripts"),e.qZA(),e._uU(258," defined in "),e.TgZ(259,"code"),e._uU(260,"package.json"),e.qZA(),e._uU(261," with the following ones:"),e.qZA(),e.TgZ(262,"pre")(263,"code",18),e._uU(264,'\n"build": "nest build",\n"start": "nest start",\n"start:dev": "nest start --watch",\n"start:debug": "nest start --debug --watch",\n'),e.qZA()()())},dependencies:[g.U],encapsulation:2,changeDetection:0}));const A=[{path:"overview",component:r,data:{title:"Overview - CLI"}},{path:"monorepo",component:c,data:{title:"Monorepo - CLI"}},{path:"workspaces",redirectTo:"monorepo"},{path:"libraries",component:s,data:{title:"Libraries - CLI"}},{path:"usages",component:u,data:{title:"Usage - CLI"}},{path:"scripts",component:d,data:{title:"Scripts - CLI"}}];class l{}(0,a.Z)(l,"\u0275fac",function(o){return new(o||l)}),(0,a.Z)(l,"\u0275mod",e.oAB({type:l})),(0,a.Z)(l,"\u0275inj",e.cJS({imports:[U.ez,h.m,Z.Bz.forChild(A)]}))}}]);