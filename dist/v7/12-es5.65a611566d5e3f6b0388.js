!function(){function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function n(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var o,n=r(e);if(t){var a=r(this).constructor;o=Reflect.construct(n,arguments,a)}else o=n.apply(this,arguments);return s(this,o)}}function s(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function r(e){return(r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{GbOL:function(o,s,r){"use strict";r.r(s),r.d(s,"SecurityModule",function(){return H});var a,c,i,l,b,d,u,p,h=r("ofXK"),m=r("tyNb"),I=r("PCNd"),J=r("Ydvz"),f=r("fXoL"),g=r("zg9e"),y=r("FKbk"),w=r("zdH2"),v=r("xE8d"),A=((a=function(o){t(r,o);var s=n(r);function r(){return e(this,r),s.apply(this,arguments)}return r}(J.a)).\u0275fac=function(e){return x(e||a)},a.\u0275cmp=f.Ab({type:a,selectors:[["app-authentication"]],features:[f.ub],decls:1188,vars:122,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/authentication.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","authentication"],["rel","nofollow","target","_blank","href","https://github.com/jaredhanson/passport"],["rel","nofollow","target","_blank","href","https://jwt.io/"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/session"],["rel","nofollow","target","_blank","href","http://www.passportjs.org/"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/19-auth-jwt"],["appAnchor","","id","authentication-requirements"],["rel","nofollow","target","_blank","href","https://tools.ietf.org/html/rfc6750"],["rel","nofollow","target","_blank","href","https://github.com/jaredhanson/passport-local"],[1,"language-bash"],[1,"warning"],["appAnchor","","id","implementing-passport-strategies"],[1,"filename"],["app7ca9cbea16cce687749fdf6c2b6f2856dd70ece2",""],[1,"language-typescript"],["app5c204ea0fa5d04ab74234c18a7a01a439f8ab0d8",""],["app3e17cc745f86bf4da61e107df32041ad6b7ece0a",""],[1,"Warning"],["rel","nofollow","target","_blank","href","https://github.com/kelektiv/node.bcrypt.js#readme"],["appf9c084cc637472a69d17c13e41e3474a1395539c",""],["appAnchor","","id","implementing-passport-local"],["app0a6e8bcb2f538793d8b2be3c5701f71128438212",""],[1,"info"],["rel","nofollow","target","_blank","href","http://www.passportjs.org/docs/configure/"],["href","exception-filters"],["app11855e6073d5ddb02c723c78434aa9f21571fd66",""],["appAnchor","","id","built-in-passport-guards"],["href","guards"],["appAnchor","","id","login-route"],["app7050bcdbb424c8a4f42093f1b144e194ef3f7c92",""],["rel","nofollow","target","_blank","href","https://curl.haxx.se/"],["app486f3afaf92492d7a7ec5ddbc3c931647d8a7e8b",""],["appAnchor","","id","jwt-functionality"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/jwt"],["app4551c4ae532a993b1c0fb56b87151c52ea015723",""],["app4a0f678630cfa8df5dfcaa911941a5241b02b18e",""],["app5febc4d8c107820d82653b31e00a676406ee015e",""],["rel","nofollow","target","_blank","href","https://github.com/nestjs/jwt/blob/master/README.md"],["rel","nofollow","target","_blank","href","https://github.com/auth0/node-jsonwebtoken#usage"],["app2ff35a6e819a8d596b18ade52e260168af7d5d0b",""],["appAnchor","","id","implementing-passport-jwt"],["rel","nofollow","target","_blank","href","https://github.com/mikenicholson/passport-jwt"],["app0751ff97094b66a4fa419e0d368216362fca20f1",""],["rel","nofollow","target","_blank","href","https://github.com/mikenicholson/passport-jwt#configure-strategy"],["rel","nofollow","target","_blank","href","https://github.com/mikenicholson/passport-jwt#extracting-the-jwt-from-the-request"],["app19c0d2f3fe42d0b640b810a35734fdf311228db5",""],["app89d32a8c87b03fcfb6f588bb8c53bf4ebefede52",""],["appAnchor","","id","implement-protected-route-and-jwt-strategy-guards"],["app0bc94841a496797e5813173eef21864de0cf9eab",""],["appAnchor","","id","example"],["appAnchor","","id","extending-guards"],["appAnchor","","id","enable-authentication-globally"],["href","/guards#binding-guards"],["href","/guards#putting-it-all-together"],["appAnchor","","id","request-scoped-strategies"],["routerLink","/fundamentals/injection-scopes"],["routerLink","/fundamentals/module-ref"],["href","/fundamentals/module-ref#getting-current-sub-tree"],["appAnchor","","id","customize-passport"],["rel","nofollow","target","_blank","href","http://www.passportjs.org/docs/oauth/"],["appAnchor","","id","named-strategies"],["appAnchor","","id","graphql"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/graphql/quick-start"]],template:function(e,t){if(1&e){f.Jb(0,"div",0,1),f.Jb(2,"div",2),f.Jb(3,"a",3),f.Hb(4,"i",4),f.Ib(),f.Ib(),f.Jb(5,"h3",5),f.lc(6,"Authentication"),f.Ib(),f.Jb(7,"p"),f.lc(8,"Authentication is an "),f.Jb(9,"strong"),f.lc(10,"essential"),f.Ib(),f.lc(11," part of most applications. There are many different approaches and strategies to handle authentication. The approach taken for any project depends on its particular application requirements. This chapter presents several approaches to authentication that can be adapted to a variety of different requirements."),f.Ib(),f.Jb(12,"p"),f.Jb(13,"a",6),f.lc(14,"Passport"),f.Ib(),f.lc(15," is the most popular node.js authentication library, well-known by the community and successfully used in many production applications. It's straightforward to integrate this library with a "),f.Jb(16,"strong"),f.lc(17,"Nest"),f.Ib(),f.lc(18," application using the "),f.Jb(19,"code"),f.lc(20,"@nestjs/passport"),f.Ib(),f.lc(21," module. At a high level, Passport executes a series of steps to:"),f.Ib(),f.Jb(22,"ul"),f.Jb(23,"li"),f.lc(24,'Authenticate a user by verifying their "credentials" (such as username/password, JSON Web Token ('),f.Jb(25,"a",7),f.lc(26,"JWT"),f.Ib(),f.lc(27,"), or identity token from an Identity Provider)"),f.Ib(),f.Jb(28,"li"),f.lc(29,"Manage authenticated state (by issuing a portable token, such as a JWT, or creating an "),f.Jb(30,"a",8),f.lc(31,"Express session"),f.Ib(),f.lc(32,")"),f.Ib(),f.Jb(33,"li"),f.lc(34,"Attach information about the authenticated user to the "),f.Jb(35,"code"),f.lc(36,"Request"),f.Ib(),f.lc(37," object for further use in route handlers"),f.Ib(),f.Ib(),f.Jb(38,"p"),f.lc(39,"Passport has a rich ecosystem of "),f.Jb(40,"a",9),f.lc(41,"strategies"),f.Ib(),f.lc(42," that implement various authentication mechanisms. While simple in concept, the set of Passport strategies you can choose from is large and presents a lot of variety. Passport abstracts these varied steps into a standard pattern, and the "),f.Jb(43,"code"),f.lc(44,"@nestjs/passport"),f.Ib(),f.lc(45," module wraps and standardizes this pattern into familiar Nest constructs."),f.Ib(),f.Jb(46,"p"),f.lc(47,"In this chapter, we'll implement a complete end-to-end authentication solution for a RESTful API server using these powerful and flexible modules. You can use the concepts described here to implement any Passport strategy to customize your authentication scheme. You can follow the steps in this chapter to build this complete example. You can find a repository with a completed sample app "),f.Jb(48,"a",10),f.lc(49,"here"),f.Ib(),f.lc(50,"."),f.Ib(),f.Jb(51,"h4",11),f.Jb(52,"span"),f.lc(53,"Authentication requirements"),f.Ib(),f.Ib(),f.Jb(54,"p"),f.lc(55,"Let's flesh out our requirements. For this use case, clients will start by authenticating with a username and password. Once authenticated, the server will issue a JWT that can be sent as a "),f.Jb(56,"a",12),f.lc(57,"bearer token in an authorization header"),f.Ib(),f.lc(58," on subsequent requests to prove authentication. We'll also create a protected route that is accessible only to requests that contain a valid JWT."),f.Ib(),f.Jb(59,"p"),f.lc(60,"We'll start with the first requirement: authenticating a user. We'll then extend that by issuing a JWT. Finally, we'll create a protected route that checks for a valid JWT on the request."),f.Ib(),f.Jb(61,"p"),f.lc(62,"First we need to install the required packages. Passport provides a strategy called "),f.Jb(63,"a",13),f.lc(64,"passport-local"),f.Ib(),f.lc(65," that implements a username/password authentication mechanism, which suits our needs for this portion of our use case."),f.Ib(),f.Jb(66,"pre"),f.Jb(67,"code",14),f.lc(68,"\n$ npm install --save @nestjs/passport passport passport-local\n$ npm install --save-dev @types/passport-local\n"),f.Ib(),f.Ib(),f.Jb(69,"blockquote",15),f.Jb(70,"strong"),f.lc(71,"Notice"),f.Ib(),f.lc(72," For "),f.Jb(73,"strong"),f.lc(74,"any"),f.Ib(),f.lc(75," Passport strategy you choose, you'll always need the "),f.Jb(76,"code"),f.lc(77,"@nestjs/passport"),f.Ib(),f.lc(78," and "),f.Jb(79,"code"),f.lc(80,"passport"),f.Ib(),f.lc(81," packages. Then, you'll need to install the strategy-specific package (e.g., "),f.Jb(82,"code"),f.lc(83,"passport-jwt"),f.Ib(),f.lc(84," or "),f.Jb(85,"code"),f.lc(86,"passport-local"),f.Ib(),f.lc(87,") that implements the particular authentication strategy you are building. In addition, you can also install the type definitions for any Passport strategy, as shown above with "),f.Jb(88,"code"),f.lc(89,"@types/passport-local"),f.Ib(),f.lc(90,", which provides assistance while writing TypeScript code.\n"),f.Ib(),f.Jb(91,"h4",16),f.Jb(92,"span"),f.lc(93,"Implementing Passport strategies"),f.Ib(),f.Ib(),f.Jb(94,"p"),f.lc(95,"We're now ready to implement the authentication feature. We'll start with an overview of the process used for "),f.Jb(96,"strong"),f.lc(97,"any"),f.Ib(),f.lc(98," Passport strategy. It's helpful to think of Passport as a mini framework in itself. The elegance of the framework is that it abstracts the authentication process into a few basic steps that you customize based on the strategy you're implementing. It's like a framework because you configure it by supplying customization parameters (as plain JSON objects) and custom code in the form of callback functions, which Passport calls at the appropriate time. The "),f.Jb(99,"code"),f.lc(100,"@nestjs/passport"),f.Ib(),f.lc(101," module wraps this framework in a Nest style package, making it easy to integrate into a Nest application. We'll use "),f.Jb(102,"code"),f.lc(103,"@nestjs/passport"),f.Ib(),f.lc(104," below, but first let's consider how "),f.Jb(105,"strong"),f.lc(106,"vanilla Passport"),f.Ib(),f.lc(107," works."),f.Ib(),f.Jb(108,"p"),f.lc(109,"In vanilla Passport, you configure a strategy by providing two things:"),f.Ib(),f.Jb(110,"ol"),f.Jb(111,"li"),f.lc(112,"A set of options that are specific to that strategy. For example, in a JWT strategy, you might provide a secret to sign tokens."),f.Ib(),f.Jb(113,"li"),f.lc(114,'A "verify callback", which is where you tell Passport how to interact with your user store (where you manage user accounts). Here, you verify whether a user exists (and/or create a new user), and whether their credentials are valid. The Passport library expects this callback to return a full user if the validation succeeds, or a null if it fails (failure is defined as either the user is not found, or, in the case of passport-local, the password does not match).'),f.Ib(),f.Ib(),f.Jb(115,"p"),f.lc(116,"With "),f.Jb(117,"code"),f.lc(118,"@nestjs/passport"),f.Ib(),f.lc(119,", you configure a Passport strategy by extending the "),f.Jb(120,"code"),f.lc(121,"PassportStrategy"),f.Ib(),f.lc(122," class. You pass the strategy options (item 1 above) by calling the "),f.Jb(123,"code"),f.lc(124,"super()"),f.Ib(),f.lc(125," method in your subclass, optionally passing in an options object. You provide the verify callback (item 2 above) by implementing a "),f.Jb(126,"code"),f.lc(127,"validate()"),f.Ib(),f.lc(128," method in your subclass."),f.Ib(),f.Jb(129,"p"),f.lc(130,"We'll start by generating an "),f.Jb(131,"code"),f.lc(132,"AuthModule"),f.Ib(),f.lc(133," and in it, an "),f.Jb(134,"code"),f.lc(135,"AuthService"),f.Ib(),f.lc(136,":"),f.Ib(),f.Jb(137,"pre"),f.Jb(138,"code",14),f.lc(139,"\n$ nest g module auth\n$ nest g service auth\n"),f.Ib(),f.Ib(),f.Jb(140,"p"),f.lc(141,"As we implement the "),f.Jb(142,"code"),f.lc(143,"AuthService"),f.Ib(),f.lc(144,", we'll find it useful to encapsulate user operations in a "),f.Jb(145,"code"),f.lc(146,"UsersService"),f.Ib(),f.lc(147,", so let's generate that module and service now:"),f.Ib(),f.Jb(148,"pre"),f.Jb(149,"code",14),f.lc(150,"\n$ nest g module users\n$ nest g service users\n"),f.Ib(),f.Ib(),f.Jb(151,"p"),f.lc(152,"Replace the default contents of these generated files as shown below. For our sample app, the "),f.Jb(153,"code"),f.lc(154,"UsersService"),f.Ib(),f.lc(155," simply maintains a hard-coded in-memory list of users, and a find method to retrieve one by username. In a real app, this is where you'd build your user model and persistence layer, using your library of choice (e.g., TypeORM, Sequelize, Mongoose, etc.)."),f.Ib(),f.Jb(156,"span",17),f.lc(157),f.Vb(158,"extension"),f.Hb(159,"app-tabs",null,18),f.Ib(),f.Jb(161,"pre"),f.Jb(162,"code",19),f.lc(163,"\nimport { Injectable } from '@nestjs/common';\n\n// This should be a real class/interface representing a user entity\nexport type User = any;\n\n@Injectable()\nexport class UsersService {\n  private readonly users = [\n    {\n      userId: 1,\n      username: 'john',\n      password: 'changeme',\n    },\n    {\n      userId: 2,\n      username: 'maria',\n      password: 'guess',\n    },\n  ];\n\n  async findOne(username: string): Promise<User | undefined> {\n    return this.users.find(user => user.username === username);\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(164,"pre"),f.Jb(165,"code",19),f.lc(166,"\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService {\n  constructor() {\n    this.users = [\n      {\n        userId: 1,\n        username: 'john',\n        password: 'changeme',\n      },\n      {\n        userId: 2,\n        username: 'maria',\n        password: 'guess',\n      },\n    ];\n  }\n\n  async findOne(username) {\n    return this.users.find(user => user.username === username);\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(167,"p"),f.lc(168,"In the "),f.Jb(169,"code"),f.lc(170,"UsersModule"),f.Ib(),f.lc(171,", the only change needed is to add the "),f.Jb(172,"code"),f.lc(173,"UsersService"),f.Ib(),f.lc(174," to the exports array of the "),f.Jb(175,"code"),f.lc(176,"@Module"),f.Ib(),f.lc(177," decorator so that it is visible outside this module (we'll soon use it in our "),f.Jb(178,"code"),f.lc(179,"AuthService"),f.Ib(),f.lc(180,")."),f.Ib(),f.Jb(181,"span",17),f.lc(182),f.Vb(183,"extension"),f.Hb(184,"app-tabs",null,20),f.Ib(),f.Jb(186,"pre"),f.Jb(187,"code",19),f.lc(188,"\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"),f.Ib(),f.Ib(),f.Jb(189,"pre"),f.Jb(190,"code",19),f.lc(191,"\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"),f.Ib(),f.Ib(),f.Jb(192,"p"),f.lc(193,"Our "),f.Jb(194,"code"),f.lc(195,"AuthService"),f.Ib(),f.lc(196," has the job of retrieving a user and verifying the password. We create a "),f.Jb(197,"code"),f.lc(198,"validateUser()"),f.Ib(),f.lc(199," method for this purpose. In the code below, we use a convenient ES6 spread operator to strip the password property from the user object before returning it. We'll be calling into the "),f.Jb(200,"code"),f.lc(201,"validateUser()"),f.Ib(),f.lc(202," method from our Passport local strategy in a moment."),f.Ib(),f.Jb(203,"span",17),f.lc(204),f.Vb(205,"extension"),f.Hb(206,"app-tabs",null,21),f.Ib(),f.Jb(208,"pre"),f.Jb(209,"code",19),f.lc(210,"\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async validateUser(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(211,"pre"),f.Jb(212,"code",19),f.lc(213,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\n@Dependencies(UsersService)\nexport class AuthService {\n  constructor(usersService) {\n    this.usersService = usersService;\n  }\n\n  async validateUser(username, pass) {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(214,"blockquote",22),f.Jb(215,"strong"),f.lc(216,"Warning"),f.Ib(),f.lc(217," Of course in a real application, you wouldn't store a password in plain text. You'd instead use a library like "),f.Jb(218,"a",23),f.lc(219,"bcrypt"),f.Ib(),f.lc(220,", with a salted one-way hash algorithm. With that approach, you'd only store hashed passwords, and then compare the stored password to a hashed version of the "),f.Jb(221,"strong"),f.lc(222,"incoming"),f.Ib(),f.lc(223," password, thus never storing or exposing user passwords in plain text. To keep our sample app simple, we violate that absolute mandate and use plain text. "),f.Jb(224,"strong"),f.lc(225,"Don't do this in your real app!"),f.Ib(),f.Ib(),f.Jb(226,"p"),f.lc(227,"Now, we update our "),f.Jb(228,"code"),f.lc(229,"AuthModule"),f.Ib(),f.lc(230," to import the "),f.Jb(231,"code"),f.lc(232,"UsersModule"),f.Ib(),f.lc(233,"."),f.Ib(),f.Jb(234,"span",17),f.lc(235),f.Vb(236,"extension"),f.Hb(237,"app-tabs",null,24),f.Ib(),f.Jb(239,"pre"),f.Jb(240,"code",19),f.lc(241,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(242,"pre"),f.Jb(243,"code",19),f.lc(244,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(245,"h4",25),f.Jb(246,"span"),f.lc(247,"Implementing Passport local"),f.Ib(),f.Ib(),f.Jb(248,"p"),f.lc(249,"Now we can implement our Passport "),f.Jb(250,"strong"),f.lc(251,"local authentication strategy"),f.Ib(),f.lc(252,". Create a file called "),f.Jb(253,"code"),f.lc(254,"local.strategy.ts"),f.Ib(),f.lc(255," in the "),f.Jb(256,"code"),f.lc(257,"auth"),f.Ib(),f.lc(258," folder, and add the following code:"),f.Ib(),f.Jb(259,"span",17),f.lc(260),f.Vb(261,"extension"),f.Hb(262,"app-tabs",null,26),f.Ib(),f.Jb(264,"pre"),f.Jb(265,"code",19),f.lc(266,"\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise<any> {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(267,"pre"),f.Jb(268,"code",19),f.lc(269,"\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException, Dependencies } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\n@Dependencies(AuthService)\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(authService) {\n    super();\n    this.authService = authService;\n  }\n\n  async validate(username, password) {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(270,"p"),f.lc(271,"We've followed the recipe described earlier for all Passport strategies. In our use case with passport-local, there are no configuration options, so our constructor simply calls "),f.Jb(272,"code"),f.lc(273,"super()"),f.Ib(),f.lc(274,", without an options object."),f.Ib(),f.Jb(275,"blockquote",27),f.Jb(276,"strong"),f.lc(277,"Hint"),f.Ib(),f.lc(278," We can pass an options object in the call to "),f.Jb(279,"code"),f.lc(280,"super()"),f.Ib(),f.lc(281," to customize the behavior of the passport strategy. In this example, the passport-local strategy by default expects properties called "),f.Jb(282,"code"),f.lc(283,"username"),f.Ib(),f.lc(284," and "),f.Jb(285,"code"),f.lc(286,"password"),f.Ib(),f.lc(287," in the request body. Pass an options object to specify different property names, for example: "),f.Jb(288,"code"),f.lc(289),f.Ib(),f.lc(290,". See the "),f.Jb(291,"a",28),f.lc(292,"Passport documentation"),f.Ib(),f.lc(293," for more information.\n"),f.Ib(),f.Jb(294,"p"),f.lc(295,"We've also implemented the "),f.Jb(296,"code"),f.lc(297,"validate()"),f.Ib(),f.lc(298," method. For each strategy, Passport will call the verify function (implemented with the "),f.Jb(299,"code"),f.lc(300,"validate()"),f.Ib(),f.lc(301," method in "),f.Jb(302,"code"),f.lc(303,"@nestjs/passport"),f.Ib(),f.lc(304,") using an appropriate strategy-specific set of parameters. For the local-strategy, Passport expects a "),f.Jb(305,"code"),f.lc(306,"validate()"),f.Ib(),f.lc(307," method with the following signature: "),f.Jb(308,"code"),f.lc(309,"validate(username: string, password:string): any"),f.Ib(),f.lc(310,"."),f.Ib(),f.Jb(311,"p"),f.lc(312,"Most of the validation work is done in our "),f.Jb(313,"code"),f.lc(314,"AuthService"),f.Ib(),f.lc(315," (with the help of our "),f.Jb(316,"code"),f.lc(317,"UsersService"),f.Ib(),f.lc(318,"), so this method is quite straightforward. The "),f.Jb(319,"code"),f.lc(320,"validate()"),f.Ib(),f.lc(321," method for "),f.Jb(322,"strong"),f.lc(323,"any"),f.Ib(),f.lc(324," Passport strategy will follow a similar pattern, varying only in the details of how credentials are represented. If a user is found and the credentials are valid, the user is returned so Passport can complete its tasks (e.g., creating the "),f.Jb(325,"code"),f.lc(326,"user"),f.Ib(),f.lc(327," property on the "),f.Jb(328,"code"),f.lc(329,"Request"),f.Ib(),f.lc(330," object), and the request handling pipeline can continue. If it's not found, we throw an exception and let our "),f.Jb(331,"a",29),f.lc(332,"exceptions layer"),f.Ib(),f.lc(333," handle it."),f.Ib(),f.Jb(334,"p"),f.lc(335,"Typically, the only significant difference in the "),f.Jb(336,"code"),f.lc(337,"validate()"),f.Ib(),f.lc(338," method for each strategy is "),f.Jb(339,"strong"),f.lc(340,"how"),f.Ib(),f.lc(341," you determine if a user exists and is valid. For example, in a JWT strategy, depending on requirements, we may evaluate whether the "),f.Jb(342,"code"),f.lc(343,"userId"),f.Ib(),f.lc(344," carried in the decoded token matches a record in our user database, or matches a list of revoked tokens. Hence, this pattern of sub-classing and implementing strategy-specific validation is consistent, elegant and extensible."),f.Ib(),f.Jb(345,"p"),f.lc(346,"We need to configure our "),f.Jb(347,"code"),f.lc(348,"AuthModule"),f.Ib(),f.lc(349," to use the Passport features we just defined. Update "),f.Jb(350,"code"),f.lc(351,"auth.module.ts"),f.Ib(),f.lc(352," to look like this:"),f.Ib(),f.Jb(353,"span",17),f.lc(354),f.Vb(355,"extension"),f.Hb(356,"app-tabs",null,30),f.Ib(),f.Jb(358,"pre"),f.Jb(359,"code",19),f.lc(360,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule],\n  providers: [AuthService, LocalStrategy],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(361,"pre"),f.Jb(362,"code",19),f.lc(363,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule],\n  providers: [AuthService, LocalStrategy],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(364,"h4",31),f.Jb(365,"span"),f.lc(366,"Built-in Passport Guards"),f.Ib(),f.Ib(),f.Jb(367,"p"),f.lc(368,"The "),f.Jb(369,"a",32),f.lc(370,"Guards"),f.Ib(),f.lc(371," chapter describes the primary function of Guards: to determine whether a request will be handled by the route handler or not. That remains true, and we'll use that standard capability soon. However, in the context of using the "),f.Jb(372,"code"),f.lc(373,"@nestjs/passport"),f.Ib(),f.lc(374," module, we will also introduce a slight new wrinkle that may at first be confusing, so let's discuss that now. Consider that your app can exist in two states, from an authentication perspective:"),f.Ib(),f.Jb(375,"ol"),f.Jb(376,"li"),f.lc(377,"the user/client is "),f.Jb(378,"strong"),f.lc(379,"not"),f.Ib(),f.lc(380," logged in (is not authenticated)"),f.Ib(),f.Jb(381,"li"),f.lc(382,"the user/client "),f.Jb(383,"strong"),f.lc(384,"is"),f.Ib(),f.lc(385," logged in (is authenticated)"),f.Ib(),f.Ib(),f.Jb(386,"p"),f.lc(387,"In the first case (user is not logged in), we need to perform two distinct functions:"),f.Ib(),f.Jb(388,"ul"),f.Jb(389,"li"),f.Jb(390,"p"),f.lc(391,"Restrict the routes an unauthenticated user can access (i.e., deny access to restricted routes). We'll use Guards in their familiar capacity to handle this function, by placing a Guard on the protected routes. As you may anticipate, we'll be checking for the presence of a valid JWT in this Guard, so we'll work on this Guard later, once we are successfully issuing JWTs."),f.Ib(),f.Ib(),f.Jb(392,"li"),f.Jb(393,"p"),f.lc(394,"Initiate the "),f.Jb(395,"strong"),f.lc(396,"authentication step"),f.Ib(),f.lc(397," itself when a previously unauthenticated user attempts to login. This is the step where we'll "),f.Jb(398,"strong"),f.lc(399,"issue"),f.Ib(),f.lc(400," a JWT to a valid user. Thinking about this for a moment, we know we'll need to "),f.Jb(401,"code"),f.lc(402,"POST"),f.Ib(),f.lc(403," username/password credentials to initiate authentication, so we'll set up a "),f.Jb(404,"code"),f.lc(405,"POST /auth/login"),f.Ib(),f.lc(406," route to handle that. This raises the question: how exactly do we invoke the passport-local strategy in that route?"),f.Ib(),f.Ib(),f.Ib(),f.Jb(407,"p"),f.lc(408,"The answer is straightforward: by using another, slightly different type of Guard. The "),f.Jb(409,"code"),f.lc(410,"@nestjs/passport"),f.Ib(),f.lc(411," module provides us with a built-in Guard that does this for us. This Guard invokes the Passport strategy and kicks off the steps described above (retrieving credentials, running the verify function, creating the "),f.Jb(412,"code"),f.lc(413,"user"),f.Ib(),f.lc(414," property, etc)."),f.Ib(),f.Jb(415,"p"),f.lc(416,"The second case enumerated above (logged in user) simply relies on the standard type of Guard we already discussed to enable access to protected routes for logged in users."),f.Ib(),f.Jb(417,"p"),f.Hb(418,"app-banner-courses"),f.Ib(),f.Jb(419,"h4",33),f.Jb(420,"span"),f.lc(421,"Login route"),f.Ib(),f.Ib(),f.Jb(422,"p"),f.lc(423,"With the strategy in place, we can now implement a bare-bones "),f.Jb(424,"code"),f.lc(425,"/auth/login"),f.Ib(),f.lc(426," route, and apply the built-in Guard to initiate the passport-local flow."),f.Ib(),f.Jb(427,"p"),f.lc(428,"Open the "),f.Jb(429,"code"),f.lc(430,"app.controller.ts"),f.Ib(),f.lc(431," file and replace its contents with the following:"),f.Ib(),f.Jb(432,"span",17),f.lc(433),f.Vb(434,"extension"),f.Hb(435,"app-tabs",null,34),f.Ib(),f.Jb(437,"pre"),f.Jb(438,"code",19),f.lc(439,"\nimport { Controller, Request, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class AppController {\n  @UseGuards(AuthGuard('local'))\n  @Post('auth/login')\n  async login(@Request() req) {\n    return req.user;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(440,"pre"),f.Jb(441,"code",19),f.lc(442,"\nimport { Controller, Bind, Request, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class AppController {\n  @UseGuards(AuthGuard('local'))\n  @Post('auth/login')\n  @Bind(Request())\n  async login(req) {\n    return req.user;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(443,"p"),f.lc(444,"With "),f.Jb(445,"code"),f.lc(446,"@UseGuards(AuthGuard('local'))"),f.Ib(),f.lc(447," we are using an "),f.Jb(448,"code"),f.lc(449,"AuthGuard"),f.Ib(),f.lc(450," that "),f.Jb(451,"code"),f.lc(452,"@nestjs/passport"),f.Ib(),f.Jb(453,"strong"),f.lc(454,"automatically provisioned"),f.Ib(),f.lc(455," for us when we extended the passport-local strategy. Let's break that down. Our Passport local strategy has a default name of "),f.Jb(456,"code"),f.lc(457,"'local'"),f.Ib(),f.lc(458,". We reference that name in the "),f.Jb(459,"code"),f.lc(460,"@UseGuards()"),f.Ib(),f.lc(461," decorator to associate it with code supplied by the "),f.Jb(462,"code"),f.lc(463,"passport-local"),f.Ib(),f.lc(464," package. This is used to disambiguate which strategy to invoke in case we have multiple Passport strategies in our app (each of which may provision a strategy-specific "),f.Jb(465,"code"),f.lc(466,"AuthGuard"),f.Ib(),f.lc(467,"). While we only have one such strategy so far, we'll shortly add a second, so this is needed for disambiguation."),f.Ib(),f.Jb(468,"p"),f.lc(469,"In order to test our route we'll have our "),f.Jb(470,"code"),f.lc(471,"/auth/login"),f.Ib(),f.lc(472," route simply return the user for now. This also lets us demonstrate another Passport feature: Passport automatically creates a "),f.Jb(473,"code"),f.lc(474,"user"),f.Ib(),f.lc(475," object, based on the value we return from the "),f.Jb(476,"code"),f.lc(477,"validate()"),f.Ib(),f.lc(478," method, and assigns it to the "),f.Jb(479,"code"),f.lc(480,"Request"),f.Ib(),f.lc(481," object as "),f.Jb(482,"code"),f.lc(483,"req.user"),f.Ib(),f.lc(484,". Later, we'll replace this with code to create and return a JWT instead."),f.Ib(),f.Jb(485,"p"),f.lc(486,"Since these are API routes, we'll test them using the commonly available "),f.Jb(487,"a",35),f.lc(488,"cURL"),f.Ib(),f.lc(489," library. You can test with any of the "),f.Jb(490,"code"),f.lc(491,"user"),f.Ib(),f.lc(492," objects hard-coded in the "),f.Jb(493,"code"),f.lc(494,"UsersService"),f.Ib(),f.lc(495,"."),f.Ib(),f.Jb(496,"pre"),f.Jb(497,"code",14),f.lc(498,'\n$ # POST to /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n$ # result -> {"userId":1,"username":"john"}\n'),f.Ib(),f.Ib(),f.Jb(499,"p"),f.lc(500,"While this works, passing the strategy name directly to the "),f.Jb(501,"code"),f.lc(502,"AuthGuard()"),f.Ib(),f.lc(503," introduces magic strings in the codebase. Instead, we recommend creating your own class, as shown below:"),f.Ib(),f.Jb(504,"span",17),f.lc(505),f.Vb(506,"extension"),f.Hb(507,"app-tabs",null,36),f.Ib(),f.Jb(509,"pre"),f.Jb(510,"code",19),f.lc(511,"\nimport { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n"),f.Ib(),f.Ib(),f.Jb(512,"p"),f.lc(513,"Now, we can update the "),f.Jb(514,"code"),f.lc(515,"/auth/login"),f.Ib(),f.lc(516," route handler and use the "),f.Jb(517,"code"),f.lc(518,"LocalAuthGuard"),f.Ib(),f.lc(519," instead:"),f.Ib(),f.Jb(520,"pre"),f.Jb(521,"code",19),f.lc(522,"\n@UseGuards(LocalAuthGuard)\n@Post('auth/login')\nasync login(@Request() req) {\n  return req.user;\n}\n"),f.Ib(),f.Ib(),f.Jb(523,"h4",37),f.Jb(524,"span"),f.lc(525,"JWT functionality"),f.Ib(),f.Ib(),f.Jb(526,"p"),f.lc(527,"We're ready to move on to the JWT portion of our auth system. Let's review and refine our requirements:"),f.Ib(),f.Jb(528,"ul"),f.Jb(529,"li"),f.lc(530,"Allow users to authenticate with username/password, returning a JWT for use in subsequent calls to protected API endpoints. We're well on our way to meeting this requirement. To complete it, we'll need to write the code that issues a JWT."),f.Ib(),f.Jb(531,"li"),f.lc(532,"Create API routes which are protected based on the presence of a valid JWT as a bearer token"),f.Ib(),f.Ib(),f.Jb(533,"p"),f.lc(534,"We'll need to install a couple more packages to support our JWT requirements:"),f.Ib(),f.Jb(535,"pre"),f.Jb(536,"code",14),f.lc(537,"\n$ npm install --save @nestjs/jwt passport-jwt\n$ npm install --save-dev @types/passport-jwt\n"),f.Ib(),f.Ib(),f.Jb(538,"p"),f.lc(539,"The "),f.Jb(540,"code"),f.lc(541,"@nestjs/jwt"),f.Ib(),f.lc(542," package (see more "),f.Jb(543,"a",38),f.lc(544,"here"),f.Ib(),f.lc(545,") is a utility package that helps with JWT manipulation. The "),f.Jb(546,"code"),f.lc(547,"passport-jwt"),f.Ib(),f.lc(548," package is the Passport package that implements the JWT strategy and "),f.Jb(549,"code"),f.lc(550,"@types/passport-jwt"),f.Ib(),f.lc(551," provides the TypeScript type definitions."),f.Ib(),f.Jb(552,"p"),f.lc(553,"Let's take a closer look at how a "),f.Jb(554,"code"),f.lc(555,"POST /auth/login"),f.Ib(),f.lc(556," request is handled. We've decorated the route using the built-in "),f.Jb(557,"code"),f.lc(558,"AuthGuard"),f.Ib(),f.lc(559," provided by the passport-local strategy. This means that:"),f.Ib(),f.Jb(560,"ol"),f.Jb(561,"li"),f.lc(562,"The route handler "),f.Jb(563,"strong"),f.lc(564,"will only be invoked if the user has been validated"),f.Ib(),f.Ib(),f.Jb(565,"li"),f.lc(566,"The "),f.Jb(567,"code"),f.lc(568,"req"),f.Ib(),f.lc(569," parameter will contain a "),f.Jb(570,"code"),f.lc(571,"user"),f.Ib();f.lc(572," property (populated by Passport during the passport-local authentication flow)"),f.Ib(),f.Ib(),f.Jb(573,"p"),f.lc(574,"With this in mind, we can now finally generate a real JWT, and return it in this route. To keep our services cleanly modularized, we'll handle generating the JWT in the "),f.Jb(575,"code"),f.lc(576,"authService"),f.Ib(),f.lc(577,". Open the "),f.Jb(578,"code"),f.lc(579,"auth.service.ts"),f.Ib(),f.lc(580," file in the "),f.Jb(581,"code"),f.lc(582,"auth"),f.Ib(),f.lc(583," folder, and add the "),f.Jb(584,"code"),f.lc(585,"login()"),f.Ib(),f.lc(586," method, and import the "),f.Jb(587,"code"),f.lc(588,"JwtService"),f.Ib(),f.lc(589," as shown:"),f.Ib(),f.Jb(590,"span",17),f.lc(591),f.Vb(592,"extension"),f.Hb(593,"app-tabs",null,39),f.Ib(),f.Jb(595,"pre"),f.Jb(596,"code",19),f.lc(597,"\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { username: user.username, sub: user.userId };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(598,"pre"),f.Jb(599,"code",19),f.lc(600,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Dependencies(UsersService, JwtService)\n@Injectable()\nexport class AuthService {\n  constructor(usersService, jwtService) {\n    this.usersService = usersService;\n    this.jwtService = jwtService;\n  }\n\n  async validateUser(username, pass) {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user) {\n    const payload = { username: user.username, sub: user.userId };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(601,"p"),f.lc(602,"We're using the "),f.Jb(603,"code"),f.lc(604,"@nestjs/jwt"),f.Ib(),f.lc(605," library, which supplies a "),f.Jb(606,"code"),f.lc(607,"sign()"),f.Ib(),f.lc(608," function to generate our JWT from a subset of the "),f.Jb(609,"code"),f.lc(610,"user"),f.Ib(),f.lc(611," object properties, which we then return as a simple object with a single "),f.Jb(612,"code"),f.lc(613,"access_token"),f.Ib(),f.lc(614," property. Note: we choose a property name of "),f.Jb(615,"code"),f.lc(616,"sub"),f.Ib(),f.lc(617," to hold our "),f.Jb(618,"code"),f.lc(619,"userId"),f.Ib(),f.lc(620," value to be consistent with JWT standards. Don't forget to inject the JwtService provider into the "),f.Jb(621,"code"),f.lc(622,"AuthService"),f.Ib(),f.lc(623,"."),f.Ib(),f.Jb(624,"p"),f.lc(625,"We now need to update the "),f.Jb(626,"code"),f.lc(627,"AuthModule"),f.Ib(),f.lc(628," to import the new dependencies and configure the "),f.Jb(629,"code"),f.lc(630,"JwtModule"),f.Ib(),f.lc(631,"."),f.Ib(),f.Jb(632,"p"),f.lc(633,"First, create "),f.Jb(634,"code"),f.lc(635,"constants.ts"),f.Ib(),f.lc(636," in the "),f.Jb(637,"code"),f.lc(638,"auth"),f.Ib(),f.lc(639," folder, and add the following code:"),f.Ib(),f.Jb(640,"span",17),f.lc(641),f.Vb(642,"extension"),f.Hb(643,"app-tabs",null,40),f.Ib(),f.Jb(645,"pre"),f.Jb(646,"code",19),f.lc(647,"\nexport const jwtConstants = {\n  secret: 'secretKey',\n};\n"),f.Ib(),f.Ib(),f.Jb(648,"pre"),f.Jb(649,"code",19),f.lc(650,"\nexport const jwtConstants = {\n  secret: 'secretKey',\n};\n"),f.Ib(),f.Ib(),f.Jb(651,"p"),f.lc(652,"We'll use this to share our key between the JWT signing and verifying steps."),f.Ib(),f.Jb(653,"blockquote",22),f.Jb(654,"strong"),f.lc(655,"Warning"),f.Ib(),f.Jb(656,"strong"),f.lc(657,"Do not expose this key publicly"),f.Ib(),f.lc(658,". We have done so here to make it clear what the code is doing, but in a production system "),f.Jb(659,"strong"),f.lc(660,"you must protect this key"),f.Ib(),f.lc(661," using appropriate measures such as a secrets vault, environment variable, or configuration service.\n"),f.Ib(),f.Jb(662,"p"),f.lc(663,"Now, open "),f.Jb(664,"code"),f.lc(665,"auth.module.ts"),f.Ib(),f.lc(666," in the "),f.Jb(667,"code"),f.lc(668,"auth"),f.Ib(),f.lc(669," folder and update it to look like this:"),f.Ib(),f.Jb(670,"span",17),f.lc(671),f.Vb(672,"extension"),f.Hb(673,"app-tabs",null,41),f.Ib(),f.Jb(675,"pre"),f.Jb(676,"code",19),f.lc(677,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(678,"pre"),f.Jb(679,"code",19),f.lc(680,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(681,"p"),f.lc(682,"We configure the "),f.Jb(683,"code"),f.lc(684,"JwtModule"),f.Ib(),f.lc(685," using "),f.Jb(686,"code"),f.lc(687,"register()"),f.Ib(),f.lc(688,", passing in a configuration object. See "),f.Jb(689,"a",42),f.lc(690,"here"),f.Ib(),f.lc(691," for more on the Nest "),f.Jb(692,"code"),f.lc(693,"JwtModule"),f.Ib(),f.lc(694," and "),f.Jb(695,"a",43),f.lc(696,"here"),f.Ib(),f.lc(697," for more details on the available configuration options."),f.Ib(),f.Jb(698,"p"),f.lc(699,"Now we can update the "),f.Jb(700,"code"),f.lc(701,"/auth/login"),f.Ib(),f.lc(702," route to return a JWT."),f.Ib(),f.Jb(703,"span",17),f.lc(704),f.Vb(705,"extension"),f.Hb(706,"app-tabs",null,44),f.Ib(),f.Jb(708,"pre"),f.Jb(709,"code",19),f.lc(710,"\nimport { Controller, Request, Post, UseGuards } from '@nestjs/common';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(711,"pre"),f.Jb(712,"code",19),f.lc(713,"\nimport { Controller, Bind, Request, Post, UseGuards } from '@nestjs/common';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  @Bind(Request())\n  async login(req) {\n    return this.authService.login(req.user);\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(714,"p"),f.lc(715,"Let's go ahead and test our routes using cURL again. You can test with any of the "),f.Jb(716,"code"),f.lc(717,"user"),f.Ib(),f.lc(718," objects hard-coded in the "),f.Jb(719,"code"),f.lc(720,"UsersService"),f.Ib(),f.lc(721,"."),f.Ib(),f.Jb(722,"pre"),f.Jb(723,"code",14),f.lc(724,'\n$ # POST to /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n$ # result -> {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}\n$ # Note: above JWT truncated\n'),f.Ib(),f.Ib(),f.Jb(725,"h4",45),f.Jb(726,"span"),f.lc(727,"Implementing Passport JWT"),f.Ib(),f.Ib(),f.Jb(728,"p"),f.lc(729,"We can now address our final requirement: protecting endpoints by requiring a valid JWT be present on the request. Passport can help us here too. It provides the "),f.Jb(730,"a",46),f.lc(731,"passport-jwt"),f.Ib(),f.lc(732," strategy for securing RESTful endpoints with JSON Web Tokens. Start by creating a file called "),f.Jb(733,"code"),f.lc(734,"jwt.strategy.ts"),f.Ib(),f.lc(735," in the "),f.Jb(736,"code"),f.lc(737,"auth"),f.Ib(),f.lc(738," folder, and add the following code:"),f.Ib(),f.Jb(739,"span",17),f.lc(740),f.Vb(741,"extension"),f.Hb(742,"app-tabs",null,47),f.Ib(),f.Jb(744,"pre"),f.Jb(745,"code",19),f.lc(746,"\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(747,"pre"),f.Jb(748,"code",19),f.lc(749,"\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(750,"p"),f.lc(751,"With our "),f.Jb(752,"code"),f.lc(753,"JwtStrategy"),f.Ib(),f.lc(754,", we've followed the same recipe described earlier for all Passport strategies. This strategy requires some initialization, so we do that by passing in an options object in the "),f.Jb(755,"code"),f.lc(756,"super()"),f.Ib(),f.lc(757," call. You can read more about the available options "),f.Jb(758,"a",48),f.lc(759,"here"),f.Ib(),f.lc(760,". In our case, these options are:"),f.Ib(),f.Jb(761,"ul"),f.Jb(762,"li"),f.Jb(763,"code"),f.lc(764,"jwtFromRequest"),f.Ib(),f.lc(765,": supplies the method by which the JWT will be extracted from the "),f.Jb(766,"code"),f.lc(767,"Request"),f.Ib(),f.lc(768,". We will use the standard approach of supplying a bearer token in the Authorization header of our API requests. Other options are described "),f.Jb(769,"a",49),f.lc(770,"here"),f.Ib(),f.lc(771,"."),f.Ib(),f.Jb(772,"li"),f.Jb(773,"code"),f.lc(774,"ignoreExpiration"),f.Ib(),f.lc(775,": just to be explicit, we choose the default "),f.Jb(776,"code"),f.lc(777,"false"),f.Ib(),f.lc(778," setting, which delegates the responsibility of ensuring that a JWT has not expired to the Passport module. This means that if our route is supplied with an expired JWT, the request will be denied and a "),f.Jb(779,"code"),f.lc(780,"401 Unauthorized"),f.Ib(),f.lc(781," response sent. Passport conveniently handles this automatically for us."),f.Ib(),f.Jb(782,"li"),f.Jb(783,"code"),f.lc(784,"secretOrKey"),f.Ib(),f.lc(785,": we are using the expedient option of supplying a symmetric secret for signing the token. Other options, such as a PEM-encoded public key, may be more appropriate for production apps (see "),f.Jb(786,"a",49),f.lc(787,"here"),f.Ib(),f.lc(788," for more information). In any case, as cautioned earlier, "),f.Jb(789,"strong"),f.lc(790,"do not expose this secret publicly"),f.Ib(),f.lc(791,"."),f.Ib(),f.Ib(),f.Jb(792,"p"),f.lc(793,"The "),f.Jb(794,"code"),f.lc(795,"validate()"),f.Ib(),f.lc(796," method deserves some discussion. For the jwt-strategy, Passport first verifies the JWT's signature and decodes the JSON. It then invokes our "),f.Jb(797,"code"),f.lc(798,"validate()"),f.Ib(),f.lc(799," method passing the decoded JSON as its single parameter. Based on the way JWT signing works, "),f.Jb(800,"strong"),f.lc(801,"we're guaranteed that we're receiving a valid token"),f.Ib(),f.lc(802," that we have previously signed and issued to a valid user."),f.Ib(),f.Jb(803,"p"),f.lc(804,"As a result of all this, our response to the "),f.Jb(805,"code"),f.lc(806,"validate()"),f.Ib(),f.lc(807," callback is trivial: we simply return an object containing the "),f.Jb(808,"code"),f.lc(809,"userId"),f.Ib(),f.lc(810," and "),f.Jb(811,"code"),f.lc(812,"username"),f.Ib(),f.lc(813," properties. Recall again that Passport will build a "),f.Jb(814,"code"),f.lc(815,"user"),f.Ib(),f.lc(816," object based on the return value of our "),f.Jb(817,"code"),f.lc(818,"validate()"),f.Ib(),f.lc(819," method, and attach it as a property on the "),f.Jb(820,"code"),f.lc(821,"Request"),f.Ib(),f.lc(822," object."),f.Ib(),f.Jb(823,"p"),f.lc(824,"It's also worth pointing out that this approach leaves us room ('hooks' as it were) to inject other business logic into the process. For example, we could do a database lookup in our "),f.Jb(825,"code"),f.lc(826,"validate()"),f.Ib(),f.lc(827," method to extract more information about the user, resulting in a more enriched "),f.Jb(828,"code"),f.lc(829,"user"),f.Ib(),f.lc(830," object being available in our "),f.Jb(831,"code"),f.lc(832,"Request"),f.Ib(),f.lc(833,". This is also the place we may decide to do further token validation, such as looking up the "),f.Jb(834,"code"),f.lc(835,"userId"),f.Ib(),f.lc(836,' in a list of revoked tokens, enabling us to perform token revocation. The model we\'ve implemented here in our sample code is a fast, "stateless JWT" model, where each API call is immediately authorized based on the presence of a valid JWT, and a small bit of information about the requester (its '),f.Jb(837,"code"),f.lc(838,"userId"),f.Ib(),f.lc(839," and "),f.Jb(840,"code"),f.lc(841,"username"),f.Ib(),f.lc(842,") is available in our Request pipeline."),f.Ib(),f.Jb(843,"p"),f.lc(844,"Add the new "),f.Jb(845,"code"),f.lc(846,"JwtStrategy"),f.Ib(),f.lc(847," as a provider in the "),f.Jb(848,"code"),f.lc(849,"AuthModule"),f.Ib(),f.lc(850,":"),f.Ib(),f.Jb(851,"span",17),f.lc(852),f.Vb(853,"extension"),f.Hb(854,"app-tabs",null,50),f.Ib(),f.Jb(856,"pre"),f.Jb(857,"code",19),f.lc(858,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(859,"pre"),f.Jb(860,"code",19),f.lc(861,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),f.Ib(),f.Ib(),f.Jb(862,"p"),f.lc(863,"By importing the same secret used when we signed the JWT, we ensure that the "),f.Jb(864,"strong"),f.lc(865,"verify"),f.Ib(),f.lc(866," phase performed by Passport, and the "),f.Jb(867,"strong"),f.lc(868,"sign"),f.Ib(),f.lc(869," phase performed in our AuthService, use a common secret."),f.Ib(),f.Jb(870,"p"),f.lc(871,"Finally, we define the "),f.Jb(872,"code"),f.lc(873,"JwtAuthGuard"),f.Ib(),f.lc(874," class which extends the built-in "),f.Jb(875,"code"),f.lc(876,"AuthGuard"),f.Ib(),f.lc(877,":"),f.Ib(),f.Jb(878,"span",17),f.lc(879),f.Vb(880,"extension"),f.Hb(881,"app-tabs",null,51),f.Ib(),f.Jb(883,"pre"),f.Jb(884,"code",19),f.lc(885,"\nimport { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n"),f.Ib(),f.Ib(),f.Jb(886,"h4",52),f.Jb(887,"span"),f.lc(888,"Implement protected route and JWT strategy guards"),f.Ib(),f.Ib(),f.Jb(889,"p"),f.lc(890,"We can now implement our protected route and its associated Guard."),f.Ib(),f.Jb(891,"p"),f.lc(892,"Open the "),f.Jb(893,"code"),f.lc(894,"app.controller.ts"),f.Ib(),f.lc(895," file and update it as shown below:"),f.Ib(),f.Jb(896,"span",17),f.lc(897),f.Vb(898,"extension"),f.Hb(899,"app-tabs",null,53),f.Ib(),f.Jb(901,"pre"),f.Jb(902,"code",19),f.lc(903,"\nimport { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(904,"pre"),f.Jb(905,"code",19),f.lc(906,"\nimport { Controller, Dependencies, Bind, Get, Request, Post, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Dependencies(AuthService)\n@Controller()\nexport class AppController {\n  constructor(authService) {\n    this.authService = authService;\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  @Bind(Request())\n  async login(req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @Bind(Request())\n  getProfile(req) {\n    return req.user;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(907,"p"),f.lc(908,"Once again, we're applying the "),f.Jb(909,"code"),f.lc(910,"AuthGuard"),f.Ib(),f.lc(911," that the "),f.Jb(912,"code"),f.lc(913,"@nestjs/passport"),f.Ib(),f.lc(914," module has automatically provisioned for us when we configured the passport-jwt module. This Guard is referenced by its default name, "),f.Jb(915,"code"),f.lc(916,"jwt"),f.Ib(),f.lc(917,". When our "),f.Jb(918,"code"),f.lc(919,"GET /profile"),f.Ib(),f.lc(920," route is hit, the Guard will automatically invoke our passport-jwt custom configured logic, validating the JWT, and assigning the "),f.Jb(921,"code"),f.lc(922,"user"),f.Ib(),f.lc(923," property to the "),f.Jb(924,"code"),f.lc(925,"Request"),f.Ib(),f.lc(926," object."),f.Ib(),f.Jb(927,"p"),f.lc(928,"Ensure the app is running, and test the routes using "),f.Jb(929,"code"),f.lc(930,"cURL"),f.Ib(),f.lc(931,"."),f.Ib(),f.Jb(932,"pre"),f.Jb(933,"code",14),f.lc(934,'\n$ # GET /profile\n$ curl http://localhost:3000/profile\n$ # result -> {"statusCode":401,"error":"Unauthorized"}\n\n$ # POST /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n$ # result -> {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm... }\n\n$ # GET /profile using access_token returned from previous step as bearer code\n$ curl http://localhost:3000/profile -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm..."\n$ # result -> {"userId":1,"username":"john"}\n'),f.Ib(),f.Ib(),f.Jb(935,"p"),f.lc(936,"Note that in the "),f.Jb(937,"code"),f.lc(938,"AuthModule"),f.Ib(),f.lc(939,", we configured the JWT to have an expiration of "),f.Jb(940,"code"),f.lc(941,"60 seconds"),f.Ib(),f.lc(942,". This is probably too short an expiration, and dealing with the details of token expiration and refresh is beyond the scope of this article. However, we chose that to demonstrate an important quality of JWTs and the passport-jwt strategy. If you wait 60 seconds after authenticating before attempting a "),f.Jb(943,"code"),f.lc(944,"GET /profile"),f.Ib(),f.lc(945," request, you'll receive a "),f.Jb(946,"code"),f.lc(947,"401 Unauthorized"),f.Ib(),f.lc(948," response. This is because Passport automatically checks the JWT for its expiration time, saving you the trouble of doing so in your application."),f.Ib(),f.Jb(949,"p"),f.lc(950,"We've now completed our JWT authentication implementation. JavaScript clients (such as Angular/React/Vue), and other JavaScript apps, can now authenticate and communicate securely with our API Server. "),f.Ib(),f.Jb(951,"h4",54),f.Jb(952,"span"),f.lc(953,"Example"),f.Ib(),f.Ib(),f.Jb(954,"p"),f.lc(955,"You can find a complete version of the code in this chapter "),f.Jb(956,"a",10),f.lc(957,"here"),f.Ib(),f.lc(958,"."),f.Ib(),f.Jb(959,"h4",55),f.Jb(960,"span"),f.lc(961,"Extending guards"),f.Ib(),f.Ib(),f.Jb(962,"p"),f.lc(963,"In most cases, using a provided "),f.Jb(964,"code"),f.lc(965,"AuthGuard"),f.Ib(),f.lc(966," class is sufficient. However, there might be use-cases when you would like to simply extend the default error handling or authentication logic. For this, you can extend the built-in class and override methods within a sub-class."),f.Ib(),f.Jb(967,"pre"),f.Jb(968,"code",19),f.lc(969,"\nimport {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(970,"p"),f.lc(971,"In addition to extending the default error handling and authentication logic, we can allow authentication to go through a chain of strategies. The first strategy to succeed, redirect, or error will halt the chain. Authentication failures will proceed through each strategy in series, ultimately failing if all strategies fail."),f.Ib(),f.Jb(972,"pre"),f.Jb(973,"code",19),f.lc(974,"\nexport class JwtAuthGuard extends AuthGuard(['strategy_jwt_1', 'strategy_jwt_2', '...']) { ... }\n"),f.Ib(),f.Ib(),f.Jb(975,"h4",56),f.Jb(976,"span"),f.lc(977,"Enable authentication globally"),f.Ib(),f.Ib(),f.Jb(978,"p"),f.lc(979,"If the vast of your endpoints should be protected by default, you can register the authentication guard as a "),f.Jb(980,"a",57),f.lc(981,"global guard"),f.Ib(),f.lc(982," and instead of using "),f.Jb(983,"code"),f.lc(984,"@UseGuards()"),f.Ib(),f.lc(985," decorator on top of each controller, you could simply flag which routes should be public."),f.Ib(),f.Jb(986,"p"),f.lc(987,"First, register the "),f.Jb(988,"code"),f.lc(989,"JwtAuthGuard"),f.Ib(),f.lc(990," as a global guard using the following construction (in any module):"),f.Ib(),f.Jb(991,"pre"),f.Jb(992,"code",19),f.lc(993,"\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: JwtAuthGuard,\n  },\n],\n"),f.Ib(),f.Ib(),f.Jb(994,"p"),f.lc(995,"With this in place, Nest will automatically bind "),f.Jb(996,"code"),f.lc(997,"JwtAuthGuard"),f.Ib(),f.lc(998," to all endpoints."),f.Ib(),f.Jb(999,"p"),f.lc(1e3,"Now we must provide a mechanism for declaring routes as public. For this, we can create a custom decorator using the "),f.Jb(1001,"code"),f.lc(1002,"SetMetadata"),f.Ib(),f.lc(1003," decorator factory function."),f.Ib(),f.Jb(1004,"pre"),f.Jb(1005,"code",19),f.lc(1006,"\nimport { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n"),f.Ib(),f.Ib(),f.Jb(1007,"p"),f.lc(1008,"In the file above, we exported two constants. One being our metadata key named "),f.Jb(1009,"code"),f.lc(1010,"IS_PUBLIC_KEY"),f.Ib(),f.lc(1011,", and the other being our new decorator itself that we\u2019re going to call "),f.Jb(1012,"code"),f.lc(1013,"Public"),f.Ib(),f.lc(1014," (you can alternatively name it "),f.Jb(1015,"code"),f.lc(1016,"SkipAuth"),f.Ib(),f.lc(1017," or "),f.Jb(1018,"code"),f.lc(1019,"AllowAnon"),f.Ib(),f.lc(1020,", whatever fits your project)."),f.Ib(),f.Jb(1021,"p"),f.lc(1022,"Now that we have a custom "),f.Jb(1023,"code"),f.lc(1024,"@Public()"),f.Ib(),f.lc(1025," decorator, we can use it to decorate any method, as follows:"),f.Ib(),f.Jb(1026,"pre"),f.Jb(1027,"code",19),f.lc(1028,"\n@Public()\n@Get()\nfindAll() {\n  return [];\n}\n"),f.Ib(),f.Ib(),f.Jb(1029,"p"),f.lc(1030,"Lastly, we need the "),f.Jb(1031,"code"),f.lc(1032,"JwtAuthGuard"),f.Ib(),f.lc(1033," to return "),f.Jb(1034,"code"),f.lc(1035,"true"),f.Ib(),f.lc(1036," when the "),f.Jb(1037,"code"),f.lc(1038,'"isPublic"'),f.Ib(),f.lc(1039," metadata is found. For this, we'll use the "),f.Jb(1040,"code"),f.lc(1041,"Reflector"),f.Ib(),f.lc(1042," class (read more "),f.Jb(1043,"a",58),f.lc(1044,"here"),f.Ib(),f.lc(1045,")."),f.Ib(),f.Jb(1046,"pre"),f.Jb(1047,"code",19),f.lc(1048,"\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(1049,"h4",59),f.Jb(1050,"span"),f.lc(1051,"Request-scoped strategies"),f.Ib(),f.Ib(),f.Jb(1052,"p"),f.lc(1053,"The passport API is based on registering strategies to the global instance of the library. Therefore strategies are not designed to have request-dependent options or to be dynamically instantiated per request (read more about the "),f.Jb(1054,"a",60),f.lc(1055,"request-scoped"),f.Ib(),f.lc(1056,' providers). When you configure your strategy to be request-scoped, Nest will never instantiate it since it\'s not tied to any specific route. There is no physical way to determine which "request-scoped" strategies should be executed per request.'),f.Ib(),f.Jb(1057,"p"),f.lc(1058,"However, there are ways to dynamically resolve request-scoped providers within the strategy. For this, we leverage the "),f.Jb(1059,"a",61),f.lc(1060,"module reference"),f.Ib(),f.lc(1061," feature."),f.Ib(),f.Jb(1062,"p"),f.lc(1063,"First, open the "),f.Jb(1064,"code"),f.lc(1065,"local.strategy.ts"),f.Ib(),f.lc(1066," file and inject the "),f.Jb(1067,"code"),f.lc(1068,"ModuleRef"),f.Ib(),f.lc(1069," in the normal way:"),f.Ib(),f.Jb(1070,"pre"),f.Jb(1071,"code",19),f.lc(1072,"\nconstructor(private moduleRef: ModuleRef) {\n  super({\n    passReqToCallback: true,\n  });\n}\n"),f.Ib(),f.Ib(),f.Jb(1073,"blockquote",27),f.Jb(1074,"strong"),f.lc(1075,"Hint"),f.Ib(),f.lc(1076," The "),f.Jb(1077,"code"),f.lc(1078,"ModuleRef"),f.Ib(),f.lc(1079," class is imported from the "),f.Jb(1080,"code"),f.lc(1081,"@nestjs/core"),f.Ib(),f.lc(1082," package.\n"),f.Ib(),f.Jb(1083,"p"),f.lc(1084,"Be sure to set the "),f.Jb(1085,"code"),f.lc(1086,"passReqToCallback"),f.Ib(),f.lc(1087," configuration property to "),f.Jb(1088,"code"),f.lc(1089,"true"),f.Ib(),f.lc(1090,", as shown above."),f.Ib(),f.Jb(1091,"p"),f.lc(1092,"In the next step, the request instance will be used to obtain the current context identifier, instead of generating a new one (read more about request context "),f.Jb(1093,"a",62),f.lc(1094,"here"),f.Ib(),f.lc(1095,")."),f.Ib(),f.Jb(1096,"p"),f.lc(1097,"Now, inside the "),f.Jb(1098,"code"),f.lc(1099,"validate()"),f.Ib(),f.lc(1100," method of the "),f.Jb(1101,"code"),f.lc(1102,"LocalStrategy"),f.Ib(),f.lc(1103," class, use the "),f.Jb(1104,"code"),f.lc(1105,"getByRequest()"),f.Ib(),f.lc(1106," method of the "),f.Jb(1107,"code"),f.lc(1108,"ContextIdFactory"),f.Ib(),f.lc(1109," class to create a context id based on the request object, and pass this to the "),f.Jb(1110,"code"),f.lc(1111,"resolve()"),f.Ib(),f.lc(1112," call:"),f.Ib(),f.Jb(1113,"pre"),f.Jb(1114,"code",19),f.lc(1115,'\nasync validate(\n  request: Request,\n  username: string,\n  password: string,\n) {\n  const contextId = ContextIdFactory.getByRequest(request);\n  // "AuthService" is a request-scoped provider\n  const authService = await this.moduleRef.resolve(AuthService, contextId);\n  ...\n}\n'),f.Ib(),f.Ib(),f.Jb(1116,"p"),f.lc(1117,"In the example above, the "),f.Jb(1118,"code"),f.lc(1119,"resolve()"),f.Ib(),f.lc(1120," method will asynchronously return the request-scoped instance of the "),f.Jb(1121,"code"),f.lc(1122,"AuthService"),f.Ib(),f.lc(1123," provider (we assumed that "),f.Jb(1124,"code"),f.lc(1125,"AuthService"),f.Ib(),f.lc(1126," is marked as a request-scoped provider)."),f.Ib(),f.Jb(1127,"h4",63),f.Jb(1128,"span"),f.lc(1129,"Customize Passport"),f.Ib(),f.Ib(),f.Jb(1130,"p"),f.lc(1131,"Any standard Passport customization options can be passed the same way, using the "),f.Jb(1132,"code"),f.lc(1133,"register()"),f.Ib(),f.lc(1134," method. The available options depend on the strategy being implemented. For example:"),f.Ib(),f.Jb(1135,"pre"),f.Jb(1136,"code",19),f.lc(1137,"\nPassportModule.register({ session: true });\n"),f.Ib(),f.Ib(),f.Jb(1138,"p"),f.lc(1139,"You can also pass strategies an options object in their constructors to configure them.\nFor the local strategy you can pass e.g.:"),f.Ib(),f.Jb(1140,"pre"),f.Jb(1141,"code",19),f.lc(1142,"\nconstructor(private authService: AuthService) {\n  super({\n    usernameField: 'email',\n    passwordField: 'password',\n  });\n}\n");f.Ib(),f.Ib(),f.Jb(1143,"p"),f.lc(1144,"Take a look at the official "),f.Jb(1145,"a",64),f.lc(1146,"Passport Website"),f.Ib(),f.lc(1147," for property names."),f.Ib(),f.Jb(1148,"h4",65),f.Jb(1149,"span"),f.lc(1150,"Named strategies"),f.Ib(),f.Ib(),f.Jb(1151,"p"),f.lc(1152,"When implementing a strategy, you can provide a name for it by passing a second argument to the "),f.Jb(1153,"code"),f.lc(1154,"PassportStrategy"),f.Ib(),f.lc(1155," function. If you don't do this, each strategy will have a default name (e.g., 'jwt' for jwt-strategy):"),f.Ib(),f.Jb(1156,"pre"),f.Jb(1157,"code",19),f.lc(1158,"\nexport class JwtStrategy extends PassportStrategy(Strategy, 'myjwt')\n"),f.Ib(),f.Ib(),f.Jb(1159,"p"),f.lc(1160,"Then, you refer to this via a decorator like "),f.Jb(1161,"code"),f.lc(1162,"@UseGuards(AuthGuard('myjwt'))"),f.Ib(),f.lc(1163,"."),f.Ib(),f.Jb(1164,"h4",66),f.Jb(1165,"span"),f.lc(1166,"GraphQL"),f.Ib(),f.Ib(),f.Jb(1167,"p"),f.lc(1168,"In order to use an AuthGuard with "),f.Jb(1169,"a",67),f.lc(1170,"GraphQL"),f.Ib(),f.lc(1171,", extend the built-in AuthGuard class and override the getRequest() method."),f.Ib(),f.Jb(1172,"pre"),f.Jb(1173,"code",19),f.lc(1174,"\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(1175,"p"),f.lc(1176,"To get the current authenticated user in your graphql resolver, you can define a "),f.Jb(1177,"code"),f.lc(1178,"@CurrentUser()"),f.Ib(),f.lc(1179," decorator:"),f.Ib(),f.Jb(1180,"pre"),f.Jb(1181,"code",19),f.lc(1182,"\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\nexport const CurrentUser = createParamDecorator(\n  (data: unknown, context: ExecutionContext) => {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req.user;\n  },\n);\n"),f.Ib(),f.Ib(),f.Jb(1183,"p"),f.lc(1184,"To use above decorator in your resolver, be sure to include it as a parameter of your query or mutation:"),f.Ib(),f.Jb(1185,"pre"),f.Jb(1186,"code",19),f.lc(1187,"\n@Query(returns => User)\n@UseGuards(GqlAuthGuard)\nwhoAmI(@CurrentUser() user: User) {\n  return this.usersService.findById(user.id);\n}\n"),f.Ib(),f.Ib(),f.Ib()}if(2&e){var o=f.ec(160),n=f.ec(185),s=f.ec(207),r=f.ec(238),a=f.ec(263),c=f.ec(357),i=f.ec(436),l=f.ec(508),b=f.ec(594),d=f.ec(644),u=f.ec(674),p=f.ec(707),h=f.ec(743),m=f.ec(855),I=f.ec(882),J=f.ec(900);f.wb(157),f.nc(" ",f.Wb(158,74,"users/users.service",o.isJsActive),"\n"),f.wb(4),f.yb("hide",o.isJsActive),f.wb(3),f.yb("hide",!o.isJsActive),f.wb(18),f.nc(" ",f.Wb(183,77,"users/users.module",n.isJsActive),"\n"),f.wb(4),f.yb("hide",n.isJsActive),f.wb(3),f.yb("hide",!n.isJsActive),f.wb(15),f.nc(" ",f.Wb(205,80,"auth/auth.service",s.isJsActive),"\n"),f.wb(4),f.yb("hide",s.isJsActive),f.wb(3),f.yb("hide",!s.isJsActive),f.wb(24),f.nc(" ",f.Wb(236,83,"auth/auth.module",r.isJsActive),"\n"),f.wb(4),f.yb("hide",r.isJsActive),f.wb(3),f.yb("hide",!r.isJsActive),f.wb(18),f.nc(" ",f.Wb(261,86,"auth/local.strategy",a.isJsActive),"\n"),f.wb(4),f.yb("hide",a.isJsActive),f.wb(3),f.yb("hide",!a.isJsActive),f.wb(22),f.oc("super(","{"," usernameField: 'email' ","}",")"),f.wb(65),f.nc(" ",f.Wb(355,89,"auth/auth.module",c.isJsActive),"\n"),f.wb(4),f.yb("hide",c.isJsActive),f.wb(3),f.yb("hide",!c.isJsActive),f.wb(72),f.nc(" ",f.Wb(434,92,"app.controller",i.isJsActive),"\n"),f.wb(4),f.yb("hide",i.isJsActive),f.wb(3),f.yb("hide",!i.isJsActive),f.wb(65),f.nc(" ",f.Wb(506,95,"auth/local-auth.guard",l.isJsActive),"\n"),f.wb(86),f.nc(" ",f.Wb(592,98,"auth/auth.service",b.isJsActive),"\n"),f.wb(4),f.yb("hide",b.isJsActive),f.wb(3),f.yb("hide",!b.isJsActive),f.wb(43),f.nc(" ",f.Wb(642,101,"auth/constants",d.isJsActive),"\n"),f.wb(4),f.yb("hide",d.isJsActive),f.wb(3),f.yb("hide",!d.isJsActive),f.wb(23),f.nc(" ",f.Wb(672,104,"auth/auth.module",u.isJsActive),"\n"),f.wb(4),f.yb("hide",u.isJsActive),f.wb(3),f.yb("hide",!u.isJsActive),f.wb(26),f.nc(" ",f.Wb(705,107,"app.controller",p.isJsActive),"\n"),f.wb(4),f.yb("hide",p.isJsActive),f.wb(3),f.yb("hide",!p.isJsActive),f.wb(29),f.nc(" ",f.Wb(741,110,"auth/jwt.strategy",h.isJsActive),"\n"),f.wb(4),f.yb("hide",h.isJsActive),f.wb(3),f.yb("hide",!h.isJsActive),f.wb(105),f.nc(" ",f.Wb(853,113,"auth/auth.module",m.isJsActive),"\n"),f.wb(4),f.yb("hide",m.isJsActive),f.wb(3),f.yb("hide",!m.isJsActive),f.wb(20),f.nc(" ",f.Wb(880,116,"auth/jwt-auth.guard",I.isJsActive),"\n"),f.wb(18),f.nc(" ",f.Wb(898,119,"app.controller",J.isJsActive),"\n"),f.wb(4),f.yb("hide",J.isJsActive),f.wb(3),f.yb("hide",!J.isJsActive)}},directives:[g.a,y.a,w.a,m.f],pipes:[v.a],encapsulation:2,changeDetection:0}),a),x=f.Lb(A),j=((c=function(o){t(r,o);var s=n(r);function r(){return e(this,r),s.apply(this,arguments)}return r}(J.a)).\u0275fac=function(e){return S(e||c)},c.\u0275cmp=f.Ab({type:c,selectors:[["app-authorization"]],features:[f.ub],decls:579,vars:36,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/authorization.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","authorization"],["appAnchor","","id","basic-rbac-implementation"],["routerLink","/guards"],[1,"filename"],["appe8c0e756db2fece50bcedde36457e0e8ded6d4af",""],[1,"language-typescript"],[1,"info"],["app69c4db0c71433d5a6f7d8438076fa02f90cc3cb6",""],["app0a19cf27ef8e7a37f21da8f60d23e9a74a1a62ca",""],["app003a802d4b3a7f27b63e2cbd97b65efb5c9522d9",""],["href","/fundamentals/execution-context#reflection-and-metadata"],[1,"warning"],["routerLink","/security/authentication"],["appAnchor","","id","claims-based-authorization"],["href","/security/authorization#basic-rbac-implementation"],["app824e303d0bdd54b854675a89e73c2ced0e4b9ab6",""],["appAnchor","","id","integrating-casl"],["rel","nofollow","target","_blank","href","https://casl.js.org/"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types"],["rel","nofollow","target","_blank","href","https://casl.js.org/v5/en/guide/intro"],["appAnchor","","id","advanced-implementing-a-policiesguard"],["routerLink","/fundamentals/module-ref"]],template:function(e,t){if(1&e){f.Jb(0,"div",0,1),f.Jb(2,"div",2),f.Jb(3,"a",3),f.Hb(4,"i",4),f.Ib(),f.Ib(),f.Jb(5,"h3",5),f.lc(6,"Authorization"),f.Ib(),f.Jb(7,"p"),f.Jb(8,"strong"),f.lc(9,"Authorization"),f.Ib(),f.lc(10," refers to the process that determines what a user is able to do. For example, an administrative user is allowed to create, edit, and delete posts. A non-administrative user is only authorized to read the posts."),f.Ib(),f.Jb(11,"p"),f.lc(12,"Authorization is orthogonal and independent from authentication. However, authorization requires an authentication mechanism."),f.Ib(),f.Jb(13,"p"),f.lc(14,"There are many different approaches and strategies to handle authorization. The approach taken for any project depends on its particular application requirements. This chapter presents a few approaches to authorization that can be adapted to a variety of different requirements."),f.Ib(),f.Jb(15,"h4",6),f.Jb(16,"span"),f.lc(17,"Basic RBAC implementation"),f.Ib(),f.Ib(),f.Jb(18,"p"),f.lc(19,"Role-based access control ("),f.Jb(20,"strong"),f.lc(21,"RBAC"),f.Ib(),f.lc(22,") is a policy-neutral access-control mechanism defined around roles and privileges. In this section, we'll demonstrate how to implement a very basic RBAC mechanism using Nest "),f.Jb(23,"a",7),f.lc(24,"guards"),f.Ib(),f.lc(25,"."),f.Ib(),f.Jb(26,"p"),f.lc(27,"First, let's create a "),f.Jb(28,"code"),f.lc(29,"Role"),f.Ib(),f.lc(30," enum representing roles in the system:"),f.Ib(),f.Jb(31,"span",8),f.lc(32),f.Vb(33,"extension"),f.Hb(34,"app-tabs",null,9),f.Ib(),f.Jb(36,"pre"),f.Jb(37,"code",10),f.lc(38,"\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n"),f.Ib(),f.Ib(),f.Jb(39,"blockquote",11),f.Jb(40,"strong"),f.lc(41,"Hint"),f.Ib(),f.lc(42," In more sophisticated systems, you may store roles within a database, or pull them from the external authentication provider.\n"),f.Ib(),f.Jb(43,"p"),f.lc(44,"With this in place, we can create a "),f.Jb(45,"code"),f.lc(46,"@Roles()"),f.Ib(),f.lc(47," decorator. This decorator allows specifying what roles are required to access specific resources."),f.Ib(),f.Jb(48,"span",8),f.lc(49),f.Vb(50,"extension"),f.Hb(51,"app-tabs",null,12),f.Ib(),f.Jb(53,"pre"),f.Jb(54,"code",10),f.lc(55,"\nimport { SetMetadata } from '@nestjs/common';\nimport { Role } from '../enums/role.enum';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);\n"),f.Ib(),f.Ib(),f.Jb(56,"pre"),f.Jb(57,"code",10),f.lc(58,"\nimport { SetMetadata } from '@nestjs/common';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles) => SetMetadata(ROLES_KEY, roles);\n"),f.Ib(),f.Ib(),f.Jb(59,"p"),f.lc(60,"Now that we have a custom "),f.Jb(61,"code"),f.lc(62,"@Roles()"),f.Ib(),f.lc(63," decorator, we can use it to decorate any route handler."),f.Ib(),f.Jb(64,"span",8),f.lc(65),f.Vb(66,"extension"),f.Hb(67,"app-tabs",null,13),f.Ib(),f.Jb(69,"pre"),f.Jb(70,"code",10),f.lc(71,"\n@Post()\n@Roles(Role.Admin)\ncreate(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),f.Ib(),f.Ib(),f.Jb(72,"pre"),f.Jb(73,"code",10),f.lc(74,"\n@Post()\n@Roles(Role.Admin)\n@Bind(Body())\ncreate(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),f.Ib(),f.Ib(),f.Jb(75,"p"),f.lc(76,"Finally, we create a "),f.Jb(77,"code"),f.lc(78,"RolesGuard"),f.Ib(),f.lc(79," class which will compare the roles assigned to the current user to the actual roles required by the current route being processed. In order to access the route's role(s) (custom metadata), we'll use the "),f.Jb(80,"code"),f.lc(81,"Reflector"),f.Ib(),f.lc(82," helper class, which is provided out of the box by the framework and exposed from the "),f.Jb(83,"code"),f.lc(84,"@nestjs/core"),f.Ib(),f.lc(85," package."),f.Ib(),f.Jb(86,"span",8),f.lc(87),f.Vb(88,"extension"),f.Hb(89,"app-tabs",null,14),f.Ib(),f.Jb(91,"pre"),f.Jb(92,"code",10),f.lc(93,"\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(94,"pre"),f.Jb(95,"code",10),f.lc(96,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\n@Dependencies(Reflector)\nexport class RolesGuard {\n  constructor(reflector) {\n    this.reflector = reflector;\n  }\n\n  canActivate(context) {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles.includes(role));\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(97,"blockquote",11),f.Jb(98,"strong"),f.lc(99,"Hint"),f.Ib(),f.lc(100," Refer to the "),f.Jb(101,"a",15),f.lc(102,"Reflection and metadata"),f.Ib(),f.lc(103," section of the Execution context chapter for more details on utilizing "),f.Jb(104,"code"),f.lc(105,"Reflector"),f.Ib(),f.lc(106," in a context-sensitive way.\n"),f.Ib(),f.Jb(107,"blockquote",16),f.Jb(108,"strong"),f.lc(109,"Notice"),f.Ib(),f.lc(110,' This example is named "'),f.Jb(111,"strong"),f.lc(112,"basic"),f.Ib(),f.lc(113,"\" as we only check for the presence of roles on the route handler level. In real-world applications, you may have endpoints/handlers that involve several operations, in which each of them requires a specific set of permissions. In this case, you'll have to provide a mechanism to check roles somewhere within your business-logic, making it somewhat harder to maintain as there will be no centralized place that associates permissions with specific actions.\n"),f.Ib(),f.Jb(114,"p"),f.lc(115,"In this example, we assumed that "),f.Jb(116,"code"),f.lc(117,"request.user"),f.Ib(),f.lc(118," contains the user instance and allowed roles (under the "),f.Jb(119,"code"),f.lc(120,"roles"),f.Ib(),f.lc(121," property). In your app, you will probably make that association in your custom "),f.Jb(122,"strong"),f.lc(123,"authentication guard"),f.Ib(),f.lc(124," - see "),f.Jb(125,"a",17),f.lc(126,"authentication"),f.Ib(),f.lc(127," chapter for more details."),f.Ib(),f.Jb(128,"p"),f.lc(129,"To make sure this example works, your "),f.Jb(130,"code"),f.lc(131,"User"),f.Ib(),f.lc(132," class must look as follows:"),f.Ib(),f.Jb(133,"pre"),f.Jb(134,"code",10),f.lc(135,"\nclass User {\n  // ...other properties\n  roles: Role[];\n}\n"),f.Ib(),f.Ib(),f.Jb(136,"p"),f.lc(137,"Lastly, make sure to register the "),f.Jb(138,"code"),f.lc(139,"RolesGuard"),f.Ib(),f.lc(140,", for example, at the controller level, or globally:"),f.Ib(),f.Jb(141,"pre"),f.Jb(142,"code",10),f.lc(143,"\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: RolesGuard,\n  },\n],\n"),f.Ib(),f.Ib(),f.Jb(144,"p"),f.lc(145,"When a user with insufficient privileges requests an endpoint, Nest automatically returns the following response:"),f.Ib(),f.Jb(146,"pre"),f.Jb(147,"code",10),f.lc(148,'\n{\n  "statusCode": 403,\n  "message": "Forbidden resource",\n  "error": "Forbidden"\n}\n'),f.Ib(),f.Ib(),f.Jb(149,"blockquote",11),f.Jb(150,"strong"),f.lc(151,"Hint"),f.Ib(),f.lc(152," If you want to return a different error response, you should throw your own specific exception instead of returning a boolean value.\n"),f.Ib(),f.Jb(153,"h4",18),f.Jb(154,"span"),f.lc(155,"Claims-based authorization"),f.Ib(),f.Ib(),f.Jb(156,"p"),f.lc(157,"When an identity is created it may be assigned one or more claims issued by a trusted party. A claim is a name-value pair that represents what the subject can do, not what the subject is."),f.Ib(),f.Jb(158,"p"),f.lc(159,"To implement a Claims-based authorization in Nest, you can follow the same steps we have shown above in the "),f.Jb(160,"a",19),f.lc(161,"RBAC"),f.Ib(),f.lc(162," section with one significant difference: instead of checking for specific roles, you should compare "),f.Jb(163,"strong"),f.lc(164,"permissions"),f.Ib(),f.lc(165,". Every user would have a set of permissions assigned. Likewise, each resource/endpoint would define what permissions are required (for example, through a dedicated "),f.Jb(166,"code"),f.lc(167,"@RequirePermissions()"),f.Ib(),f.lc(168," decorator) to access them."),f.Ib(),f.Jb(169,"span",8),f.lc(170),f.Vb(171,"extension"),f.Hb(172,"app-tabs",null,20),f.Ib(),f.Jb(174,"pre"),f.Jb(175,"code",10),f.lc(176,"\n@Post()\n@RequirePermissions(Permission.CREATE_CAT)\ncreate(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),f.Ib(),f.Ib(),f.Jb(177,"pre"),f.Jb(178,"code",10),f.lc(179,"\n@Post()\n@RequirePermissions(Permission.CREATE_CAT)\n@Bind(Body())\ncreate(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),f.Ib(),f.Ib(),f.Jb(180,"blockquote",11),f.Jb(181,"strong"),f.lc(182,"Hint"),f.Ib(),f.lc(183," In the example above, "),f.Jb(184,"code"),f.lc(185,"Permission"),f.Ib(),f.lc(186," (similar to "),f.Jb(187,"code"),f.lc(188,"Role"),f.Ib(),f.lc(189," we have shown in RBAC section) is a TypeScript enum that contains all the permissions available in your system.\n"),f.Ib(),f.Jb(190,"h4",21),f.Jb(191,"span"),f.lc(192,"Integrating CASL"),f.Ib(),f.Ib(),f.Jb(193,"p"),f.Jb(194,"a",22),f.lc(195,"CASL"),f.Ib(),f.lc(196," is an isomorphic authorization library which restricts what resources a given client is allowed to access. It's designed to be incrementally adoptable and can easily scale between a simple claim based and fully featured subject and attribute based authorization."),f.Ib(),f.Jb(197,"p"),f.lc(198,"To start, first install the "),f.Jb(199,"code"),f.lc(200,"@casl/ability"),f.Ib(),f.lc(201," package:"),f.Ib(),f.Jb(202,"pre"),f.Jb(203,"code",23),f.lc(204,"\n$ npm i @casl/ability\n"),f.Ib(),f.Ib(),f.Jb(205,"blockquote",11),f.Jb(206,"strong"),f.lc(207,"Hint"),f.Ib(),f.lc(208," In this example, we chose CASL, but you can use any other library like "),f.Jb(209,"code"),f.lc(210,"accesscontrol"),f.Ib(),f.lc(211," or "),f.Jb(212,"code"),f.lc(213,"acl"),f.Ib(),f.lc(214,", depending on your preferences and project needs.\n"),f.Ib(),f.Jb(215,"p"),f.lc(216,"Once the installation is complete, for the sake of illustrating the mechanics of CASL, we'll define two entity classes: "),f.Jb(217,"code"),f.lc(218,"User"),f.Ib(),f.lc(219," and "),f.Jb(220,"code"),f.lc(221,"Article"),f.Ib(),f.lc(222,"."),f.Ib(),f.Jb(223,"pre"),f.Jb(224,"code",10),f.lc(225,"\nclass User {\n  id: number;\n  isAdmin: boolean;\n}\n"),f.Ib(),f.Ib(),f.Jb(226,"p"),f.Jb(227,"code"),f.lc(228,"User"),f.Ib(),f.lc(229," class consists of two properties, "),f.Jb(230,"code"),f.lc(231,"id"),f.Ib(),f.lc(232,", which is a unique user identifier, and "),f.Jb(233,"code"),f.lc(234,"isAdmin"),f.Ib(),f.lc(235,", indicating whether a user has administrator privileges."),f.Ib(),f.Jb(236,"pre"),f.Jb(237,"code",10),f.lc(238,"\nclass Article {\n  id: number;\n  isPublished: boolean;\n  authorId: string;\n}\n"),f.Ib(),f.Ib(),f.Jb(239,"p"),f.Jb(240,"code"),f.lc(241,"Article"),f.Ib(),f.lc(242," class has three properties, respectively "),f.Jb(243,"code"),f.lc(244,"id"),f.Ib(),f.lc(245,", "),f.Jb(246,"code"),f.lc(247,"isPublished"),f.Ib(),f.lc(248,", and "),f.Jb(249,"code"),f.lc(250,"authorId"),f.Ib(),f.lc(251,". "),f.Jb(252,"code"),f.lc(253,"id"),f.Ib(),f.lc(254," is a unique article identifier, "),f.Jb(255,"code"),f.lc(256,"isPublished"),f.Ib(),f.lc(257," indicates whether an article was already published or not, and "),f.Jb(258,"code"),f.lc(259,"authorId"),f.Ib(),f.lc(260,", which is an ID of a user who wrote the article."),f.Ib(),f.Jb(261,"p"),f.lc(262,"Now let's review and refine our requirements for this example:"),f.Ib(),f.Jb(263,"ul"),f.Jb(264,"li"),f.lc(265,"Admins can manage (create/read/update/delete) all entities"),f.Ib(),f.Jb(266,"li"),f.lc(267,"Users have read-only access to everything"),f.Ib(),f.Jb(268,"li"),f.lc(269,"Users can update their articles ("),f.Jb(270,"code"),f.lc(271,"article.authorId === userId"),f.Ib(),f.lc(272,")"),f.Ib(),f.Jb(273,"li"),f.lc(274,"Articles that are published already cannot be removed ("),f.Jb(275,"code"),f.lc(276,"article.isPublished === true"),f.Ib(),f.lc(277,")"),f.Ib(),f.Ib(),f.Jb(278,"p"),f.lc(279,"With this in mind, we can start off by creating an "),f.Jb(280,"code"),f.lc(281,"Action"),f.Ib(),f.lc(282," enum representing all possible actions that the users can perform with entities:"),f.Ib(),f.Jb(283,"pre"),f.Jb(284,"code",10),f.lc(285,"\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n"),f.Ib(),f.Ib(),f.Jb(286,"blockquote",16),f.Jb(287,"strong"),f.lc(288,"Notice"),f.Ib(),f.Jb(289,"code"),f.lc(290,"manage"),f.Ib(),f.lc(291,' is a special keyword in CASL which represents "any" action.\n'),f.Ib(),f.Jb(292,"p"),f.lc(293,"To encapsulate CASL library, let's generate the "),f.Jb(294,"code"),f.lc(295,"CaslModule"),f.Ib(),f.lc(296," and "),f.Jb(297,"code"),f.lc(298,"CaslAbilityFactory"),f.Ib(),f.lc(299," now."),f.Ib(),f.Jb(300,"pre"),f.Jb(301,"code",23),f.lc(302,"\n$ nest g module casl\n$ nest g class casl/casl-ability.factory\n"),f.Ib(),f.Ib(),f.Jb(303,"p"),f.lc(304,"With this in place, we can define the "),f.Jb(305,"code"),f.lc(306,"createForUser()"),f.Ib(),f.lc(307," method on the "),f.Jb(308,"code"),f.lc(309,"CaslAbilityFactory"),f.Ib(),f.lc(310,". This method will create the "),f.Jb(311,"code"),f.lc(312,"Ability"),f.Ib(),f.lc(313," object for a given user:"),f.Ib(),f.Jb(314,"pre"),f.Jb(315,"code",10),f.lc(316,"\ntype Subjects = InferSubjects<typeof Article | typeof User> | 'all';\n\nexport type AppAbility = Ability<[Action, Subjects]>;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder<\n      Ability<[Action, Subjects]>\n    >(Ability as AbilityClass<AppAbility>);\n\n    if (user.isAdmin) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can(Action.Read, 'all'); // read-only access to everything\n    }\n\n    can(Action.Update, Article, { authorId: user.id });\n    cannot(Action.Delete, Article, { isPublished: true });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: item => item.constructor as ExtractSubjectType<Subjects>\n    });\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(317,"blockquote",16),f.Jb(318,"strong"),f.lc(319,"Notice"),f.Ib(),f.Jb(320,"code"),f.lc(321,"all"),f.Ib(),f.lc(322,' is a special keyword in CASL that represents "any subject".\n'),f.Ib(),f.Jb(323,"blockquote",11),f.Jb(324,"strong"),f.lc(325,"Hint"),f.Ib(),f.Jb(326,"code"),f.lc(327,"Ability"),f.Ib(),f.lc(328,", "),f.Jb(329,"code"),f.lc(330,"AbilityBuilder"),f.Ib(),f.lc(331,", "),f.Jb(332,"code"),f.lc(333,"AbilityClass"),f.Ib(),f.lc(334,", and "),f.Jb(335,"code"),f.lc(336,"ExtractSubjectType"),f.Ib(),f.lc(337," classes are exported from the "),f.Jb(338,"code"),f.lc(339,"@casl/ability"),f.Ib(),f.lc(340," package.\n"),f.Ib(),f.Jb(341,"blockquote",11),f.Jb(342,"strong"),f.lc(343,"Hint"),f.Ib(),f.Jb(344,"code"),f.lc(345,"detectSubjectType"),f.Ib(),f.lc(346," option let CASL understand how to get subject type out of an object. For more information read "),f.Jb(347,"a",24),f.lc(348,"CASL documentation"),f.Ib(),f.lc(349," for details.\n"),f.Ib(),f.Jb(350,"p"),f.lc(351,"In the example above, we created the "),f.Jb(352,"code"),f.lc(353,"Ability"),f.Ib(),f.lc(354," instance using the "),f.Jb(355,"code"),f.lc(356,"AbilityBuilder"),f.Ib(),f.lc(357," class. As you probably guessed, "),f.Jb(358,"code"),f.lc(359,"can"),f.Ib(),f.lc(360," and "),f.Jb(361,"code"),f.lc(362,"cannot"),f.Ib(),f.lc(363," accept the same arguments but has different meanings, "),f.Jb(364,"code"),f.lc(365,"can"),f.Ib(),f.lc(366," allows to do an action on the specified subject and "),f.Jb(367,"code"),f.lc(368,"cannot"),f.Ib(),f.lc(369," forbids. Both may accept up to 4 arguments. To learn more about these functions, visit the official "),f.Jb(370,"a",25),f.lc(371,"CASL documentation"),f.Ib(),f.lc(372,"."),f.Ib(),f.Jb(373,"p"),f.lc(374,"Lastly, make sure to add the "),f.Jb(375,"code"),f.lc(376,"CaslAbilityFactory"),f.Ib(),f.lc(377," to the "),f.Jb(378,"code"),f.lc(379,"providers"),f.Ib(),f.lc(380," and "),f.Jb(381,"code"),f.lc(382,"exports"),f.Ib(),f.lc(383," arrays in the "),f.Jb(384,"code"),f.lc(385,"CaslModule"),f.Ib(),f.lc(386," module definition:"),f.Ib(),f.Jb(387,"pre"),f.Jb(388,"code",10),f.lc(389,"\nimport { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n"),f.Ib(),f.Ib(),f.Jb(390,"p"),f.lc(391,"With this in place, we can inject the "),f.Jb(392,"code"),f.lc(393,"CaslAbilityFactory"),f.Ib(),f.lc(394," to any class using standard constructor injection as long as the "),f.Jb(395,"code"),f.lc(396,"CaslModule"),f.Ib(),f.lc(397," is imported in the host context:"),f.Ib(),f.Jb(398,"pre"),f.Jb(399,"code",10),f.lc(400,"\nconstructor(private caslAbilityFactory: CaslAbilityFactory) {}\n"),f.Ib(),f.Ib(),f.Jb(401,"p"),f.lc(402,"Then use it in a class as follows."),f.Ib(),f.Jb(403,"pre"),f.Jb(404,"code",10),f.lc(405,"\nconst ability = this.caslAbilityFactory.createForUser(user);\nif (ability.can(Action.Read, 'all')) {\n  // \"user\" has read access to everything\n}\n"),f.Ib(),f.Ib(),f.Jb(406,"blockquote",11),f.Jb(407,"strong"),f.lc(408,"Hint"),f.Ib(),f.lc(409," Learn more about the "),f.Jb(410,"code"),f.lc(411,"Ability"),f.Ib(),f.lc(412," class in the official "),f.Jb(413,"a",25),f.lc(414,"CASL documentation"),f.Ib(),f.lc(415,".\n"),f.Ib(),f.Jb(416,"p"),f.lc(417,"For example, let's say we have a user who is not an admin. In this case, the user should be able to read articles, but creating new ones or removing the existing articles should be prohibited."),f.Ib(),f.Jb(418,"pre"),f.Jb(419,"code",10),f.lc(420,"\nconst user = new User();\nuser.isAdmin = false;\n\nconst ability = this.caslAbilityFactory.createForUser(user);\nability.can(Action.Read, Article); // true\nability.can(Action.Delete, Article); // false\nability.can(Action.Create, Article); // false\n"),f.Ib(),f.Ib(),f.Jb(421,"blockquote",11),f.Jb(422,"strong"),f.lc(423,"Hint"),f.Ib(),f.lc(424," Although both "),f.Jb(425,"code"),f.lc(426,"Ability"),f.Ib(),f.lc(427," and "),f.Jb(428,"code"),f.lc(429,"AbilityBuilder"),f.Ib(),f.lc(430," classes provide "),f.Jb(431,"code"),f.lc(432,"can"),f.Ib(),f.lc(433," and "),f.Jb(434,"code"),f.lc(435,"cannot"),f.Ib(),f.lc(436," methods, they have different purposes and accept slightly different arguments.\n"),f.Ib(),f.Jb(437,"p"),f.lc(438,"Also, as we have specified in our requirements, the user should be able to update its articles:"),f.Ib(),f.Jb(439,"pre"),f.Jb(440,"code",10),f.lc(441,"\nconst user = new User();\nuser.id = 1;\n\nconst article = new Article();\narticle.authorId = user.id;\n\nconst ability = this.caslAbilityFactory.createForUser(user);\nability.can(Action.Update, article); // true\n\narticle.authorId = 2;\nability.can(Action.Update, article); // false\n"),f.Ib(),f.Ib(),f.Jb(442,"p"),f.lc(443,"As you can see, "),f.Jb(444,"code"),f.lc(445,"Ability"),f.Ib(),f.lc(446," instance allows us to check permissions in pretty readable way. Likewise, "),f.Jb(447,"code"),f.lc(448,"AbilityBuilder"),f.Ib(),f.lc(449," allows us to define permissions (and specify various conditions) in a similar fashion. To find more examples, visit the official documentation."),f.Ib(),f.Jb(450,"h4",26),f.Jb(451,"span"),f.lc(452,"Advanced: Implementing a "),f.Jb(453,"code"),f.lc(454,"PoliciesGuard"),f.Ib(),f.Ib(),f.Ib(),f.Jb(455,"p"),f.lc(456,"In this section, we'll demonstrate how to build a somewhat more sophisticated guard, which checks if a user meets specific "),f.Jb(457,"strong"),f.lc(458,"authorization policies"),f.Ib(),f.lc(459," that can be configured on the method-level (you can extend it to respect policies configured on the class-level too). In this example, we are going to use the CASL package just for illustration purposes, but using this library is not required. Also, we will use the "),f.Jb(460,"code"),f.lc(461,"CaslAbilityFactory"),f.Ib(),f.lc(462," provider that we've created in the previous section."),f.Ib(),f.Jb(463,"p"),f.lc(464,"First, let's flesh out the requirements. The goal is to provide a mechanism that allows specifying policy checks per route handler. We will support both objects and functions (for simpler checks and for those who prefer more functional-style code)."),f.Ib(),f.Jb(465,"p"),f.lc(466,"Let's start off by defining interfaces for policy handlers:"),f.Ib(),f.Jb(467,"pre"),f.Jb(468,"code",10),f.lc(469,"\nimport { AppAbility } from '../casl/casl-ability.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n"),f.Ib(),f.Ib(),f.Jb(470,"p"),f.lc(471,"As mentioned above, we provided two possible ways of defining a policy handler, an object (instance of a class that implements the "),f.Jb(472,"code"),f.lc(473,"IPolicyHandler"),f.Ib(),f.lc(474," interface) and a function (which meets the "),f.Jb(475,"code"),f.lc(476,"PolicyHandlerCallback"),f.Ib(),f.lc(477," type)."),f.Ib(),f.Jb(478,"p"),f.lc(479,"With this in place, we can create a "),f.Jb(480,"code"),f.lc(481,"@CheckPolicies()"),f.Ib(),f.lc(482," decorator. This decorator allows specifying what policies have to be met to access specific resources."),f.Ib(),f.Jb(483,"pre"),f.Jb(484,"code",10),f.lc(485,"\nexport const CHECK_POLICIES_KEY = 'check_policy';\nexport const CheckPolicies = (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers);\n"),f.Ib(),f.Ib(),f.Jb(486,"p"),f.lc(487,"Now let's create a "),f.Jb(488,"code"),f.lc(489,"PoliciesGuard"),f.Ib(),f.lc(490," that will extract and execute all the policy handlers bound to a route handler."),f.Ib(),f.Jb(491,"pre"),f.Jb(492,"code",10),f.lc(493,"\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const policyHandlers =\n      this.reflector.get<PolicyHandler[]>(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.caslAbilityFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(494,"blockquote",11),f.Jb(495,"strong"),f.lc(496,"Hint"),f.Ib(),f.lc(497," In this example, we assumed that "),f.Jb(498,"code"),f.lc(499,"request.user"),f.Ib(),f.lc(500," contains the user instance. In your app, you will probably make that association in your custom "),f.Jb(501,"strong"),f.lc(502,"authentication guard"),f.Ib(),f.lc(503," - see "),f.Jb(504,"a",17),f.lc(505,"authentication"),f.Ib(),f.lc(506," chapter for more details.\n"),f.Ib(),f.Jb(507,"p"),f.lc(508,"Let's break this example down. The "),f.Jb(509,"code"),f.lc(510,"policyHandlers"),f.Ib(),f.lc(511," is an array of handlers assigned to the method through the "),f.Jb(512,"code"),f.lc(513,"@CheckPolicies()"),f.Ib(),f.lc(514," decorator. Next, we use the "),f.Jb(515,"code"),f.lc(516,"CaslAbilityFactory#create"),f.Ib(),f.lc(517," method which constructs the "),f.Jb(518,"code"),f.lc(519,"Ability"),f.Ib(),f.lc(520," object, allowing us to verify whether a user has sufficient permissions to perform specific actions. We are passing this object to the policy handler which is either a function or an instance of a class that implements the "),f.Jb(521,"code"),f.lc(522,"IPolicyHandler"),f.Ib(),f.lc(523,", exposing the "),f.Jb(524,"code"),f.lc(525,"handle()"),f.Ib(),f.lc(526," method that returns a boolean. Lastly, we use the "),f.Jb(527,"code"),f.lc(528,"Array#every"),f.Ib(),f.lc(529," method to make sure that every handler returned "),f.Jb(530,"code"),f.lc(531,"true"),f.Ib(),f.lc(532," value."),f.Ib(),f.Jb(533,"p"),f.lc(534,"Finally, to test this guard, bind it to any route handler, and register an inline policy handler (functional approach), as follows:"),f.Ib(),f.Jb(535,"pre"),f.Jb(536,"code",10),f.lc(537,"\n@Get()\n@UseGuards(PoliciesGuard)\n@CheckPolicies((ability: AppAbility) => ability.can(Action.Read, Article))\nfindAll() {\n  return this.articlesService.findAll();\n}\n"),f.Ib(),f.Ib(),f.Jb(538,"p"),f.lc(539,"Alternatively, we can define a class which implements the "),f.Jb(540,"code"),f.lc(541,"IPolicyHandler"),f.Ib(),f.lc(542," interface:"),f.Ib(),f.Jb(543,"pre"),f.Jb(544,"code",10),f.lc(545,"\nexport class ReadArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(Action.Read, Article);\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(546,"p"),f.lc(547,"And use it as follows:"),f.Ib(),f.Jb(548,"pre"),f.Jb(549,"code",10),f.lc(550,"\n@Get()\n@UseGuards(PoliciesGuard)\n@CheckPolicies(new ReadArticlePolicyHandler())\nfindAll() {\n  return this.articlesService.findAll();\n}\n"),f.Ib(),f.Ib(),f.Jb(551,"blockquote",16),f.Jb(552,"strong"),f.lc(553,"Notice"),f.Ib(),f.lc(554," Since we must instantiate the policy handler in-place using the "),f.Jb(555,"code"),f.lc(556,"new"),f.Ib(),f.lc(557," keyword, "),f.Jb(558,"code"),f.lc(559,"CreateArticlePolicyHandler"),f.Ib(),f.lc(560," class cannot use the Dependency Injection. This can be addressed with the "),f.Jb(561,"code");f.lc(562,"ModuleRef#get"),f.Ib(),f.lc(563," method (read more "),f.Jb(564,"a",27),f.lc(565,"here"),f.Ib(),f.lc(566,"). Basically, instead of registering functions and instances through the "),f.Jb(567,"code"),f.lc(568,"@CheckPolicies()"),f.Ib(),f.lc(569," decorator, you must allow passing a "),f.Jb(570,"code"),f.lc(571,"Type<IPolicyHandler>"),f.Ib(),f.lc(572,". Then, inside your guard, you could retrieve an instance using a type reference: "),f.Jb(573,"code"),f.lc(574,"moduleRef.get(YOUR_HANDLER_TYPE)"),f.Ib(),f.lc(575," or even dynamically instantiate it using the "),f.Jb(576,"code"),f.lc(577,"ModuleRef#create"),f.Ib(),f.lc(578," method.\n"),f.Ib(),f.Ib()}if(2&e){var o=f.ec(35),n=f.ec(52),s=f.ec(68),r=f.ec(90),a=f.ec(173);f.wb(32),f.nc(" ",f.Wb(33,21,"role.enum",o.isJsActive),"\n"),f.wb(17),f.nc(" ",f.Wb(50,24,"roles.decorator",n.isJsActive),"\n"),f.wb(4),f.yb("hide",n.isJsActive),f.wb(3),f.yb("hide",!n.isJsActive),f.wb(9),f.nc(" ",f.Wb(66,27,"cats.controller",s.isJsActive),"\n"),f.wb(4),f.yb("hide",s.isJsActive),f.wb(3),f.yb("hide",!s.isJsActive),f.wb(15),f.nc(" ",f.Wb(88,30,"roles.guard",r.isJsActive),"\n"),f.wb(4),f.yb("hide",r.isJsActive),f.wb(3),f.yb("hide",!r.isJsActive),f.wb(76),f.nc(" ",f.Wb(171,33,"cats.controller",a.isJsActive),"\n"),f.wb(4),f.yb("hide",a.isJsActive),f.wb(3),f.yb("hide",!a.isJsActive)}},directives:[g.a,m.f,y.a],pipes:[v.a],encapsulation:2,changeDetection:0}),c),S=f.Lb(j),k=((i=function(o){t(r,o);var s=n(r);function r(){return e(this,r),s.apply(this,arguments)}return r}(J.a)).\u0275fac=function(e){return T(e||i)},i.\u0275cmp=f.Ab({type:i,selectors:[["app-cors"]],features:[f.ub],decls:88,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/cors.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cors"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/cors"],["appAnchor","","id","getting-started"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/cors#configuration-options"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/cors#configuring-cors-asynchronously"],[1,"warning"]],template:function(e,t){1&e&&(f.Jb(0,"div",0,1),f.Jb(2,"div",2),f.Jb(3,"a",3),f.Hb(4,"i",4),f.Ib(),f.Ib(),f.Jb(5,"h3",5),f.lc(6,"CORS"),f.Ib(),f.Jb(7,"p"),f.lc(8,"Cross-origin resource sharing (CORS) is a mechanism that allows resources to be requested from another domain. Under the hood, Nest makes use of the Express "),f.Jb(9,"a",6),f.lc(10,"cors"),f.Ib(),f.lc(11," package. This package provides various options that you can customize based on your requirements."),f.Ib(),f.Jb(12,"h4",7),f.Jb(13,"span"),f.lc(14,"Getting started"),f.Ib(),f.Ib(),f.Jb(15,"p"),f.lc(16,"To enable CORS, call the "),f.Jb(17,"code"),f.lc(18,"enableCors()"),f.Ib(),f.lc(19," method on the Nest application object."),f.Ib(),f.Jb(20,"pre"),f.Jb(21,"code",8),f.lc(22,"\nconst app = await NestFactory.create(AppModule);\napp.enableCors();\nawait app.listen(3000);\n"),f.Ib(),f.Ib(),f.Jb(23,"p"),f.lc(24,"The "),f.Jb(25,"code"),f.lc(26,"enableCors()"),f.Ib(),f.lc(27," method takes an optional configuration object argument. The available properties of this object are described in the official "),f.Jb(28,"a",9),f.lc(29,"CORS"),f.Ib(),f.lc(30," documentation. Another way is to pass a "),f.Jb(31,"a",10),f.lc(32,"callback function"),f.Ib(),f.lc(33," that lets you define the configuration object asynchronously based on the request (on the fly)."),f.Ib(),f.Jb(34,"p"),f.lc(35,"Alternatively, enable CORS via the "),f.Jb(36,"code"),f.lc(37,"create()"),f.Ib(),f.lc(38," method's options object. Set the "),f.Jb(39,"code"),f.lc(40,"cors"),f.Ib(),f.lc(41," property to "),f.Jb(42,"code"),f.lc(43,"true"),f.Ib(),f.lc(44," to enable CORS with default settings. Or, pass a "),f.Jb(45,"a",9),f.lc(46,"CORS configuration object"),f.Ib(),f.lc(47," or "),f.Jb(48,"a",10),f.lc(49,"callback function"),f.Ib(),f.lc(50," as the "),f.Jb(51,"code"),f.lc(52,"cors"),f.Ib(),f.lc(53," property value to customize its behavior."),f.Ib(),f.Jb(54,"pre"),f.Jb(55,"code",8),f.lc(56,"\nconst app = await NestFactory.create(AppModule, { cors: true });\nawait app.listen(3000);\n"),f.Ib(),f.Ib(),f.Jb(57,"p"),f.lc(58,"Above method only applies to REST endpoints. "),f.Ib(),f.Jb(59,"p"),f.lc(60,"To enable CORS in GraphQL, set "),f.Jb(61,"code"),f.lc(62,"cors"),f.Ib(),f.lc(63," property to "),f.Jb(64,"code"),f.lc(65,"true"),f.Ib(),f.lc(66," or pass "),f.Jb(67,"a",9),f.lc(68,"CORS configuration object"),f.Ib(),f.lc(69," or a "),f.Jb(70,"a",10),f.lc(71,"callback function"),f.Ib(),f.lc(72," as the "),f.Jb(73,"code"),f.lc(74,"cors"),f.Ib(),f.lc(75," property value when you import GraphQL module."),f.Ib(),f.Jb(76,"blockquote",11),f.Jb(77,"strong"),f.lc(78,"Warning"),f.Ib(),f.Jb(79,"code"),f.lc(80,"CorsOptionsDelegate"),f.Ib(),f.lc(81," solution is not working with the "),f.Jb(82,"code"),f.lc(83,"apollo-server-fastify"),f.Ib(),f.lc(84," package yet.\n"),f.Ib(),f.Jb(85,"pre"),f.Jb(86,"code",8),f.lc(87,"\nGraphQLModule.forRoot({\n  cors: {\n    origin: 'http://localhost:3000',\n    credentials: true,\n  },\n}),\n"),f.Ib(),f.Ib(),f.Ib())},directives:[g.a],encapsulation:2,changeDetection:0}),i),T=f.Lb(k),C=((l=function(o){t(r,o);var s=n(r);function r(){return e(this,r),s.apply(this,arguments)}return r}(J.a)).\u0275fac=function(e){return q(e||l)},l.\u0275cmp=f.Ab({type:l,selectors:[["app-csrf"]],features:[f.ub],decls:51,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/csrf.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","csrf-protection"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/csurf"],["appAnchor","","id","use-with-express-default"],[1,"language-bash"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/csurf#csurf"],[1,"language-typescript"],["appAnchor","","id","use-with-fastify"]],template:function(e,t){1&e&&(f.Jb(0,"div",0,1),f.Jb(2,"div",2),f.Jb(3,"a",3),f.Hb(4,"i",4),f.Ib(),f.Ib(),f.Jb(5,"h3",5),f.lc(6,"CSRF Protection"),f.Ib(),f.Jb(7,"p"),f.lc(8,"Cross-site request forgery (also known as CSRF or XSRF) is a type of malicious exploit of a website where "),f.Jb(9,"strong"),f.lc(10,"unauthorized"),f.Ib(),f.lc(11," commands are transmitted from a user that the web application trusts. To mitigate this kind of attack you can use the "),f.Jb(12,"a",6),f.lc(13,"csurf"),f.Ib(),f.lc(14," package."),f.Ib(),f.Jb(15,"h4",7),f.Jb(16,"span"),f.lc(17,"Use with Express (default)"),f.Ib(),f.Ib(),f.Jb(18,"p"),f.lc(19,"Start by installing the required package:"),f.Ib(),f.Jb(20,"pre"),f.Jb(21,"code",8),f.lc(22,"\n$ npm i --save csurf\n"),f.Ib(),f.Ib(),f.Jb(23,"blockquote",9),f.Jb(24,"strong"),f.lc(25,"Warning"),f.Ib(),f.lc(26," As explained on the "),f.Jb(27,"a",10),f.lc(28,"csurf middleware page"),f.Ib(),f.lc(29,", the csurf module requires either session middleware or a cookie-parser to be initialized first. Please see that documentation for further instructions.\n"),f.Ib(),f.Jb(30,"p"),f.lc(31,"Once the installation is complete, apply the csurf middleware as global middleware."),f.Ib(),f.Jb(32,"pre"),f.Jb(33,"code",11),f.lc(34,"\nimport * as csurf from 'csurf';\n// somewhere in your initialization file\napp.use(csurf());\n"),f.Ib(),f.Ib(),f.Jb(35,"h4",12),f.Jb(36,"span"),f.lc(37,"Use with Fastify"),f.Ib(),f.Ib(),f.Jb(38,"p"),f.lc(39,"Start by installing the required package:"),f.Ib(),f.Jb(40,"pre"),f.Jb(41,"code",8),f.lc(42,"\n$ npm i --save fastify-csrf\n"),f.Ib(),f.Ib(),f.Jb(43,"p"),f.lc(44,"Once the installation is complete, register the "),f.Jb(45,"code"),f.lc(46,"fastify-csrf"),f.Ib(),f.lc(47," plugin, as follows:"),f.Ib(),f.Jb(48,"pre"),f.Jb(49,"code",11),f.lc(50,"\nimport fastifyCsrf from 'fastify-csrf';\n// somewhere in your initialization file\napp.register(fastifyCsrf);\n"),f.Ib(),f.Ib(),f.Ib())},directives:[g.a],encapsulation:2,changeDetection:0}),l),q=f.Lb(C),P=((b=function(o){t(r,o);var s=n(r);function r(){return e(this,r),s.apply(this,arguments)}return r}(J.a)).\u0275fac=function(e){return R(e||b)},b.\u0275cmp=f.Ab({type:b,selectors:[["app-encryption-hashing"]],features:[f.ub],decls:89,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/encryption-hashing.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","encryption-and-hashing"],["appAnchor","","id","encryption"],["rel","nofollow","target","_blank","href","https://nodejs.org/api/crypto.html"],[1,"language-typescript"],["appAnchor","","id","hashing"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/bcrypt"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/argon2"],[1,"language-shell"]],template:function(e,t){1&e&&(f.Jb(0,"div",0,1),f.Jb(2,"div",2),f.Jb(3,"a",3),f.Hb(4,"i",4),f.Ib(),f.Ib(),f.Jb(5,"h3",5),f.lc(6,"Encryption and Hashing"),f.Ib(),f.Jb(7,"p"),f.Jb(8,"strong"),f.lc(9,"Encryption"),f.Ib(),f.lc(10," is the process of encoding information. This process converts the original representation of the information, known as plaintext, into an alternative form known as ciphertext. Ideally, only authorized parties can decipher a ciphertext back to plaintext and access the original information. Encryption does not itself prevent interference but denies the intelligible content to a would-be interceptor. Encryption is a two-way function; what is encrypted can be decrypted with the proper key."),f.Ib(),f.Jb(11,"p"),f.Jb(12,"strong"),f.lc(13,"Hashing"),f.Ib(),f.lc(14," is the process of converting a given key into another value. A hash function is used to generate the new value according to a mathematical algorithm. Once hashing has been done, it should be impossible to go from the output to the input."),f.Ib(),f.Jb(15,"h4",6),f.Jb(16,"span"),f.lc(17,"Encryption"),f.Ib(),f.Ib(),f.Jb(18,"p"),f.lc(19,"Node.js provides a built-in "),f.Jb(20,"a",7),f.lc(21,"crypto module"),f.Ib(),f.lc(22," that you can use to encrypt and decrypt strings, numbers, buffers, streams, and more. Nest itself does not provide any additional package on top of this module to avoid introducing unnecessary abstractions."),f.Ib(),f.Jb(23,"p"),f.lc(24,"As an example, let's use AES (Advanced Encryption System) "),f.Jb(25,"code"),f.lc(26,"'aes-256-ctr'"),f.Ib(),f.lc(27," algorithm CTR encryption mode."),f.Ib(),f.Jb(28,"pre"),f.Jb(29,"code",8),f.lc(30,"\nimport { createCipheriv, randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst iv = randomBytes(16);\nconst password = 'Password used to generate key';\n\n// The key length is dependent on the algorithm.\n// In this case for aes256, it is 32 bytes.\nconst key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;\nconst cipher = createCipheriv('aes-256-ctr', key, iv);\n\nconst textToEncrypt = 'Nest';\nconst encryptedText = Buffer.concat([\n  cipher.update(textToEncrypt),\n  cipher.final(),\n]);\n"),f.Ib(),f.Ib(),f.Jb(31,"p"),f.lc(32,"Now to decrypt "),f.Jb(33,"code"),f.lc(34,"encryptedText"),f.Ib(),f.lc(35," value:"),f.Ib(),f.Jb(36,"pre"),f.Jb(37,"code",8),f.lc(38,"\nimport { createDecipheriv } from 'crypto';\n\nconst decipher = createDecipheriv('aes-256-ctr', key, iv);\nconst decryptedText = Buffer.concat([\n  decipher.update(encryptedText),\n  decipher.final(),\n]);\n"),f.Ib(),f.Ib(),f.Jb(39,"h4",9),f.Jb(40,"span"),f.lc(41,"Hashing"),f.Ib(),f.Ib(),f.Jb(42,"p"),f.lc(43,"For hashing, we recommend using either the "),f.Jb(44,"a",10),f.lc(45,"bcrypt"),f.Ib(),f.lc(46," or "),f.Jb(47,"a",11),f.lc(48,"argon2"),f.Ib(),f.lc(49," packages. Nest itself does not provide any additional wrappers on top of these modules to avoid introducing unnecessary abstractions (making the learning curve short)."),f.Ib(),f.Jb(50,"p"),f.lc(51,"As an example, let's use "),f.Jb(52,"code"),f.lc(53,"bcrypt"),f.Ib(),f.lc(54," to hash a random password."),f.Ib(),f.Jb(55,"p"),f.lc(56,"First install required packages:"),f.Ib(),f.Jb(57,"pre"),f.Jb(58,"code",12),f.lc(59,"\n$ npm i bcrypt\n$ npm i -D @types/bcrypt\n"),f.Ib(),f.Ib(),f.Jb(60,"p"),f.lc(61,"Once the installation is complete, you can use the "),f.Jb(62,"code"),f.lc(63,"hash"),f.Ib(),f.lc(64," function, as follows:"),f.Ib(),f.Jb(65,"pre"),f.Jb(66,"code",8),f.lc(67,"\nimport * as bcrypt from 'bcrypt';\n\nconst saltOrRounds = 10;\nconst password = 'random_password';\nconst hash = await bcrypt.hash(password, saltOrRounds);\n"),f.Ib(),f.Ib(),f.Jb(68,"p"),f.lc(69,"To generate a salt, use the "),f.Jb(70,"code"),f.lc(71,"genSalt"),f.Ib(),f.lc(72," function:"),f.Ib(),f.Jb(73,"pre"),f.Jb(74,"code",8),f.lc(75,"\nconst salt = await bcrypt.genSalt();\n"),f.Ib(),f.Ib(),f.Jb(76,"p"),f.lc(77,"To compare/check a password, use the "),f.Jb(78,"code"),f.lc(79,"compare"),f.Ib(),f.lc(80," function:"),f.Ib(),f.Jb(81,"pre"),f.Jb(82,"code",8),f.lc(83,"\nconst isMatch = await bcrypt.compare(password, hash);\n"),f.Ib(),f.Ib(),f.Jb(84,"p"),f.lc(85,"You can read more about available functions "),f.Jb(86,"a",10),f.lc(87,"here"),f.Ib(),f.lc(88,"."),f.Ib(),f.Ib())},directives:[g.a],encapsulation:2,changeDetection:0}),b),R=f.Lb(P),G=((d=function(o){t(r,o);var s=n(r);function r(){return e(this,r),s.apply(this,arguments)}return r}(J.a)).\u0275fac=function(e){return U(e||d)},d.\u0275cmp=f.Ab({type:d,selectors:[["app-helmet"]],features:[f.ub],decls:114,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/helmet.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","helmet"],["rel","nofollow","target","_blank","href","https://github.com/helmetjs/helmet"],["rel","nofollow","target","_blank","href","https://github.com/helmetjs/helmet#how-it-works"],[1,"info"],["appAnchor","","id","use-with-express-default"],[1,"language-bash"],[1,"language-typescript"],["appAnchor","","id","use-with-fastify"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify-helmet"],["rel","nofollow","target","_blank","href","https://www.fastify.io/docs/latest/Plugins/"],[1,"warning"],["rel","nofollow","target","_blank","href","https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"]],template:function(e,t){1&e&&(f.Jb(0,"div",0,1),f.Jb(2,"div",2),f.Jb(3,"a",3),f.Hb(4,"i",4),f.Ib(),f.Ib(),f.Jb(5,"h3",5),f.lc(6,"Helmet"),f.Ib(),f.Jb(7,"p"),f.Jb(8,"a",6),f.lc(9,"Helmet"),f.Ib(),f.lc(10," can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Generally, Helmet is just a collection of 14 smaller middleware functions that set security-related HTTP headers (read "),f.Jb(11,"a",7),f.lc(12,"more"),f.Ib(),f.lc(13,")."),f.Ib(),f.Jb(14,"blockquote",8),f.Jb(15,"strong"),f.lc(16,"Hint"),f.Ib(),f.lc(17," Note that applying "),f.Jb(18,"code"),f.lc(19,"helmet"),f.Ib(),f.lc(20," as global or registering it must come before other calls to "),f.Jb(21,"code"),f.lc(22,"app.use()"),f.Ib(),f.lc(23," or setup functions that may call "),f.Jb(24,"code"),f.lc(25,"app.use()"),f.Ib(),f.lc(26,"). This is due to the way the underlying platform (i.e., Express or Fastify) works, where the order that middleware/routes are defined matters. If you use middleware like "),f.Jb(27,"code"),f.lc(28,"helmet"),f.Ib(),f.lc(29," or "),f.Jb(30,"code"),f.lc(31,"cors"),f.Ib(),f.lc(32," after you define a route, then that middleware will not apply to that route, it will only apply to middleware defined after the route.\n"),f.Ib(),f.Jb(33,"h4",9),f.Jb(34,"span"),f.lc(35,"Use with Express (default)"),f.Ib(),f.Ib(),f.Jb(36,"p"),f.lc(37,"Start by installing the required package."),f.Ib(),f.Jb(38,"pre"),f.Jb(39,"code",10),f.lc(40,"\n$ npm i --save helmet\n"),f.Ib(),f.Ib(),f.Jb(41,"p"),f.lc(42,"Once the installation is complete, apply it as a global middleware."),f.Ib(),f.Jb(43,"pre"),f.Jb(44,"code",11),f.lc(45,"\nimport * as helmet from 'helmet';\n// somewhere in your initialization file\napp.use(helmet());\n"),f.Ib(),f.Ib(),f.Jb(46,"blockquote",8),f.Jb(47,"strong"),f.lc(48,"Hint"),f.Ib(),f.lc(49," If you are getting the "),f.Jb(50,"code"),f.lc(51,"This expression is not callable"),f.Ib(),f.lc(52," error while trying to import "),f.Jb(53,"code"),f.lc(54,"Helmet"),f.Ib(),f.lc(55,", you very likely have the "),f.Jb(56,"code"),f.lc(57,"allowSyntheticDefaultImports"),f.Ib(),f.lc(58," and "),f.Jb(59,"code"),f.lc(60,"esModuleInterop"),f.Ib(),f.lc(61," options set to "),f.Jb(62,"code"),f.lc(63,"true"),f.Ib(),f.lc(64," in your project's "),f.Jb(65,"code"),f.lc(66,"tsconfig.json"),f.Ib(),f.lc(67," file. If that's the case, change the import statement to: "),f.Jb(68,"code"),f.lc(69,"import helmet from 'helmet'"),f.Ib(),f.lc(70," instead.\n"),f.Ib(),f.Jb(71,"h4",12),f.Jb(72,"span"),f.lc(73,"Use with Fastify"),f.Ib(),f.Ib(),f.Jb(74,"p"),f.lc(75,"If you are using the "),f.Jb(76,"code"),f.lc(77,"FastifyAdapter"),f.Ib(),f.lc(78,", install the "),f.Jb(79,"a",13),f.lc(80,"fastify-helmet"),f.Ib(),f.lc(81," package:"),f.Ib(),f.Jb(82,"pre"),f.Jb(83,"code",10),f.lc(84,"\n$ npm i --save fastify-helmet\n"),f.Ib(),f.Ib(),f.Jb(85,"p"),f.Jb(86,"a",13),f.lc(87,"fastify-helmet"),f.Ib(),f.lc(88," should not be used as a middleware, but as a "),f.Jb(89,"a",14),f.lc(90,"Fastify plugin"),f.Ib(),f.lc(91,", i.e., by using "),f.Jb(92,"code"),f.lc(93,"app.register()"),f.Ib(),f.lc(94,":"),f.Ib(),f.Jb(95,"pre"),f.Jb(96,"code",11),f.lc(97,"\nimport * as helmet from 'fastify-helmet';\n// somewhere in your initialization file\napp.register(helmet);\n"),f.Ib(),f.Ib(),f.Jb(98,"blockquote",15),f.Jb(99,"strong"),f.lc(100,"Warning"),f.Ib(),f.lc(101," When using "),f.Jb(102,"code"),f.lc(103,"apollo-server-fastify"),f.Ib(),f.lc(104," and "),f.Jb(105,"code"),f.lc(106,"fastify-helmet"),f.Ib(),f.lc(107,", there may be a problem with "),f.Jb(108,"a",16),f.lc(109,"CSP"),f.Ib(),f.lc(110," on the GraphQL playground, to solve this collision, configure the CSP as shown below:\n"),f.Jb(111,"pre"),f.Jb(112,"code",11),f.lc(113,"\napp.register(helmet, {\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [`'self'`],\n      styleSrc: [`'self'`, `'unsafe-inline'`, 'cdn.jsdelivr.net', 'fonts.googleapis.com'],\n      fontSrc: [`'self'`, 'fonts.gstatic.com'],\n      imgSrc: [`'self'`, 'data:', 'cdn.jsdelivr.net'],\n      scriptSrc: [`'self'`, `https: 'unsafe-inline'`, `cdn.jsdelivr.net`],\n    },\n  },\n});\n\n// If you are not going to use CSP at all, you can use this:\napp.register(helmet, {\n  contentSecurityPolicy: false,\n});\n"),f.Ib(),f.Ib(),f.Ib(),f.Ib())},directives:[g.a],encapsulation:2,changeDetection:0}),d),U=f.Lb(G),M=((u=function(o){t(r,o);var s=n(r);function r(){return e(this,r),s.apply(this,arguments)}return r}(J.a)).\u0275fac=function(e){return W(e||u)},u.\u0275cmp=f.Ab({type:u,selectors:[["app-rate-limiting"]],features:[f.ub],decls:205,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/rate-limiting.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","rate-limiting"],[1,"language-bash"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/guards"],["appAnchor","","id","customization"],["appAnchor","","id","websockets"],[1,"info"],["appAnchor","","id","graphql"],["appAnchor","","id","configuration"],["appAnchor","","id","async-configuration"],["appAnchor","","id","storages"]],template:function(e,t){1&e&&(f.Jb(0,"div",0,1),f.Jb(2,"div",2),f.Jb(3,"a",3),f.Hb(4,"i",4),f.Ib(),f.Ib(),f.Jb(5,"h3",5),f.lc(6,"Rate Limiting"),f.Ib(),f.Jb(7,"p"),f.lc(8,"A common technique to protect applications from brute-force attacks is "),f.Jb(9,"strong"),f.lc(10,"rate-limiting"),f.Ib(),f.lc(11,". To get started, you'll need to install the "),f.Jb(12,"code"),f.lc(13,"@nestjs/throttler"),f.Ib(),f.lc(14," package."),f.Ib(),f.Jb(15,"pre"),f.Jb(16,"code",6),f.lc(17,"\n$ npm i --save @nestjs/throttler\n"),f.Ib(),f.Ib(),f.Jb(18,"p"),f.lc(19,"Once the installation is complete, the "),f.Jb(20,"code"),f.lc(21,"ThrottlerModule"),f.Ib(),f.lc(22," can be configured as any other Nest package with "),f.Jb(23,"code"),f.lc(24,"forRoot"),f.Ib(),f.lc(25," or "),f.Jb(26,"code"),f.lc(27,"forRootAsync"),f.Ib(),f.lc(28," methods."),f.Ib(),f.Jb(29,"pre"),f.Jb(30,"code",7),f.lc(31,"\n@Module({\n  imports: [\n    ThrottlerModule.forRoot({\n      ttl: 60,\n      limit: 10,\n    }),\n  ]\n})\nexport class AppModule {}\n"),f.Ib(),f.Ib(),f.Jb(32,"p"),f.lc(33,"The above will set the global options for the "),f.Jb(34,"code"),f.lc(35,"ttl"),f.Ib(),f.lc(36,", the time to live, and the "),f.Jb(37,"code"),f.lc(38,"limit"),f.Ib(),f.lc(39,", the maximum number of requests within the ttl, for the routes of your application that are guarded."),f.Ib(),f.Jb(40,"p"),f.lc(41,"Once the module has been imported, you can then choose how you would like to bind the "),f.Jb(42,"code"),f.lc(43,"ThrottlerGuard"),f.Ib(),f.lc(44,". Any kind of binding as mentioned in the "),f.Jb(45,"a",8),f.lc(46,"guards"),f.Ib(),f.lc(47," section is fine. If you wanted to bind the guard globally, for example, you could do so by adding this provider to any module:"),f.Ib(),f.Jb(48,"pre"),f.Jb(49,"code",7),f.lc(50,"\n{\n  provide: APP_GUARD,\n  useClass: ThrottlerGuard\n}\n"),f.Ib(),f.Ib(),f.Jb(51,"h4",9),f.Jb(52,"span"),f.lc(53,"Customization"),f.Ib(),f.Ib(),f.Jb(54,"p"),f.lc(55,"There may be a time where you want to bind the guard to a controller or globally, but want to disable rate limiting for one or more of your endpoints. For that, you can use the "),f.Jb(56,"code"),f.lc(57,"@SkipThrottle()"),f.Ib(),f.lc(58," decorator, to negate the throttler for an entire class or a single route. The "),f.Jb(59,"code"),f.lc(60,"@SkipThrottle()"),f.Ib(),f.lc(61," decorator can also take in a boolean for if there is a case where you want to exclude "),f.Jb(62,"em"),f.lc(63,"most"),f.Ib(),f.lc(64," of a controller, but not every route."),f.Ib(),f.Jb(65,"p"),f.lc(66,"There is also the "),f.Jb(67,"code"),f.lc(68,"@Throttle()"),f.Ib(),f.lc(69," decorator which can be used to override the "),f.Jb(70,"code"),f.lc(71,"limit"),f.Ib(),f.lc(72," and "),f.Jb(73,"code"),f.lc(74,"ttl"),f.Ib(),f.lc(75," set in the global module, to give tighter or looser security options. This decorator can be used on a class or a function as well. The order for this decorator does matter, as the arguments are in the order of "),f.Jb(76,"code"),f.lc(77,"limit, ttl"),f.Ib(),f.lc(78,"."),f.Ib(),f.Jb(79,"h4",10),f.Jb(80,"span"),f.lc(81,"Websockets"),f.Ib(),f.Ib(),f.Jb(82,"p"),f.lc(83,"This module can work with websockets, but it requires some class extension. You can extend the "),f.Jb(84,"code"),f.lc(85,"ThrottlerGuard"),f.Ib(),f.lc(86," and override the "),f.Jb(87,"code"),f.lc(88,"handleRequest"),f.Ib(),f.lc(89," method like so:"),f.Ib(),f.Jb(90,"pre"),f.Jb(91,"code",7),f.lc(92,"\n@Injectable()\nexport class WsThrottlerGuard extends ThrottlerGuard {\n  async handleRequest(context: ExecutionContext, limit: number, ttl: number): Promise<boolean> {\n    const client = context.switchToWs().getClient();\n    const ip = client.conn.remoteAddress; \n    const key = this.generateKey(context, ip);\n    const ttls = await this.storageService.getRecord(key);\n\n    if (ttls.length >= limit) {\n      throw new ThrottlerException();\n    }\n\n    await this.storageService.addRecord(key, ttl);\n    return true;\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(93,"blockquote",11),f.Jb(94,"strong"),f.lc(95,"Hint"),f.Ib(),f.lc(96," If you are using the "),f.Jb(97,"code"),f.lc(98,"@nestjs/platform-ws"),f.Ib(),f.lc(99," package you can use "),f.Jb(100,"code"),f.lc(101,"client._socket.remoteAddress"),f.Ib(),f.lc(102," instead.\n"),f.Ib(),f.Jb(103,"h4",12),f.Jb(104,"span"),f.lc(105,"GraphQL"),f.Ib(),f.Ib(),f.Jb(106,"p"),f.lc(107,"The "),f.Jb(108,"code"),f.lc(109,"ThrottlerGuard"),f.Ib(),f.lc(110," can also be used to work with GraphQL requests. Again, the guard can be extended, but this tme the "),f.Jb(111,"code"),f.lc(112,"getRequestResponse"),f.Ib(),f.lc(113," method will be overridden"),f.Ib(),f.Jb(114,"pre"),f.Jb(115,"code",7),f.lc(116,"\n@Injectable()\nexport class GqlThrottlerGuard extends ThrottlerGuard {\n  getRequestResponse(context: ExecutionContext) {\n    const gqlCtx = GqlExecutionContext.create(context);\n    const ctx = gql.getContext();\n    return { req, ctx.req, res: ctx.res }\n  }\n}\n"),f.Ib(),f.Ib(),f.Jb(117,"h4",13),f.Jb(118,"span"),f.lc(119,"Configuration"),f.Ib(),f.Ib(),f.Jb(120,"p"),f.lc(121,"The following options are valid for the "),f.Jb(122,"code"),f.lc(123,"ThrottlerModule"),f.Ib(),f.lc(124,":"),f.Ib(),f.Jb(125,"table"),f.Jb(126,"tr"),f.Jb(127,"td"),f.Jb(128,"code"),f.lc(129,"ttl"),f.Ib(),f.Ib(),f.Jb(130,"td"),f.lc(131,"the number of seconds that each request will last in storage"),f.Ib(),f.Ib(),f.Jb(132,"tr"),f.Jb(133,"td"),f.Jb(134,"code"),f.lc(135,"limit"),f.Ib(),f.Ib(),f.Jb(136,"td"),f.lc(137,"the maximum number of requests within the TTL limit"),f.Ib(),f.Ib(),f.Jb(138,"tr"),f.Jb(139,"td"),f.Jb(140,"code"),f.lc(141,"ignoreUserAgents"),f.Ib(),f.Ib(),f.Jb(142,"td"),f.lc(143,"an array of regular expressions of user-agents to ignore when it comes to throttling requests"),f.Ib(),f.Ib(),f.Jb(144,"tr"),f.Jb(145,"td"),f.Jb(146,"code"),f.lc(147,"storage"),f.Ib(),f.Ib(),f.Jb(148,"td"),f.lc(149," the storage setting for how to keep track of the requests"),f.Ib(),f.Ib(),f.Ib(),f.Jb(150,"h4",14),f.Jb(151,"span"),f.lc(152,"Async Configuration"),f.Ib(),f.Ib(),f.Jb(153,"p"),f.lc(154,"You may want to get your rate-limiting configuration asynchronously instead of synchronously. You can use the "),f.Jb(155,"code"),f.lc(156,"forRootAsync()"),f.Ib(),f.lc(157," method, which allows for dependency injection and "),f.Jb(158,"code"),f.lc(159,"async"),f.Ib(),f.lc(160," methods."),f.Ib(),f.Jb(161,"p"),f.lc(162,"One approach would be to use a factory function:"),f.Ib(),f.Jb(163,"pre"),f.Jb(164,"code",7),f.lc(165,"\n@Module({\n  imports: [\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.get('THROTTLE_TTL'),\n        limit: config.get('THROTTLE_LIMIT'),\n      }),\n    }),\n  ],\n})\nexport class AppModule {}\n"),f.Ib(),f.Ib(),f.Jb(166,"p"),f.lc(167,"You can also use the "),f.Jb(168,"code"),f.lc(169,"useClass"),f.Ib(),f.lc(170," syntax:"),f.Ib(),f.Jb(171,"pre"),f.Jb(172,"code",7),f.lc(173,"\n@Module({\n  imports: [\n    ThrottlerModule.forRootASync({\n      imports: [ConfigModule],\n      useClass: ThrottlerConfigService,\n    }),\n  ],\n})\nexport class AppModule {}\n"),f.Ib(),f.Ib(),f.Jb(174,"p"),f.lc(175,"This is doable, as long as "),f.Jb(176,"code"),f.lc(177,"ThrottlerConfigService"),f.Ib(),f.lc(178," implements the interface "),f.Jb(179,"code"),f.lc(180,"ThrottlerOptionsFactory"),f.Ib(),f.lc(181,"."),f.Ib(),f.Jb(182,"h4",15),f.Jb(183,"span"),f.lc(184,"Storages"),f.Ib(),f.Ib(),f.Jb(185,"p"),f.lc(186,"The built in storage is an in memory cache that keeps track of the requests made until they have passed the TTL set by the global options. You can drop in your own storage option to the "),f.Jb(187,"code"),f.lc(188,"storage"),f.Ib(),f.lc(189," option of the "),f.Jb(190,"code"),f.lc(191,"ThrottlerModule"),f.Ib(),f.lc(192," so long as the class implements the "),f.Jb(193,"code"),f.lc(194,"ThrottlerStorage"),f.Ib(),f.lc(195," interface. "),f.Ib(),f.Jb(196,"blockquote",11),f.Jb(197,"strong"),f.lc(198,"Note"),f.Ib(),f.Jb(199,"code"),f.lc(200,"ThrottlerStorage"),f.Ib(),f.lc(201," can be imported from "),f.Jb(202,"code"),f.lc(203,"@nestjs/throttler"),f.Ib(),f.lc(204,".\n"),f.Ib(),f.Ib())},directives:[g.a],encapsulation:2,changeDetection:0}),u),W=f.Lb(M),E=[{path:"authentication",component:A,data:{title:"Authentication"}},{path:"cors",component:k,data:{title:"CORS"}},{path:"helmet",component:G,data:{title:"Helmet"}},{path:"encryption-and-hashing",component:P,data:{title:"Encryption and Hashing"}},{path:"csrf",component:C,data:{title:"CSRF"}},{path:"rate-limiting",component:M,data:{title:"Rate Limiting"}},{path:"authorization",component:j,data:{title:"Authorization"}}],H=((p=function t(){e(this,t)}).\u0275mod=f.Eb({type:p}),p.\u0275inj=f.Db({factory:function(e){return new(e||p)},imports:[[h.b,I.a,m.g.forChild(E)]]}),p)}}])}();